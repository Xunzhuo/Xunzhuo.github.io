<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Crazy Weekdays：疯狂的一周</title>
      <link href="/busy-week/"/>
      <url>/busy-week/</url>
      
        <content type="html"><![CDATA[<h1 id="Why❓"><a href="#Why❓" class="headerlink" title="Why❓"></a>Why❓</h1><blockquote><p>这周处于高度兴奋以及紧张的状态，晚上睡的也不好，因为头脑里想的还是自己的项目，怎么让他们更好，以及思考即将开始的新项目。</p></blockquote><p>昨晚到凌晨<code>两点</code>都难以入眠，凌晨<code>四点</code>又醒了，把电脑充上电，然后睡到<code>7点50</code>就自然醒了，起来竟然一点也不疲倦。</p><p>现在是<code>2020.05.28</code>，我正坐在咖啡厅写下这篇文章，想停一停这种忙碌，重新调整一下状态，并回顾一下这<code>出乎意料疯狂</code>的一周。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/monkey.jpg"></p><hr><h1 id="What-did-I-do❓"><a href="#What-did-I-do❓" class="headerlink" title="What did I do❓"></a>What did I do❓</h1><h2 id="这周对我而言是相当忙碌的，连续三个项目相继的出来了。"><a href="#这周对我而言是相当忙碌的，连续三个项目相继的出来了。" class="headerlink" title="这周对我而言是相当忙碌的，连续三个项目相继的出来了。"></a>这周对我而言是相当忙碌的，连续三个项目相继的出来了。</h2><ol><li><p><code>OI_Sharing</code>：算法、数据结构的学习路线和教程 <a href="https://github.com/Xunzhuo/OI_Sharing">Here</a></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/oishare.png"></p></li><li><p><code>Hexo-Theme-Coder</code>：一个为程序员设计的极简主题 <a href="https://github.com/Xunzhuo/hexo-theme-coder">Here</a></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/Coder.png"></p></li><li><p><code>AirSpider</code>：一个轻量级高性能异步爬虫框架 <a href="https://github.com/Xunzhuo/AirSpider">Here</a></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/airspider.png"></p></li></ol><h3 id="不知道为何这三个项目诞生的时间就这么巧，全都集中在了这一周，这也是为什么我称之为疯狂的一周的原因之一。"><a href="#不知道为何这三个项目诞生的时间就这么巧，全都集中在了这一周，这也是为什么我称之为疯狂的一周的原因之一。" class="headerlink" title="不知道为何这三个项目诞生的时间就这么巧，全都集中在了这一周，这也是为什么我称之为疯狂的一周的原因之一。"></a>不知道为何这三个项目诞生的时间就这么巧，全都集中在了这一周，这也是为什么我称之为<code>疯狂的一周</code>的原因之一。</h3><h1 id="What-unexpected-❓"><a href="#What-unexpected-❓" class="headerlink" title="What unexpected ❓"></a>What unexpected ❓</h1><h3 id="为什么疯狂当然不止是因为忙碌，主要是因为一些未意料的事情发生了🔥"><a href="#为什么疯狂当然不止是因为忙碌，主要是因为一些未意料的事情发生了🔥" class="headerlink" title="为什么疯狂当然不止是因为忙碌，主要是因为一些未意料的事情发生了🔥"></a>为什么疯狂当然不止是因为忙碌，主要是因为一些未意料的事情发生了🔥</h3><h2 id="OI-Sharing："><a href="#OI-Sharing：" class="headerlink" title="OI_Sharing："></a>OI_Sharing：</h2><ul><li><p>在周二的时候，登上了<code>GitHub Trending</code>排名11。</p><ul><li>这个我每天都会逛逛，寻找优秀项目的全球榜单，没想到自己上了榜</li></ul></li><li><p>更没意料的是 周三不仅没有从榜单下来，排名还从十一 前进到了 第二</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/trend.png"></p></li><li><p>现在依然在榜单中，且 star 目前已经 500+ ✨ fork 接近100🔥，完全意料之外。这对我是很大的鼓励</p></li></ul><hr><h2 id="Hexo-Theme-Coder："><a href="#Hexo-Theme-Coder：" class="headerlink" title="Hexo-Theme-Coder："></a>Hexo-Theme-Coder：</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/boycoder.png"></p><blockquote><p>在今天，收到<code>Hexo</code>官方的<code>邮件通知</code>，我的<code>Coder</code>主题已经被官方收录了，还是一件庆幸的一件事。</p></blockquote><p>从大一开始使用Hexo，经常逛的Hexo主题库里，居然有了一个自己写的主题了，感觉非常开心！</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/coder-hexo.png" alt="coder-hexo"></p><hr><h2 id="AirSpider："><a href="#AirSpider：" class="headerlink" title="AirSpider："></a>AirSpider：</h2><blockquote><p>从一直使用pip安装优秀的Python库，到自己创造一个Python库。</p><p>发布在了PyPI，现在也能使用pip安装自己的Python库了。</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/airspider-rele.png"></p><h3 id="这种感觉很奇妙！"><a href="#这种感觉很奇妙！" class="headerlink" title="这种感觉很奇妙！"></a>这种感觉很奇妙！</h3><ul><li><p>从一个<code>使用者</code>，变成了一个<code>创造者</code>。</p></li><li><p>从一个被别人code帮助的角色，变成了一个自己code帮助别人的角色。</p></li></ul><p>这个项目我之后会花费更多时间维护升级，因为进步空间还很大，让<code>AirSpider</code>更加优秀！</p><h2 id="Social："><a href="#Social：" class="headerlink" title="Social："></a>Social：</h2><h3 id="自从自己项目登上了Trending之后"><a href="#自从自己项目登上了Trending之后" class="headerlink" title="自从自己项目登上了Trending之后"></a>自从自己项目登上了Trending之后</h3><ul><li><code>GitHub followers</code> 已经超过100个</li><li><code>Zhihu</code> fans 超过 200个</li><li>自己网站这一周的<code>访问量</code>大于之前一个月的<code>总访问量</code><ul><li>访客数大于20000+</li><li>访问量大于40000+</li></ul></li><li>超过二十个多的<code>新朋友</code>添加我的QQ和微信，并收到几个程序员前辈的表扬，和一个公司<code>HR</code>的联系。（当然也要感谢一直支持我的人：爸妈，老师，远在USA的Uncle 倪，and我的GF）</li></ul><h1 id="So-What？"><a href="#So-What？" class="headerlink" title="So What？"></a>So What？</h1><blockquote><p>这是一个<code>忙碌</code>，<code>充实</code>，并且<code>充满喜悦</code>的一周。</p></blockquote><h4 id="不过我知道，一阵风之后，一切又会趋于平静，从瞩目慢慢又会淡然。"><a href="#不过我知道，一阵风之后，一切又会趋于平静，从瞩目慢慢又会淡然。" class="headerlink" title="不过我知道，一阵风之后，一切又会趋于平静，从瞩目慢慢又会淡然。"></a>不过我知道，一阵风之后，一切又会趋于平静，从瞩目慢慢又会淡然。</h4><p>过去的成绩，这周的喜悦，如果想要在以后再次感受，需要更努力，做出更优秀的项目，得到更多人的认可。</p><h4 id="这周更像是对我以前的努力的肯定，那段很少有人能理解自己的孤独时光，激发自己更加的努力。"><a href="#这周更像是对我以前的努力的肯定，那段很少有人能理解自己的孤独时光，激发自己更加的努力。" class="headerlink" title="这周更像是对我以前的努力的肯定，那段很少有人能理解自己的孤独时光，激发自己更加的努力。"></a>这周更像是对我以前的努力的肯定，那段很少有人能理解自己的孤独时光，激发自己更加的努力。</h4><p>希望下次 另一个登上 <code>GitHub Trending</code> 是一个和我研究方向有关的令人称赞的项目，而不仅仅是<code>运气</code>（至少我是这么觉得），它能帮助更多的人。</p><h4 id="我的专业，我觉得不仅仅是关于技术，不仅是一个技术使用者，更应该是个创造者、艺术家。"><a href="#我的专业，我觉得不仅仅是关于技术，不仅是一个技术使用者，更应该是个创造者、艺术家。" class="headerlink" title="我的专业，我觉得不仅仅是关于技术，不仅是一个技术使用者，更应该是个创造者、艺术家。"></a>我的专业，我觉得不仅仅是关于<code>技术</code>，不仅是一个技术使用者，更应该是个<code>创造者</code>、<code>艺术家</code>。</h4><p>我们的<code>艺术</code>，是<code>发现</code>。</p><ul><li><p>发现生活中的<code>问题</code>，然后解决它</p></li><li><p>发现已存在技术中的<code>缺点</code>然后提升它</p></li><li><p><code>创造</code>不存在的技术，通过<code>创新</code>来改变一点点世界。</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/coderkoke.jpg"></p><blockquote><p>好啦，不说了，还有文档没写完，我去忙了，感谢阅读🙏，我们一起进步🔥！接下来又是忙的秃头的一个月！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成就 </tag>
            
            <tag> 生活杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题-CoderV1.0发布啦</title>
      <link href="/hexo-coder/"/>
      <url>/hexo-coder/</url>
      
        <content type="html"><![CDATA[<div align = "center">  <img src="https://picreso.oss-cn-beijing.aliyuncs.com/boycoder.png" width="200px" />  <h1> Coder | Hexo Theme</h1>  <br>  <h3> Light 🌲 | Minimalism ✈️ ｜ Dark/Light 🌞🌛</h3>  <br>  <h3>    轻便 🌲 ｜ 极简 ✈️｜ 黑白🌞🌛｜实用效率🔨  </h3>  <br>  <h2>为简约、极简爱好者打造的Hexo主题</h2>  <img src="https://picreso.oss-cn-beijing.aliyuncs.com/hexocoder.png" /></div><h1 id="Why-Coder❓"><a href="#Why-Coder❓" class="headerlink" title="Why Coder❓"></a>Why Coder❓</h1><ul><li>自己从大一就在用Hexo写博客，对Hexo很喜欢，一直想着自己写一个主题</li><li>自己主要方向是NLP、深度学习，Web开发一直都是自学，能力有限，不能太复杂</li><li>不复杂不代表不好，博客的极简也是很多人追求的，所以我开发了这个主题，前前后后1个月</li></ul><blockquote><p>演示地址 : <a href="https://www.liuxunzhuo.top/">点这里</a></p></blockquote><h1 id="Introduction🎙️"><a href="#Introduction🎙️" class="headerlink" title="Introduction🎙️"></a>Introduction🎙️</h1><h2 id="Coder-是-一个极简的Hexo主题☁️"><a href="#Coder-是-一个极简的Hexo主题☁️" class="headerlink" title="Coder 是 一个极简的Hexo主题☁️"></a>Coder 是 一个极简的Hexo主题☁️</h2><p>正如名字所言，主题是关于程序员的，而程序员代表的是应该<code>效率</code>、<code>简洁</code>和<code>实用</code></p><p>这也是<code>Coder</code>这个主题所表达的精神，也是这个主题的特点</p><p>当你厌倦了花哨之后，我相信很多人想让博客变得简约，Coder就是为你们而设计❤️</p><p>接下来我来展示各个<code>效果图</code></p><h2 id="Coder-展示👀"><a href="#Coder-展示👀" class="headerlink" title="Coder 展示👀"></a>Coder 展示👀</h2><h3 id="电脑端💻："><a href="#电脑端💻：" class="headerlink" title="电脑端💻："></a>电脑端💻：</h3><h4 id="黑色模式"><a href="#黑色模式" class="headerlink" title="黑色模式"></a>黑色模式</h4><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/gentle.png"></p><h4 id="白色模式"><a href="#白色模式" class="headerlink" title="白色模式"></a>白色模式</h4><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/light.png"></p><h3 id="Lady模式："><a href="#Lady模式：" class="headerlink" title="Lady模式："></a>Lady模式：</h3><h4 id="Dark模式"><a href="#Dark模式" class="headerlink" title="Dark模式"></a>Dark模式</h4><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/lady1.png"></p><h4 id="Light模式"><a href="#Light模式" class="headerlink" title="Light模式"></a>Light模式</h4><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/lady2.png"></p><h3 id="手机端："><a href="#手机端：" class="headerlink" title="手机端："></a>手机端：</h3><div align = "center">  <span> <img src="https://picreso.oss-cn-beijing.aliyuncs.com/phonesdsd.png" width="200" /> <img src="https://picreso.oss-cn-beijing.aliyuncs.com/phoness.png" width="200"  /></span></div><h1 id="How-To-Use❓"><a href="#How-To-Use❓" class="headerlink" title="How To Use❓"></a>How To Use❓</h1><h2 id="Coder使用和配置很简单："><a href="#Coder使用和配置很简单：" class="headerlink" title="Coder使用和配置很简单："></a>Coder使用和配置很简单：</h2><h3 id="1-进入-Hexo目录-themes："><a href="#1-进入-Hexo目录-themes：" class="headerlink" title="1. 进入 /Hexo目录/themes："></a>1. 进入 /Hexo目录/themes：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Xunzhuo/hexo-theme-coder coder</span><br></pre></td></tr></table></figure><h3 id="2-修改Hexo目录下的-config-yml-的-theme-为-coder"><a href="#2-修改Hexo目录下的-config-yml-的-theme-为-coder" class="headerlink" title="2. 修改Hexo目录下的**_config.yml** 的 theme 为 coder"></a>2. 修改Hexo目录下的**_config.yml** 的 <strong>theme</strong> 为 <strong>coder</strong></h3><h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">logo_title:</span> <span class="string">你网站的名字</span></span><br><span class="line"><span class="comment"># 初始化风格 black/light</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">black</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页URL</span></span><br><span class="line"><span class="attr">link:</span> <span class="string">https://www.liuxunzhuo.top</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网站标语:</span></span><br><span class="line"><span class="attr">words:</span> <span class="string">AI</span> <span class="string">🤖️</span> <span class="string">Code</span> <span class="string">🧑‍💻</span> <span class="string">Life</span> <span class="string">🌈</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的昵称</span></span><br><span class="line"><span class="attr">author:</span> <span class="number">1900</span></span><br><span class="line"><span class="comment"># 中心图标选择男女或者自定义</span></span><br><span class="line"><span class="attr">gender:</span> <span class="string">/img/male.png</span> <span class="comment">#/img/female.png</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单栏配置</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">关于我👀:</span> <span class="string">/about</span></span><br><span class="line">  <span class="string">访问主站🎉:</span> <span class="string">https://liuxunzhuo.tech</span></span><br><span class="line">  <span class="string">Github🐒:</span> <span class="string">https://github.com/xunzhuo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 评论配置</span></span><br><span class="line"><span class="comment"># 请改成自己的 KEY</span></span><br><span class="line"><span class="comment"># 若关闭valine 设置enable为false</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">NOsswOncKgc8HOxqo9oxIWlX-gzGzoHsz</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">z1FihjWEbS8uIfUQdmCtK7zz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>然后你就可以愉快的开始使用啦！😊</p></blockquote><h1 id="Coder后期计划"><a href="#Coder后期计划" class="headerlink" title="Coder后期计划"></a>Coder后期计划</h1><p>闲暇时可能会不断扩展这个主题的功能，让Coder更实用～</p><p>如果你对这个项目感兴趣也可以一起合作🤝</p><h2 id="如果喜欢请送上一个star✨哦～如果你对我的研究感兴趣期待你的follow👬～🌈"><a href="#如果喜欢请送上一个star✨哦～如果你对我的研究感兴趣期待你的follow👬～🌈" class="headerlink" title="如果喜欢请送上一个star✨哦～如果你对我的研究感兴趣期待你的follow👬～🌈"></a>如果喜欢请送上一个star✨哦～如果你对我的研究感兴趣期待你的follow👬～🌈</h2>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能该如何零基础入门👀？</title>
      <link href="/AI-stack/"/>
      <url>/AI-stack/</url>
      
        <content type="html"><![CDATA[<div align="center"><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/monkey.jpg"></p><blockquote><p>很多朋友想学习人工智能，不过不知如何入手，这篇文章就带你进入AI的世界</p></blockquote><h1 id="一、语言"><a href="#一、语言" class="headerlink" title="一、语言"></a>一、语言</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/img_no.jpg"></p><p>希望在进入这个领域之前 至少得会一门语言 <code>Python</code>。</p><p>后面可以学学<code>C </code>或者<code> C++</code>，很多源码也是<code>C</code>和<code>C++</code>的</p><h1 id="二、数学"><a href="#二、数学" class="headerlink" title="二、数学"></a>二、数学</h1><img src="https://picreso.oss-cn-beijing.aliyuncs.com/math.png" style="zoom:180%;" /><p>以及不想做调包侠的话，学通透得有比较好的数学基础：</p><h3 id="微积分-线性代数-概率论"><a href="#微积分-线性代数-概率论" class="headerlink" title="微积分 线性代数 概率论"></a>微积分 线性代数 概率论</h3><blockquote><p>如果数学基础不好可以先补一补，不然有些理解起来或许会很头疼。</p></blockquote><h1 id="三、快速入门机器学习、深度学习"><a href="#三、快速入门机器学习、深度学习" class="headerlink" title="三、快速入门机器学习、深度学习"></a>三、快速入门机器学习、深度学习</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/dpnnsds.jpg"></p><p>推荐我的启蒙书，复旦大学邱老师的开源书<code>《神经网络与深度学习》</code></p><p>虽然本身市面上有很多机器学习，深度学习的书</p><blockquote><p>西瓜书，统计学习方法，花书等等</p></blockquote><p>我觉得各有优劣，而且眼花撩乱，一开始入门我觉得看NNDL就不错了。</p><h1 id="四、学习至少一个框架"><a href="#四、学习至少一个框架" class="headerlink" title="四、学习至少一个框架"></a>四、学习至少一个框架</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/%E5%AE%9E%E6%89%93%E5%AE%9E%E7%9A%84sad.jpg">我个人是先学习的<code>Pytorch</code>，我也建议先学<code>Pytorch</code>，因为它很适合学习做研究。</p><p>推荐一本书开源书：<code>《动手学深度学习 pytorch版》</code></p><p>在学习框架的过程中去实践，实现一些模型。</p><p>框架很多，后面可以多学学，比如TensorFlow</p><blockquote><p>恭喜你 ！到此基本你已经入门了～</p></blockquote><h1 id="五、选择方向"><a href="#五、选择方向" class="headerlink" title="五、选择方向"></a>五、选择方向</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/sdsadsadxx.jpg">对于人工智能的方向有很多，你要确定自己的方向。</p><p>我的方向是<code>自然语言处理</code></p><p>当然还有计算机视觉、推荐系统，强化学习等等。</p><p>明确方向后，对应的<strong>技术路线</strong>比比皆是，然后向专业方向挺进。</p><h1 id="六、好的习惯"><a href="#六、好的习惯" class="headerlink" title="六、好的习惯"></a>六、好的习惯</h1><p>最好会读<strong>Paper</strong>，养成读Paper的习惯</p><blockquote><p>网站推荐：<a href="https://paperswithcode.com/">Paperswithcode</a></p></blockquote><p>多实践：打一些比赛 Kaggle 天池等</p><p>学会做总结，写技术博客，分享知识。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-d5b9dba6cda9b5cb9b435aeee7fd8f4f_180x120-20200520115351721.jpg"></p></div>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✍️动手实现Markov-Chain</title>
      <link href="/markov-python/"/>
      <url>/markov-python/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/sdsadsaaaa.jpg"></p><h2 id="学习马尔可夫链及其性质，了解转移矩阵，并用-Python-动手实现！"><a href="#学习马尔可夫链及其性质，了解转移矩阵，并用-Python-动手实现！" class="headerlink" title="学习马尔可夫链及其性质，了解转移矩阵，并用 Python 动手实现！"></a>学习马尔可夫链及其性质，了解转移矩阵，并用 Python 动手实现！</h2><p>马尔可夫链是通常用一组随机变量定义的数学系统，可以根据具体的概率规则进行状态转移。转移的集合满足<strong>马尔可夫性质</strong>，也就是说，转移到任一特定状态的概率只取决于当前状态和所用时间，而与其之前的状态序列无关。马尔可夫链的这个独特性质就是<strong>无记忆性</strong>。</p><p>跟随本教程学会使用马尔可夫链，你就会懂得离散时间马尔可夫链是什么。你还会学习构建（离散时间）马尔可夫链模型所需的组件及其常见特性。接着学习用 Python 及其 <code>numpy</code> 和 <code>random</code> 库来实现一个简单的模型。还要学习用多种方式来表示马尔可夫链，比如状态图和转移矩阵</p><p>开始吧……</p><h2 id="为什么要用马尔可夫链？"><a href="#为什么要用马尔可夫链？" class="headerlink" title="为什么要用马尔可夫链？"></a>为什么要用马尔可夫链？</h2><p>马尔可夫链在数学中有广泛使用。同时也在经济学，博弈论，通信原理，遗传学和金融学领域有广泛应用。通常出现在统计学，尤其是贝叶斯统计，和信息论上下文中。在现实中，马尔可夫链为研究机动车辆的巡航定速系统，抵达机场的乘客的排队序列，货币汇率等问题提供了解决思路。最早由 Google 搜索引擎提出的 PageRank 就是基于马尔可夫过程的算法。Reddit 有个叫子版块模拟器的子版块，帖子和评论全部用马尔可夫链自动生成生成，厉害吧！</p><h2 id="马尔可夫链"><a href="#马尔可夫链" class="headerlink" title="马尔可夫链"></a>马尔可夫链</h2><p>马尔可夫链是具有马尔可夫性质的随机过程。随机过程或者说具有随机性质是指由一组随机变量定义的数学对象。马尔可夫链要么有离散状态空间（一组随机变量的可能值的集合）要么有离散索引集合（通常表示时间），鉴于此，马尔可夫链有众多变种。而通常所说的「马尔可夫链」是指具有离散时间集合的过程，也就是离散时间马尔可夫链（DTMC）。</p><h2 id="离散时间马尔可夫链"><a href="#离散时间马尔可夫链" class="headerlink" title="离散时间马尔可夫链"></a>离散时间马尔可夫链</h2><p>离散时间马尔可夫链所包含的系统的每一步都处于某个状态，步骤之间的状态随机变化。这些步骤常被比作时间的各个瞬间（不过你也可以想成物理距离或者随便什么离散度量）。离散时间马尔可夫链是随机变量 X1，X2，X3 … 的序列，不过要满足马尔可夫性质，所以转移到下一概率只和现在的状态有关，与之前的状态无关。用概率数学公式表示如下：</p><p>Pr( Xn+1 = x | X1 = x1, X2 = x2, …, Xn = xn) = Pr( Xn+1 = x | Xn = xn)</p><p>可见 Xn+1 的概率只和之前的 Xn 的概率有关。所以只需要知道上一个状态就可以确定现在状态的概率分布，满足条件独立（也就是说：只需要知道现在状态就可以确定下一个状态）。</p><p>Xi 的可能取值构成的可数集合 S 称为马尔可夫链<strong>状态空间</strong>。状态空间可以是任何东西：字母，数字，篮球比分或者天气情况。虽说时间参数通常是离散的，离散时间马尔可夫链的状态空间却没有什么广泛采用的约束条件，还不如参考任意状态空间下的过程。不过许多马尔可夫链的应用都用到了统计分析更简单的有限或可数无穷状态空间。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>马尔可夫链用概率自动机表示（相信我它没有听上去那么复杂！）。系统状态的改变叫做转移。各个状态改变的概率叫做转移概率。概率自动机包括从已知转移到转移方程的概率，将其转换为转移矩阵。</p><p>还可以将马尔可夫链看作有向图，其中图 n 的边标注的是 n 时刻状态转移到 n+1 时刻状态的概率，Pr(Xn+1 = x | Xn = xn)。这个式子可以读做，从已知状态 Xn 转移到状态 Xn+1 的概率。这个概念也可以用从时刻 n 到时刻 n+1 的<strong>转移矩阵</strong>来表示。状态空间的每个状态第一次出现是作为转移矩阵的行，第二次是列。矩阵的每个元素都表示从这一行表示的状态转移到列状态的概率。</p><p>如果马尔可夫链有 N 种状态，转移矩阵就是 N x N 维，其中（I, J）表示从状态 I 转移到状态 J 的概率。此外，转移矩阵一定是概率矩阵，也就是每一行元素之和一定是 1。为什么？因为每一行表示自身的概率分布。</p><p>所以模型的主要特征包括：状态空间，描述了特定转移发生的概率的转移矩阵以及由初始分布给出的状态空间的初始状态。</p><p>好像很复杂？</p><p>我们来看一个简单的例子帮助理解这些概念：</p><p>如果 Cj 难得心情不好，她会跑步，或者大吃特吃冰淇淋（译者注：原文 gooble 应为 gobble），要么打个盹儿来调整。</p><p>根据以往数据，如果她睡了一觉调整心情，第二天她有 60% 的可能去跑步，20% 的可能继续待在床上，还有 20% 的可能吃一大份冰淇淋。</p><p>如果她跑步散心，第二天她有 60% 的可能接着跑步，30% 的可能吃冰淇淋，只有 10% 的可能会去睡觉。</p><p>最后，如果她难过时纵情冰淇淋，第二天只有 10% 的可能性继续吃冰淇淋，有 70% 的可能性跑步，还有 20% 的可能性睡觉。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/markov1.png" style="zoom:50%;" /><p>上面由状态图表示的马尔可夫链有 3 个可能状态：睡觉，跑步和冰淇淋。所以转移矩阵是 3 x 3 矩阵。注意，离开某一状态的箭头的值的和一定是 1，这跟状态矩阵每一行元素之和是 1 一样，都表示概率的分布。转移矩阵中每个元素的含义跟状态图的每个状态类似。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/markov2.png" style="zoom:50%;" /><p>这个例子应该会帮助你理解与马尔可夫链有关的几个不同概念。不过在现实世界中如何应用这一理论呢？</p><p>借助这个例子，你应该能够回答这种问题：「从睡觉状态开始，2 天后 Cj 最后选择跑步（跑步状态）的概率是多少？」</p><p>我们一起算一下。要从睡觉状态转移到跑步状态，Cj 有如下选择：第一天继续睡觉，第二天跑步（0.2 ⋅ 0.6）；第一天换成跑步，第二天继续跑步（0.6 ⋅ 0.6）；第一天去吃冰淇淋，第二天换成跑步（0.2 ⋅ 0.7）。算下来概率是：((0.2 ⋅ 0.6) + (0.6 ⋅ 0.6) + (0.2 ⋅ 0.7)) = 0.62。所以说，从睡觉状态开始，2天后 Cj 处于跑步状态的概率是 62%。</p><p>希望这个例子可以告诉你马尔可夫链网络都可以解决哪些问题。</p><p>同时，还可以更好地理解马尔可夫链的几个重要性质：</p><ul><li>互通性：如果一个马尔可夫链可以从任何状态转移至任何状态，那么它就是不可还原的。换句话说，如果任两个状态之间存在一系列步骤的概率为正，就是不可还原的。</li><li>周期性：如果马尔可夫链只有在大于 1 的某个整数的倍数时返回某状态，那么马尔可夫链的状态是周期性的。因此，从状态「i」开始，只有经过整数倍个周期「k」才能回到「i」，k 是所有满足条件的整数的最大值。如果 k = 1 状态「i」不是周期性的，如果 k &gt; 1，「i」才是周期性的。</li><li>瞬态性和常返性：如果从状态「i」开始，有可能无法回到状态「i」，那么状态「i」有瞬态性。否则具有常返性（或者说持续性）。如果某状态可以在有限步内重现，该状态具有常返性，否则没有常返性。</li><li>遍历性：状态「i」如果满足非周期性和正重现性，它就有遍历性。如果不具有可还原性的马尔可夫链的每个状态都有遍历性，那么这个马尔可夫链也具有遍历性。</li><li>吸收态：如果无法从状态「i」转移到其他状态，「i」处于吸收态。因此，如果 当 i ≠ j 时，pii = 1 且 pij = 0，状态「i」处于吸收态。如果马尔可夫链的每个状态都可以达到吸收态，称其为具有吸收态的马尔可夫链。</li></ul><h2 id="用-Python-实现马尔可夫链"><a href="#用-Python-实现马尔可夫链" class="headerlink" title="用 Python 实现马尔可夫链"></a>用 Python 实现马尔可夫链</h2><p>我们用 Python 来实现一下上面这个例子。当然实际使用的库实现的马尔可夫链的效率会高得多，这里还是给出实例代码帮助你入门……</p><p>先 import 用到的库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rm</span><br></pre></td></tr></table></figure><p>然后定义状态及其概率，也就是转移矩阵。要记得，因为有三个状态，矩阵是 3 X 3 维的。此外还要定义转移路径，也可以用矩阵表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态空间</span></span><br><span class="line">states = [<span class="string">&quot;Sleep&quot;</span>,<span class="string">&quot;Icecream&quot;</span>,<span class="string">&quot;Run&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能的事件序列</span></span><br><span class="line">transitionName = [[<span class="string">&quot;SS&quot;</span>,<span class="string">&quot;SR&quot;</span>,<span class="string">&quot;SI&quot;</span>],[<span class="string">&quot;RS&quot;</span>,<span class="string">&quot;RR&quot;</span>,<span class="string">&quot;RI&quot;</span>],[<span class="string">&quot;IS&quot;</span>,<span class="string">&quot;IR&quot;</span>,<span class="string">&quot;II&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 概率矩阵（转移矩阵）</span></span><br><span class="line">transitionMatrix = [[<span class="number">0.2</span>,<span class="number">0.6</span>,<span class="number">0.2</span>],[<span class="number">0.1</span>,<span class="number">0.6</span>,<span class="number">0.3</span>],[<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.1</span>]]</span><br></pre></td></tr></table></figure><p>别忘了，要保证概率之和是 1。另外在写代码时多打印一些错误信息没什么不好的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>(transitionMatrix[<span class="number">0</span>])+<span class="built_in">sum</span>(transitionMatrix[<span class="number">1</span>])+<span class="built_in">sum</span>(transitionMatrix[<span class="number">1</span>]) != <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Somewhere, something went wrong. Transition matrix, perhaps?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;All is gonna be okay, you should move on!! ;)&quot;</span>)</span><br><span class="line">All <span class="keyword">is</span> gonna be okay, you should move on!! ;)</span><br></pre></td></tr></table></figure><p>现在就要进入正题了。我们要用 <code>numpy.random.choice</code> 从可能的转移集合选出随机样本。代码中大部分参数的含义从参数名就能看出来，不过参数 <code>p</code> 可能比较费解。它是可选参数，可以传入样品集的概率分布，这里传入的是转移矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现了可以预测状态的马尔可夫模型的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity_forecast</span>(<span class="params">days</span>):</span></span><br><span class="line">    <span class="comment"># 选择初始状态</span></span><br><span class="line">    activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start state: &quot;</span> + activityToday)</span><br><span class="line">    <span class="comment"># 应该记录选择的状态序列。这里现在只有初始状态。</span></span><br><span class="line">    activityList = [activityToday]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 计算 activityList 的概率</span></span><br><span class="line">    prob = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i != days:</span><br><span class="line">        <span class="keyword">if</span> activityToday == <span class="string">&quot;Sleep&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">0</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;SS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;SR&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.6</span></span><br><span class="line">                activityToday = <span class="string">&quot;Run&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Icecream&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> activityToday == <span class="string">&quot;Run&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">1</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;RR&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.5</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;RS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.3</span></span><br><span class="line">                activityToday = <span class="string">&quot;Icecream&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> activityToday == <span class="string">&quot;Icecream&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">2</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;II&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.1</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;IS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.7</span></span><br><span class="line">                activityToday = <span class="string">&quot;Run&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Possible states: &quot;</span> + <span class="built_in">str</span>(activityList))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End state after &quot;</span>+ <span class="built_in">str</span>(days) + <span class="string">&quot; days: &quot;</span> + activityToday)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Probability of the possible sequence of states: &quot;</span> + <span class="built_in">str</span>(prob))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测 2 天后的可能状态</span></span><br><span class="line">activity_forecast(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Start state: Sleep</span><br><span class="line">Possible states: [<span class="string">&#x27;Sleep&#x27;</span>, <span class="string">&#x27;Sleep&#x27;</span>, <span class="string">&#x27;Run&#x27;</span>]</span><br><span class="line">End state after <span class="number">2</span> days: Run</span><br><span class="line">Probability of the possible sequence of states: <span class="number">0.12</span></span><br></pre></td></tr></table></figure><p>结果可以得到从睡觉状态开始的可能转移及其概率。进一步拓展这个函数，可以让它从睡觉状态开始，迭代上几百次，就能得到终止于特定状态的预期概率。下面改写一下 <code>activity_forecast</code> 函数，加一些循环……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity_forecast</span>(<span class="params">days</span>):</span></span><br><span class="line">    <span class="comment"># 选择初始状态</span></span><br><span class="line">    activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">    activityList = [activityToday]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    prob = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i != days:</span><br><span class="line">        <span class="keyword">if</span> activityToday == <span class="string">&quot;Sleep&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">0</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;SS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;SR&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.6</span></span><br><span class="line">                activityToday = <span class="string">&quot;Run&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Icecream&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> activityToday == <span class="string">&quot;Run&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">1</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;RR&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.5</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;RS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.3</span></span><br><span class="line">                activityToday = <span class="string">&quot;Icecream&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> activityToday == <span class="string">&quot;Icecream&quot;</span>:</span><br><span class="line">            change = np.random.choice(transitionName[<span class="number">2</span>],replace=<span class="literal">True</span>,p=transitionMatrix[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">if</span> change == <span class="string">&quot;II&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.1</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Icecream&quot;</span>)</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="string">&quot;IS&quot;</span>:</span><br><span class="line">                prob = prob * <span class="number">0.2</span></span><br><span class="line">                activityToday = <span class="string">&quot;Sleep&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Sleep&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prob = prob * <span class="number">0.7</span></span><br><span class="line">                activityToday = <span class="string">&quot;Run&quot;</span></span><br><span class="line">                activityList.append(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">return</span> activityList</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录每次的 activityList</span></span><br><span class="line">list_activity = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `range` 从第一个参数开始数起，一直到第二个参数（不包含）</span></span><br><span class="line"><span class="keyword">for</span> iterations <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        list_activity.append(activity_forecast(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看记录到的所有 `activityList`    </span></span><br><span class="line"><span class="comment">#print(list_activity)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历列表，得到所有最终状态是跑步的 activityList</span></span><br><span class="line"><span class="keyword">for</span> smaller_list <span class="keyword">in</span> list_activity:</span><br><span class="line">    <span class="keyword">if</span>(smaller_list[<span class="number">2</span>] == <span class="string">&quot;Run&quot;</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算从睡觉状态开始到跑步状态结束的概率</span></span><br><span class="line">percentage = (count/<span class="number">10000</span>) * <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The probability of starting at state:&#x27;Sleep&#x27; and ending at state:&#x27;Run&#x27;= &quot;</span> + <span class="built_in">str</span>(percentage) + <span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br><span class="line">The probability of starting at state:<span class="string">&#x27;Sleep&#x27;</span> <span class="keyword">and</span> ending at state:<span class="string">&#x27;Run&#x27;</span>= <span class="number">62.419999999999995</span>%</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么问题来了，计算得到的结果为何会趋于 62%？</p><p><strong>注意</strong> 这实际是「大数定律」在发挥作用。大数定律是概率论定律，用来说明在试验次数足够多时，可能性相同的事件发生的频率趋于一致。也就是说，随着试验次数的增加，实际比率会趋于理论或预测的概率。</p><h2 id="马尔可夫思维"><a href="#马尔可夫思维" class="headerlink" title="马尔可夫思维"></a>马尔可夫思维</h2><p>马尔可夫链教程就到此为止了。本文介绍了马尔可夫链及其性质。简单的马尔可夫链是开始学习 Python 数据科学的必经之路。</p>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markov链 </tag>
            
            <tag> 概率图模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✍️动手实现NeuralNetwork</title>
      <link href="/python-nn/"/>
      <url>/python-nn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个帮助初学者理解深度神经网络内部工作机制的指南</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/dpnn.jpg"></p><p><strong>写作动机：</strong> 为了使我自己可以更好地理解深度学习，我决定在没有像 TensorFlow 这样的深度学习库的情况下，从零开始构建一个神经网络。我相信，理解神经网络的内部工作原理对任何有追求的数据科学家来说都很重要。</p><p>这篇文章包含了我所学到的东西，希望对你们也有用。</p><h2 id="什么是神经网络？"><a href="#什么是神经网络？" class="headerlink" title="什么是神经网络？"></a>什么是神经网络？</h2><p>大多数介绍神经网络的文章在描述它们时都会与大脑做类比。在不深入研究与大脑类似之处的情况下，我发现将神经网络简单地描述为给定输入映射到期望输出的数学函数更容易理解一些。</p><p>神经网络由以下几个部分组成：</p><ul><li>一个<strong>输入层</strong>，x</li><li>任意数量的<strong>隐含层</strong></li><li>一个<strong>输出层</strong>，<strong>ŷ</strong></li><li>层与层之间的一组<strong>权重</strong>和<strong>偏差</strong>，<strong>W</strong> 和 <strong>b</strong></li><li>每个隐含层中所包含的一个可选的<strong>激活函数</strong>，<em><strong>σ</strong></em>。在本教程中，我们将使用 Sigmoid 激活函数。</li></ul><p>下图展示了 2 层神经网络的架构（<strong>注：在计算神经网络中的层数时，输入层通常被排除在外</strong>）</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp2.png"></p><p>2 层神经网络的架构</p><p>在 Python 中创建一个神经网络的类很简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.<span class="built_in">input</span>      = x</span><br><span class="line">        self.weights1   = np.random.rand(self.<span class="built_in">input</span>.shape[<span class="number">1</span>],<span class="number">4</span>) </span><br><span class="line">        self.weights2   = np.random.rand(<span class="number">4</span>,<span class="number">1</span>)                 </span><br><span class="line">        self.y          = y</span><br><span class="line">        self.output     = np.zeros(y.shape)</span><br></pre></td></tr></table></figure><p><strong>训练神经网络</strong></p><p>一个简单的 2 层神经网络的输出 *<strong>ŷ*</strong> 如下：</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp1.png" style="zoom:50%;" /><p>你可能注意到了，在上面的等式中，只有权重 *<strong>W*</strong> 和偏差 *<strong>b*</strong> 这两个变量会对输出 *<strong>ŷ*</strong> 产生影响。</p><p>当然，合理的权重和偏差会决定预测的准确程度。将针对输入数据的权重和偏差进行微调的过程就是<strong>训练神经网络</strong>的过程。</p><p>训练过程的每次迭代包括以下步骤：</p><ul><li>计算预测输出的值 *<strong>ŷ*<strong>，即</strong>前馈</strong></li><li>更新权重和偏差，即<strong>反向传播</strong></li></ul><p>下面的序列图展示了这个过程。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp3.png" style="zoom:50%;" /><h3 id="前馈过程"><a href="#前馈过程" class="headerlink" title="前馈过程"></a>前馈过程</h3><p>正如我们在上面的序列图中看到的，前馈只是一个简单的计算过程，对于一个基本的 2 层神经网络，它的输出是：</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp4.png" style="zoom:50%;" /><p>让我们在 Python 代码中添加一个前馈函数来实现这一点。注意，为了简单起见，我们假设偏差为 0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.<span class="built_in">input</span>      = x</span><br><span class="line">        self.weights1   = np.random.rand(self.<span class="built_in">input</span>.shape[<span class="number">1</span>],<span class="number">4</span>) </span><br><span class="line">        self.weights2   = np.random.rand(<span class="number">4</span>,<span class="number">1</span>)                 </span><br><span class="line">        self.y          = y</span><br><span class="line">        self.output     = np.zeros(self.y.shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedforward</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.layer1 = sigmoid(np.dot(self.<span class="built_in">input</span>, self.weights1))</span><br><span class="line">        self.output = sigmoid(np.dot(self.layer1, self.weights2))</span><br></pre></td></tr></table></figure><p>但是，我们仍然需要一种方法来评估预测的“精准程度”（即我们的预测有多好）？而<strong>损失函数</strong>能让我们做到这一点。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>可用的损失函数有很多，而我们对损失函数的选择应该由问题本身的性质决定。在本教程中，我们将使用简单的<strong>平方和误差</strong>作为我们的损失函数。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp5.png" style="zoom:50%;" /><p>这就是说，平方和误差只是每个预测值与实际值之差的总和。我们将差值平方后再计算，以便我们评估误差的绝对值。</p><p><strong>训练的目标是找到能使损失函数最小化的一组最优的权值和偏差。</strong></p><h3 id="反向传播过程"><a href="#反向传播过程" class="headerlink" title="反向传播过程"></a>反向传播过程</h3><p>现在我们已经得出了预测的误差（损失），我们还需要找到一种方法将误差<strong>传播</strong>回来，并更新我们的权重和偏差。</p><p>为了得出调整权重和偏差的合适的量，我们需要计算<strong>损失函数对于权重和偏差的导数</strong>。</p><p>回忆一下微积分的知识，计算函数的导数就是计算函数的斜率。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp2122e3.png" style="zoom:50%;" /><p>梯度下降算法</p><p>如果我们已经算出了导数，我们就可以简单地通过增大/减小导数来更新权重和偏差（参见上图）。这就是所谓的<strong>梯度下降</strong>。</p><p>然而，我们无法直接计算损失函数对于权重和偏差的导数，因为损失函数的等式中不包含权重和偏差。 因此，我们需要<strong>链式法则</strong>来帮助我们进行计算。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp223232.png" style="zoom:50%;" /><p>为了更新权重使用链式法则求解函数的导数。注意，为了简单起见，我们只展示了假设为 1 层的神经网络的偏导数。</p><p>哦！这真难看，但它让我们得到了我们需要的东西 —— 损失函数对于权重的导数（斜率），这样我们就可以相应地调整权重。</p><p>现在我们知道要怎么做了，让我们向 Pyhton 代码中添加反向传播函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.<span class="built_in">input</span>      = x</span><br><span class="line">        self.weights1   = np.random.rand(self.<span class="built_in">input</span>.shape[<span class="number">1</span>],<span class="number">4</span>) </span><br><span class="line">        self.weights2   = np.random.rand(<span class="number">4</span>,<span class="number">1</span>)                 </span><br><span class="line">        self.y          = y</span><br><span class="line">        self.output     = np.zeros(self.y.shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedforward</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.layer1 = sigmoid(np.dot(self.<span class="built_in">input</span>, self.weights1))</span><br><span class="line">        self.output = sigmoid(np.dot(self.layer1, self.weights2))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backprop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 应用链式法则求出损失函数对于 weights2 和 weights1 的导数</span></span><br><span class="line">        d_weights2 = np.dot(self.layer1.T, (<span class="number">2</span>*(self.y - self.output) * sigmoid_derivative(self.output)))</span><br><span class="line">        d_weights1 = np.dot(self.<span class="built_in">input</span>.T,  (np.dot(<span class="number">2</span>*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用损失函数的导数(斜率)更新权重</span></span><br><span class="line">        self.weights1 += d_weights1</span><br><span class="line">        self.weights2 += d_weights2</span><br></pre></td></tr></table></figure><p>如果你需要更深入地理解微积分和链式法则在反向传播中的应用，我强烈推荐 3Blue1Brown 的教程。</p><h2 id="融会贯通"><a href="#融会贯通" class="headerlink" title="融会贯通"></a>融会贯通</h2><p>现在我们已经有了前馈和反向传播的完整 Python 代码，让我们将神经网络应用到一个示例中，看看效果如何。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp232323232323.png" style="zoom:50%;" /><p>我们的神经网络应该通过学习得出一组理想的权重来表示这个函数。请注意，仅仅是求解权重的过程对我们来说也并不简单。</p><p>让我们对神经网络进行 1500 次训练迭代，看看会发生什么。观察下图中每次迭代的损失变化，我们可以清楚地看到损失<strong>单调递减至最小值</strong>。这与我们前面讨论的梯度下降算法是一致的。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nnp2sdsd.png" style="zoom:50%;" /><p>让我们看一下经过 1500 次迭代后神经网络的最终预测（输出）。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/sdsdads22.png" alt="" style="zoom:50%;" /><p>1500 次训练迭代后的预测结果</p><p>我们成功了！我们的前馈和反向传播算法成功地训练了神经网络，预测结果收敛于真实值。</p><p>请注意，预测值和实际值之间会存在细微的偏差。我们需要这种偏差，因为它可以防止<strong>过拟合</strong>，并允许神经网络更好地<strong>推广</strong>至不可见数据中。</p><h2 id="后续的学习任务"><a href="#后续的学习任务" class="headerlink" title="后续的学习任务"></a>后续的学习任务</h2><p>幸运的是，我们的学习旅程还未结束。关于神经网络和深度学习，我们还有<strong>很多</strong>内容需要学习。例如：</p><ul><li>除了 Sigmoid 函数，我们还可以使用哪些<strong>激活函数</strong>？</li><li>在训练神经网络时使用<strong>学习率</strong></li><li>使用<strong>卷积</strong>进行图像分类任务</li></ul><p>我将会就这些主题编写更多内容，请在 Medium 上关注我并留意更新！</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>当然，我也在从零开始编写我自己的神经网络的过程中学到了很多。</p><p>虽然像 TensorFlow 和 Keras 这样的深度学习库使得构建深度神经网络变得很简单，即使你不完全理解神经网络内部工作原理也没关系，但是我发现对于有追求的数据科学家来说，深入理解神经网络是很有好处的。</p><p>这个练习花费了我大量的时间，我希望它对你们也有帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习探索之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook详细教程📖</title>
      <link href="/jupyter-list/"/>
      <url>/jupyter-list/</url>
      
        <content type="html"><![CDATA[<div align="center"><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jppt.jpg"></p><h1 id="Jupyter-Notebook详细教程"><a href="#Jupyter-Notebook详细教程" class="headerlink" title="Jupyter Notebook详细教程"></a>Jupyter Notebook详细教程</h1><blockquote><p>Jupyter Notebook 是一个非常强大的工具</p><p>常用于交互式地开发和展示数据科学项目</p><p>它将代码和它的输出集成到一个文档中</p><p>并且结合了可视的叙述性文本、数学方程和其他丰富的媒体</p><p>它直观的工作流促进了迭代和快速的开发</p><p>使得 notebook </p><p>在当代数据科学、分析和越来越多的科学研究中越来越受欢迎。</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/monkey.jpg"></p><blockquote><p><code>Jupyter Notebook</code>是一个非常强大的工具</p><p>我将用两篇文章来介绍它</p></blockquote><hr><h2 id="Jupyter-Notebook详细教程-👀上"><a href="#Jupyter-Notebook详细教程-👀上" class="headerlink" title="Jupyter Notebook详细教程 👀上"></a><a href="https://liuxunzhuo.tech/jupyter1.html">Jupyter Notebook详细教程 👀上</a></h2><hr><h2 id="Jupyter-Notebook详细教程-👀下"><a href="#Jupyter-Notebook详细教程-👀下" class="headerlink" title="Jupyter Notebook详细教程 👀下"></a><a href="https://liuxunzhuo.tech/jupyter2.html">Jupyter Notebook详细教程 👀下</a></h2><hr></div>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用神经网络预测股票趋势？</title>
      <link href="/tensor-stock/"/>
      <url>/tensor-stock/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stock1.jpg"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>疫情期间，我爸妈又开始炒股了，鉴于之前做过一个AI结合的量化交易项目，但是不是负责算法部分，所以想自己尝试一下，实现一个算法引擎。</p><p>纯数据科学只能做参考，最好结合传统量化交易和舆情分析，我后面有时间会尝试三者结合，希望有更好效果。</p><hr><p>在本教程中，你将了解到如何使用被称作长短期记忆网络（LSTM）的时间序列模型。LSTM 模型在保持长期记忆方面非常强大。阅读这篇教程时，你将：</p><ul><li>明白预测股市走势的动机；</li><li>下载股票数据 — 你将使用由 Alpha Vantage 或 Kaggle 收集的股票数据；</li><li>将数据划分为训练集和测试集，并将其标准化；</li><li>简要讨论一下为什么 LSTM 模型可以预测未来多步的情形；</li><li>使用现有数据预测股票趋势，并将结果可视化。</li></ul><p><strong>注意：请不要认为 LSTM 是一种可以完美预测股票趋势的可靠模型，也不要盲目使用它进行股票交易</strong>。我只是出于对机器学习的兴趣做了这个实验。在大部分情况下，这个模型的确能发现数据中的特定规律并准确预测股票的走势。但是否将其用于实际的股票市场取决于你自己。</p><h3 id="为什么要用时间序列模型？"><a href="#为什么要用时间序列模型？" class="headerlink" title="为什么要用时间序列模型？"></a>为什么要用时间序列模型？</h3><p>作为一名股民，如果你能对股票价格进行正确的建模，你就可以通过在合适的时机买入或卖出来获取利益。因此，你需要能通过一组历史数据来预测未来数据的模型——时间序列模型。</p><p><strong>警告</strong>：股价本身因受到诸多因素影响而难以预测，这意味着你难以找到一种能完美预测股价的模型。并不只有我一人如此认为。普林斯顿大学的经济学教授 Burton Malkiel 在他 1973 年出版的《A Random Walk Down Wall Street》一书中写道：“如果股市足够高效，以至于人们能从公开的股价中知晓影响它的全部因素，那么人人都能像投资专业人士那样炒股”。</p><p>但是，请保持信心，用机器学习的方法来预测这完全随机的股价仍有一丝希望。我们至少能通过建模来预测这组数据的实际走势。换而言之，不必知晓股价的确切值，你只要能预测股价要涨还是要跌就万事大吉了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请确保你安装了这些包，并且能运行成功以下代码</span></span><br><span class="line"><span class="keyword">from</span> pandas_datareader <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> urllib.request, json </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf <span class="comment"># TensorFlow 1.6 版本下测试通过</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br></pre></td></tr></table></figure><h3 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h3><p>你可以从以下来源下载数据：</p><ol><li>Alpha Vantage。首先，你必须从 <a href="https://www.alphavantage.co/support/#api-key">这个网站</a> 获取所需的 API key。在此之后，将它的值赋给变量 <code>api_key</code>。</li><li>从 <a href="https://www.kaggle.com/borismarjanovic/price-volume-data-for-all-us-stocks-etfs">这个页面</a> 下载并将其中的 <em>Stocks</em> 文件夹拷贝到你的工程目录下。</li></ol><p>股价中包含几种不同的数据，它们是：</p><ul><li>开盘价：一天中股票刚开盘时的价格；</li><li>收盘价：一天中股票收盘时的价格；</li><li>最高价：一天中股价的最大值；</li><li>最低价：一天中股价的最小值。</li></ul><h3 id="从-Alpha-Vantage-获取数据"><a href="#从-Alpha-Vantage-获取数据" class="headerlink" title="从 Alpha Vantage 获取数据"></a>从 Alpha Vantage 获取数据</h3><p>为了从 Alpha Vantage 上下载美国航空公司的股价数据用于分析，你要将行情显示代号 <code>ticker</code> 设置为 <code>&quot;AAL&quot;</code>。同时，你也要定义一个 <code>url_string</code> 变量来获取包含最近 20 年内的全部股价信息的 JSON 文件，以及文件保存路径 <code>file_to_save</code>。别忘了用你的 <code>ticker</code> 变量来帮助你命名你下载下来的文件。</p><p>接下来，设定一个条件：如果本地没有保存的数据文件，就从 <code>url_string</code> 指明的 URL 下载数据，并将其中的日期、最低价、最高价、交易量、开盘价和收盘价存入 Pandas 的 DataFrame <code>df</code> 中，再将其保存到 <code>file_to_save</code>；否则直接从本地读取 csv 文件就好了。</p><h3 id="从-Kaggle-获取数据"><a href="#从-Kaggle-获取数据" class="headerlink" title="从 Kaggle 获取数据"></a>从 Kaggle 获取数据</h3><p>从 Kaggle 上找到的数据是一系列 csv 表格，你不需要对它进行任何处理就可以直接读入 Pandas 的 DataFrame 中。确保你正确地将 <em>Stocks</em> 文件夹放在项目的主目录中。</p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>现在，将这些数据打印到 DataFrame 中吧！由于数据的顺序在时间序列模型中至关重要，所以请确保你的数据已经按照日期排好序了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按日期排序</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查结果</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>看看你的数据，并从中找到伴随时间推移而具有的不同规律。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">18</span>,<span class="number">9</span>))</span><br><span class="line">plt.plot(<span class="built_in">range</span>(df.shape[<span class="number">0</span>]),(df[<span class="string">&#x27;Low&#x27;</span>]+df[<span class="string">&#x27;High&#x27;</span>])/<span class="number">2.0</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>,df.shape[<span class="number">0</span>],<span class="number">500</span>),df[<span class="string">&#x27;Date&#x27;</span>].loc[::<span class="number">500</span>],rotation=<span class="number">45</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Date&#x27;</span>,fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Mid Price&#x27;</span>,fontsize=<span class="number">18</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stock11.png" alt="" style="zoom:50%;" /><p>这幅图包含了很多信息。我特意选取了这家公司的股价图，因为它包含了股价的多种不同规律。这将使你的模型更健壮，也让它能更好地预测不同情形下的股价。</p><p>另一件值得注意的事情是 2017 年的股价远比上世纪七十年代的股价高且波动更大。因此，你要在<strong>数据标准化</strong>的过程中，注意让这些部分的数据落在相近的数值区间内。</p><h3 id="将数据划分为训练集和测试集"><a href="#将数据划分为训练集和测试集" class="headerlink" title="将数据划分为训练集和测试集"></a>将数据划分为训练集和测试集</h3><p>首先通过对每一天的最高和最低价的平均值来算出 <code>mid_prices</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先用最高和最低价来算出中间价</span></span><br><span class="line">high_prices = df.loc[:,<span class="string">&#x27;High&#x27;</span>].as_matrix()</span><br><span class="line">low_prices = df.loc[:,<span class="string">&#x27;Low&#x27;</span>].as_matrix()</span><br><span class="line">mid_prices = (high_prices+low_prices)/<span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>然后你就可以划分数据集了。前 11000 个数据属于训练集，剩下的都属于测试集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data = mid_prices[:<span class="number">11000</span>] </span><br><span class="line">test_data = mid_prices[<span class="number">11000</span>:]</span><br></pre></td></tr></table></figure><p>接下来我们需要一个换算器 <code>scaler</code> 用于标准化数据。<code>MinMaxScalar</code> 会将所有数据换算到 0 和 1 之间。同时，你也可以将两个数据集都调整为 <code>[data_size, num_features]</code> 的大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有数据缩放到 0 和 1 之间</span></span><br><span class="line"><span class="comment"># 在缩放时请注意，缩放测试集数据时请使用缩放训练集数据的参数</span></span><br><span class="line"><span class="comment"># 因为在测试前你是不应当知道测试集数据的</span></span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">train_data = train_data.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">test_data = test_data.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>上面我们注意到不同年代的股价处于不同的价位，如果不做特殊处理的话，在标准化后的数据中，上世纪的股价数据将非常接近于 0。这对模型的学习过程没啥好处。所以我们将整个时间序列划分为若干个区间，并在每一个区间上做标准化。这里每一个区间的长度取值为 2500。</p><p><strong>提示</strong>：因为每一个区间都被独立地初始化，所以在两个区间的交界处会引入一个“突变”。为了避免这个“突变”给我们的模型带来大麻烦，这里的每一个区间长度不要太小。</p><p>本例中会引入 4 个“突变”，鉴于数据有 11000 组，所以它们无关紧要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用训练集来训练换算器 scaler，并且调整数据使之更平滑</span></span><br><span class="line">smoothing_window_size = <span class="number">2500</span></span><br><span class="line"><span class="keyword">for</span> di <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10000</span>,smoothing_window_size):</span><br><span class="line">    scaler.fit(train_data[di:di+smoothing_window_size,:])</span><br><span class="line">    train_data[di:di+smoothing_window_size,:] = scaler.transform(train_data[di:di+smoothing_window_size,:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化所有的数据</span></span><br><span class="line">scaler.fit(train_data[di+smoothing_window_size:,:])</span><br><span class="line">train_data[di+smoothing_window_size:,:] = scaler.transform(train_data[di+smoothing_window_size:,:])</span><br></pre></td></tr></table></figure><p>将数据矩阵调整回 <code>[data_size]</code> 的形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新调整测试集和训练集</span></span><br><span class="line">train_data = train_data.reshape(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将测试集标准化</span></span><br><span class="line">test_data = scaler.transform(test_data).reshape(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>为了产生一条更平滑的曲线，我们使用一种叫做指数加权平均的算法。</p><p><strong>注意</strong>：我们只使用训练集来训练换算器 <code>scaler</code>，否则在标准化测试集时将得到不准确的结果。</p><p><strong>注意</strong>：只允许对训练集做平滑处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用指数加权平均</span></span><br><span class="line"><span class="comment"># 现在数据将比之间更为平滑</span></span><br><span class="line">EMA = <span class="number">0.0</span></span><br><span class="line">gamma = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">for</span> ti <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11000</span>):</span><br><span class="line">  EMA = gamma*train_data[ti] + (<span class="number">1</span>-gamma)*EMA</span><br><span class="line">  train_data[ti] = EMA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于可视化和调试</span></span><br><span class="line">all_mid_data = np.concatenate([train_data,test_data],axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="评估结果"><a href="#评估结果" class="headerlink" title="评估结果"></a>评估结果</h3><p>为了评估训练出来的模型，我们将计算其预测值与真实值的均方误差（MSE）。将每一个预测值与真实值误差的平方取均值，即为这个模型的均方误差。</p><h3 id="股价建模中的平均值"><a href="#股价建模中的平均值" class="headerlink" title="股价建模中的平均值"></a>股价建模中的平均值</h3><blockquote><p>取平均值在预测单步上效果不错，但对股市预测这种需要预测许多步的情形不适用。</p></blockquote><h3 id="使用-LSTM-预测未来股价走势"><a href="#使用-LSTM-预测未来股价走势" class="headerlink" title="使用 LSTM 预测未来股价走势"></a>使用 LSTM 预测未来股价走势</h3><p>长短期记忆网络模型是非常强大的基于时间序列的模型，它们能向后预测任意步。一个 LSTM 模块（或者一个 LSTM 单元）使用 5 个重要的参数来对长期和短期数据建模。</p><ul><li>单元状态（$c_{t}$）- 这代表了单元存储的短期和长期记忆；</li><li>隐藏状态（$h_{t}$）- 这是根据当前输入、以前的隐藏状态和当前单元输入计算的用于预测未来股价的输出状态信息 。此外，隐藏状态还决定着是否只使用单元状态中的记忆（短期、长期或两者都使用）来进行下一次预测；</li><li>输入门（$i_{t}$）- 从输入门流入到单元状态中的信息；</li><li>遗忘门（$f_{t}$）- 从当前输入和前一个单元状态流到当前单元状态的信息；</li><li>输出门（$o_{t}$）- 从当前单元状态流到隐藏状态的信息，这决定了 LSTM 接下来使用的记忆类型。</li></ul><p>下图展示了一个 LSTM 单元。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stock111.png" alt="" style="zoom:50%;" /><p>其中计算的算式如下：</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stock11111.png" alt="" style="zoom:50%;" /><h3 id="数据生成器"><a href="#数据生成器" class="headerlink" title="数据生成器"></a>数据生成器</h3><p>最简单的想法是将总量为 N 的数据集，平均分割成 N/b 个序列，每个序列包含 b 个数据点。然后我们假想若干个指针，它们指向每一个序列的第一个元素。然后我们就可以开始采样生成数据了。我们将当前段的指针指向的元素下标当作输入，并在其后面的 1~5 个元素中随机挑选一个作为正确的预测值，因为模型并不总是只预测紧靠当前时间点的后一个数据。这样可以有效避免过拟合。每一次取样之后，我们将指针的下标加一，并开始生成下一个数据点。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stock1123.png" alt="" style="zoom:50%;" /><h3 id="定义超参数"><a href="#定义超参数" class="headerlink" title="定义超参数"></a>定义超参数</h3><p>在本节中，我们将定义若干个超参数。<code>D</code> 是输入的维数。因为你使用前一天的股价来预测后面的股价，所以 <code>D</code> 应当是 <code>1</code>。</p><p><code>num_unrollings</code> 表示单个步骤中考虑的连续时间点个数，越大越好。</p><p>然后是 <code>batch_size</code>。它是在单个时间点中考虑的数据样本数量。它越大越好，因为选取的样本数量越大，模型可以参考的数据也就更多。</p><p>最后是 <code>num_nodes</code> 决定了每个单元中包含了多少隐藏神经元。在本例中，网络中包含三层 LSTM。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D = <span class="number">1</span> <span class="comment"># 数据的维度</span></span><br><span class="line">num_unrollings = <span class="number">50</span> <span class="comment"># 你想预测多远的结果</span></span><br><span class="line">batch_size = <span class="number">500</span> <span class="comment"># 一次批处理中包含的数据个数</span></span><br><span class="line">num_nodes = [<span class="number">200</span>,<span class="number">200</span>,<span class="number">150</span>] <span class="comment"># 使用的深层 LSTM 网络的每一层中的隐藏节点数</span></span><br><span class="line">n_layers = <span class="built_in">len</span>(num_nodes) <span class="comment"># 层数</span></span><br><span class="line">dropout = <span class="number">0.2</span> <span class="comment"># dropout 概率</span></span><br><span class="line"></span><br><span class="line">tf.reset_default_graph() <span class="comment"># 如果你想要多次运行，这个语句至关重要</span></span><br></pre></td></tr></table></figure><h3 id="定义输入和输出"><a href="#定义输入和输出" class="headerlink" title="定义输入和输出"></a>定义输入和输出</h3><p>接下来定义用于输入训练数据和标签的 placeholder。因为每个 placeholder 中只包含一批一维数据，所以这并不难。对于每一个优化步骤，我们需要 <code>num_unrollings</code> 个 placeholder。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line">train_inputs, train_outputs = [],[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据时间顺序展开输入，为每个时间点定义一个 placeholder</span></span><br><span class="line"><span class="keyword">for</span> ui <span class="keyword">in</span> <span class="built_in">range</span>(num_unrollings):</span><br><span class="line">    train_inputs.append(tf.placeholder(tf.float32, shape=[batch_size,D],name=<span class="string">&#x27;train_inputs_%d&#x27;</span>%ui))</span><br><span class="line">    train_outputs.append(tf.placeholder(tf.float32, shape=[batch_size,<span class="number">1</span>], name = <span class="string">&#x27;train_outputs_%d&#x27;</span>%ui))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定义-LSTM-和回归层的参数"><a href="#定义-LSTM-和回归层的参数" class="headerlink" title="定义 LSTM 和回归层的参数"></a>定义 LSTM 和回归层的参数</h3><p>您将有一个包含三层 LSTM 和一层线性回归层的神经网络，分别用 <code>w</code> 和 <code>b</code> 表示，它获取上一个长短期记忆单元的输出，并输出对下一个时间的预测。你可以使用 TensorFlow 中的 <code>MultiRNNCell</code> 来封装您创建的三个 <code>LSTMCell</code> 对象。此外，LSTM 单元上还可以加上 dropout 来提高性能并减少过拟合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stm_cells = [</span><br><span class="line">    tf.contrib.rnn.LSTMCell(num_units=num_nodes[li],</span><br><span class="line">                            state_is_tuple=<span class="literal">True</span>,</span><br><span class="line">                            initializer= tf.contrib.layers.xavier_initializer()</span><br><span class="line">                           )</span><br><span class="line"> <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]</span><br><span class="line"></span><br><span class="line">drop_lstm_cells = [tf.contrib.rnn.DropoutWrapper(</span><br><span class="line">    lstm, input_keep_prob=<span class="number">1.0</span>,output_keep_prob=<span class="number">1.0</span>-dropout, state_keep_prob=<span class="number">1.0</span>-dropout</span><br><span class="line">) <span class="keyword">for</span> lstm <span class="keyword">in</span> lstm_cells]</span><br><span class="line">drop_multi_cell = tf.contrib.rnn.MultiRNNCell(drop_lstm_cells)</span><br><span class="line">multi_cell = tf.contrib.rnn.MultiRNNCell(lstm_cells)</span><br><span class="line"></span><br><span class="line">w = tf.get_variable(<span class="string">&#x27;w&#x27;</span>,shape=[num_nodes[-<span class="number">1</span>], <span class="number">1</span>], initializer=tf.contrib.layers.xavier_initializer())</span><br><span class="line">b = tf.get_variable(<span class="string">&#x27;b&#x27;</span>,initializer=tf.random_uniform([<span class="number">1</span>],-<span class="number">0.1</span>,<span class="number">0.1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="计算-LSTM-输出并将结果代入回归层进行预测"><a href="#计算-LSTM-输出并将结果代入回归层进行预测" class="headerlink" title="计算 LSTM 输出并将结果代入回归层进行预测"></a>计算 LSTM 输出并将结果代入回归层进行预测</h3><p>在本节中，首先创建 TensorFlow 张量 <code>c</code> 和 <code>h</code> 用来保存 LSTM 单元的单元状态和隐藏状态。然后将 <code>train_input</code> 转换为 <code>[num_unrollings, batch_size, D]</code> 的形状，这是计算 <code>tf.nn.dynamic_rnn</code> 函数的输出所必需的。然后用 <code>tf.nn.dynamic_rnn</code> 计算 LSTM 输出，并将输出转化为一系列 <code>num_unrolling</code> 张量来预测和真实股价之间的损失函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 LSTM 的单元状态 c 和隐藏状态 h</span></span><br><span class="line">c, h = [],[]</span><br><span class="line">initial_state = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers):</span><br><span class="line">  c.append(tf.Variable(tf.zeros([batch_size, num_nodes[li]]), trainable=<span class="literal">False</span>))</span><br><span class="line">  h.append(tf.Variable(tf.zeros([batch_size, num_nodes[li]]), trainable=<span class="literal">False</span>))</span><br><span class="line">  initial_state.append(tf.contrib.rnn.LSTMStateTuple(c[li], h[li]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 dynamic_rnn 函数需要特定的输出格式，所以我们对张量进行一些变换</span></span><br><span class="line"><span class="comment"># 请访问 https://www.tensorflow.org/api_docs/python/tf/nn/dynamic_rnn 来了解更多</span></span><br><span class="line">all_inputs = tf.concat([tf.expand_dims(t,<span class="number">0</span>) <span class="keyword">for</span> t <span class="keyword">in</span> train_inputs],axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># all_outputs 张量的尺寸是 [seq_length, batch_size, num_nodes]</span></span><br><span class="line">all_lstm_outputs, state = tf.nn.dynamic_rnn(</span><br><span class="line">    drop_multi_cell, all_inputs, initial_state=<span class="built_in">tuple</span>(initial_state),</span><br><span class="line">    time_major = <span class="literal">True</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">all_lstm_outputs = tf.reshape(all_lstm_outputs, [batch_size*num_unrollings,num_nodes[-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">all_outputs = tf.nn.xw_plus_b(all_lstm_outputs,w,b)</span><br><span class="line"></span><br><span class="line">split_outputs = tf.split(all_outputs,num_unrollings,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="损失函数的计算与优化"><a href="#损失函数的计算与优化" class="headerlink" title="损失函数的计算与优化"></a>损失函数的计算与优化</h3><p>然后计算损失函数。但是在计算它时有一个值得注意的点。对于每批预测和真实输出，计算均方误差。然后将这些均方损失加起来（而非平均值）。最后，定义用于优化神经网络的优化器。我推荐使用 Adam 这种最新的、性能良好的优化器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在计算损失函数时，你需要注意准确的计算方法</span></span><br><span class="line"><span class="comment"># 因为你要同时计算所有展开步骤的损失函数</span></span><br><span class="line"><span class="comment"># 因此，在展开时取每批数据的平均误差，并将它们相加得到最终损失函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Defining training Loss&#x27;</span>)</span><br><span class="line">loss = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">with</span> tf.control_dependencies([tf.assign(c[li], state[li][<span class="number">0</span>]) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]+</span><br><span class="line">                             [tf.assign(h[li], state[li][<span class="number">1</span>]) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]):</span><br><span class="line">  <span class="keyword">for</span> ui <span class="keyword">in</span> <span class="built_in">range</span>(num_unrollings):</span><br><span class="line">    loss += tf.reduce_mean(<span class="number">0.5</span>*(split_outputs[ui]-train_outputs[ui])**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Learning rate decay operations&#x27;</span>)</span><br><span class="line">global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)</span><br><span class="line">inc_gstep = tf.assign(global_step,global_step + <span class="number">1</span>)</span><br><span class="line">tf_learning_rate = tf.placeholder(shape=<span class="literal">None</span>,dtype=tf.float32)</span><br><span class="line">tf_min_learning_rate = tf.placeholder(shape=<span class="literal">None</span>,dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">learning_rate = tf.maximum(</span><br><span class="line">    tf.train.exponential_decay(tf_learning_rate, global_step, decay_steps=<span class="number">1</span>, decay_rate=<span class="number">0.5</span>, staircase=<span class="literal">True</span>),</span><br><span class="line">    tf_min_learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;TF Optimization operations&#x27;</span>)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate)</span><br><span class="line">gradients, v = <span class="built_in">zip</span>(*optimizer.compute_gradients(loss))</span><br><span class="line">gradients, _ = tf.clip_by_global_norm(gradients, <span class="number">5.0</span>)</span><br><span class="line">optimizer = optimizer.apply_gradients(</span><br><span class="line">    <span class="built_in">zip</span>(gradients, v))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\tAll done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里定义与预测相关的 TensorFlow 操作。首先，定义用于输入的占位符（<code>sample_input</code>）。然后像训练阶段那样，定义用于预测的状态变量（<code>sample_c</code> 和 <code>sample_h</code>）。再然后用 <code>tf.nn.dynamic_rnn</code> 函数计算预测值。最后通过线性回归层（<code>w</code> 和 <code>b</code>）发送输出。您还应该定义 <code>reset_sample_state</code> 操作用于重置单元格状态和隐藏状态。每次进行一系列预测时，都应该在开始时执行此操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Defining prediction related TF functions&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sample_inputs = tf.placeholder(tf.float32, shape=[<span class="number">1</span>,D])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在预测阶段更新 LSTM 状态</span></span><br><span class="line">sample_c, sample_h, initial_sample_state = [],[],[]</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers):</span><br><span class="line">  sample_c.append(tf.Variable(tf.zeros([<span class="number">1</span>, num_nodes[li]]), trainable=<span class="literal">False</span>))</span><br><span class="line">  sample_h.append(tf.Variable(tf.zeros([<span class="number">1</span>, num_nodes[li]]), trainable=<span class="literal">False</span>))</span><br><span class="line">  initial_sample_state.append(tf.contrib.rnn.LSTMStateTuple(sample_c[li],sample_h[li]))</span><br><span class="line"></span><br><span class="line">reset_sample_states = tf.group(*[tf.assign(sample_c[li],tf.zeros([<span class="number">1</span>, num_nodes[li]])) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)],</span><br><span class="line">                               *[tf.assign(sample_h[li],tf.zeros([<span class="number">1</span>, num_nodes[li]])) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)])</span><br><span class="line"></span><br><span class="line">sample_outputs, sample_state = tf.nn.dynamic_rnn(multi_cell, tf.expand_dims(sample_inputs,<span class="number">0</span>),</span><br><span class="line">                                   initial_state=<span class="built_in">tuple</span>(initial_sample_state),</span><br><span class="line">                                   time_major = <span class="literal">True</span>,</span><br><span class="line">                                   dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.control_dependencies([tf.assign(sample_c[li],sample_state[li][<span class="number">0</span>]) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]+</span><br><span class="line">                              [tf.assign(sample_h[li],sample_state[li][<span class="number">1</span>]) <span class="keyword">for</span> li <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]):  </span><br><span class="line">  sample_prediction = tf.nn.xw_plus_b(tf.reshape(sample_outputs,[<span class="number">1</span>,-<span class="number">1</span>]), w, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\tAll done&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="运行-LSTM"><a href="#运行-LSTM" class="headerlink" title="运行 LSTM"></a>运行 LSTM</h3><p>在这里，你将训练并预测股票价格在接下来一段时间内的变动趋势，并观察预测是否正确。按照以下步骤操作我的 Jupyter Notebook（我制作好后会发布在GitHub上）。</p><blockquote><p>★ 在时间序列上定义一系列起始点 <code>test_points_seq</code> 用于评估你的模型</p><p>★ 对于每一个时间点</p><p>★★ 对于全部的训练数据</p><p>★★★ 将 <code>num_unrollings</code> 展开</p><p>★★★ 使用展开的数据训练神经网络</p><p>★★ 计算训练的平均损失函数</p><p>★★ 对于测试集中的每一个起始点</p><p>★★★ 通过迭代测试点之前找到的 <code>num_unrollings</code> 中的数据点来更新 LSTM 状态</p><p>★★★ 连续预测接下来的 <code>n_predict_once</code> 步，然后将前一次的预测作为本次的输入</p><p>★★★ 计算预测值和真实股价之间的均方误差</p></blockquote><h3 id="将预测结果可视化"><a href="#将预测结果可视化" class="headerlink" title="将预测结果可视化"></a>将预测结果可视化</h3><p>你可以发现，模型的均方误差在显著地下降，这意味着模型确实学习到了有用的信息。你可以通过比较神经网络产生的均方误差以及对股价取标准平均的均方误差（0.004）来量化你的成果。显然，LSTM 优于标准平均，同时你也能明白股价的标准平均能较好地反映股价地变化。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stocks231.png" alt="" style="zoom:50%;" /><p>尽管并不完美，LSTM 在大部分情况下都能正确预测接下来的股价。而且你只能预测到股票接下来是涨是跌，而非股价的确切值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>但愿本教程能帮到你，写这篇教程也让我受益匪浅。在本教程中，我了解到建立能够正确预测股价走势的模型是非常困难的。首先我们探讨了预测股价的动机。接下来我们了解到如何去下载并处理数据。然后我们介绍了两种可以向后预测一步的平均技术，这两种方法在预测多步时并不管用。之后，我们讨论了如何使用 LSTM 对未来的多步进行预测。最后，结果可视化，并发现这个模型（尽管并不完美）能出色地预测股价走势。</p><p>下面是本教程中对几个要点：</p><ol><li>股票价格/走势预测是一项极其困难的任务。就我个人而言，我认为任何股票预测模型都不完全正确，因此它们不应该被盲目地依赖。模型并不总是正确的。</li><li>不要相信那些声称预测曲线与真实股价完全重合的文章。那些取平均的方法在实践中并不管用。更明智的做法是预测股价走势。</li><li>模型的超参数会显著影响训练结果。所以最好使用一些诸如 Grid search 和 Random search 的调参技巧，下面是一系列非常重要的超参数：<strong>优化器的学习速率、网络层数、每层中的隐藏节点个数、优化器（Adam 是最好用的）以及模型的种类（GRU / LSTM / 增加 peephole connection 的 LSTM）</strong>。</li><li>在本教程中，由于数据集太小，我们根据测试损失函数来降低学习速率，这本身是不对的，因为这间接地将有关测试集的信息泄露到训练过程中。一种更好的处理方法是使用一个独立的验证集（与测试集不同），并根据验证集的性能降低学习速率。</li></ol><img src="https://picreso.oss-cn-beijing.aliyuncs.com/stocks.jpg" alt="" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 深度学习探索之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 预测股票 </tag>
            
            <tag> 深度学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣味AI：用循环神经网络创造音乐🎵</title>
      <link href="/lstm-music/"/>
      <url>/lstm-music/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>神经网络正在被使用去提升我们生活的方方面面，同时也在往创造力方面不断提升。</code></p><ul><li>自然语言处理技术去写一本书</li><li>计算机视觉技术去创造一幅画</li><li>…….</li></ul><p>在这篇文章中我们将介绍如何通过LSTM，使用 Python 和 Keras 库去创作音乐。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-41a322ac1c0cc52c07e726381b9165d5_1200x500.jpg"></p><hr><h2 id="先欣赏一下"><a href="#先欣赏一下" class="headerlink" title="先欣赏一下"></a>先欣赏一下</h2><blockquote><p><code>这就是AI做出来的音乐。</code></p><p>其实从结果来看，在乐理上有不少的错误</p><p>和我的神经网络训练的时间和规模有关，毕竟是昨天晚上跑一晚上出来的结果</p></blockquote><div style="height: 0;padding-bottom:65%;position: relative;"><br><iframe width="760" height="510" src="//player.bilibili.com/player.html?aid=540712438&bvid=BV1qi4y147LW&cid=192453618&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="" style="position: absolute;height: 105%;width: 100%;"> </iframe><br></div><hr><p>现在是见证奇迹的时刻，图中包含了一页通过 LSTM 神经网络创作的音乐乐谱。瞅一眼就能看到它的结构，这在第二页的第三行到最后一行尤为明显。</p><p>有音乐常识，能阅读乐谱的人呢可以看到在这一页里有一些奇怪的音符。这就是网络不能创作完美的旋律的结果。在我们目前的成果里将总会有一些错误的音符。如果想获得更好的结果我们得有更大的网络才行。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/ezgif.com-webp-to-jpg.jpg"></p><p>这个相对较浅的网络的结果仍然令人印象深刻，从示例音乐中可以听到。对于那些感兴趣的人来说，图中的乐谱代表了神经网络创作音乐迈出了一大步。</p><h2 id="为什么想起做这个？"><a href="#为什么想起做这个？" class="headerlink" title="为什么想起做这个？"></a>为什么想起做这个？</h2><p>其实总的代码量不大，大概一千行的样子。</p><p>心血来潮在昨天晚上就把这个给做出来了。</p><p>毕竟我也挺喜欢音乐的，所以就尝试了和人工智能的结合</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/codeflow.png"></p><h2 id="GitHub-仓库地址-https-github-com-Xunzhuo-LSTM-Music"><a href="#GitHub-仓库地址-https-github-com-Xunzhuo-LSTM-Music" class="headerlink" title="GitHub 仓库地址: https://github.com/Xunzhuo/LSTM-Music"></a>GitHub 仓库地址: <a href="https://github.com/Xunzhuo/LSTM-Music">https://github.com/Xunzhuo/LSTM-Music</a></h2><blockquote><p>欢迎<code>star follow</code>~</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/git23232.png"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在进入具体的实现之前必须先弄清一些专业术语。</p><h3 id="循环神经网络（RNN）"><a href="#循环神经网络（RNN）" class="headerlink" title="循环神经网络（RNN）"></a>循环神经网络（RNN）</h3><p>循环神经网络是一类让我们使用时序信息的人工神经网络。之所以称之为循环是因为他们对数据序列中的每一个元素都执行相同的函数。每次的结果依赖于之前的运算。传统的神经网络则与之相反，输出不依赖于之前的计算。</p><p>在这篇教程中，我们使用一个 长短期记忆（LSTM）神经网络。这类循环神经网络可以通过梯度下降法高效的学习。使用闸门机制，LSTM 可以识别和编码长期模式。LSTM 对于解决那些长期记忆信息的案例如创作音乐和文本特别有用。</p><h3 id="Music21"><a href="#Music21" class="headerlink" title="Music21"></a>Music21</h3><p><a href="http://web.mit.edu/music21/">Music21</a> 是一个被使用在计算机辅助音乐学的 Python 工具包。它使我们可以去教授音乐的基本原理，创作音乐范例并且学音乐。这个工具包提供了一个简单的接口去获得 MIDI 文件中的音乐谱号。除此之外，我们还能使用它去创作音符与和弦来轻松制作属于自己的 MIDI 文件。</p><p>在这篇教程中我们将使用 Music21 来提取我们数据集的内容，获取神经网络的输出，再将之转换成音符。</p><h3 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h3><p><a href="https://keras.io/">Keras</a> 是一个 high-level 神经网络接口，它简化了和 <a href="https://www.tensorflow.org/">Tensorflow</a> 的交互。它的开发重点是实现快速实验。</p><p>在本教程中我们将使用 Keras 库去创建和训练 LSTM 模型。一旦这个模型被训练出来，我们将使用它去给我们的音乐创作音符。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>在本节中我们将讲解如何为我们的模型收集数据，如何整理数据使它能够在 LSTM 模型中被使用，以及我们模型的结构是什么。</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>下面我们看到的是来自于一个被 Music21 读取后的 midi 文件的摘录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;music21.note.Note F&gt;</span><br><span class="line">&lt;music21.chord.Chord A2 E3&gt;</span><br><span class="line">&lt;music21.chord.Chord A2 E3&gt;</span><br><span class="line">&lt;music21.note.Note E&gt;</span><br><span class="line">&lt;music21.chord.Chord B-2 F3&gt;</span><br><span class="line">&lt;music21.note.Note F&gt;</span><br><span class="line">&lt;music21.note.Note G&gt;</span><br><span class="line">&lt;music21.note.Note D&gt;</span><br><span class="line">&lt;music21.chord.Chord B-2 F3&gt;</span><br><span class="line">&lt;music21.note.Note F&gt;</span><br><span class="line">&lt;music21.chord.Chord B-2 F3&gt;</span><br><span class="line">&lt;music21.note.Note E&gt;</span><br><span class="line">&lt;music21.chord.Chord B-2 F3&gt;</span><br><span class="line">&lt;music21.note.Note D&gt;</span><br><span class="line">&lt;music21.chord.Chord B-2 F3&gt;</span><br><span class="line">&lt;music21.note.Note E&gt;</span><br><span class="line">&lt;music21.chord.Chord A2 E3&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个数据被拆分成两种类型：<a href="http://web.mit.edu/music21/doc/moduleReference/moduleNote.html#note">Note</a>（译者注：音符集）和 <a href="http://web.mit.edu/music21/doc/moduleReference/moduleChord.html">Chord</a>（译者注：和弦集）。音符对象包括<strong>音高</strong>，<strong>音阶</strong>和音符的<strong>偏移量</strong></p><ul><li><strong>音高</strong>是指声音的频率，或者用 [A, B, C, D, E, F, G] 来表示它是高还是低。其中 A 是最高，G 是最低。</li><li><strong><a href="http://web.mst.edu/~kosbar/test/ff/fourier/notes_pitchnames.html">音阶</a></strong> 是指你将选择在钢琴上使用哪些音高。</li><li><strong>偏移量</strong>是指音符在作品的位置。</li></ul><p>而和弦对象的本质是一个同时播放一组音符的容器。</p><p>现在我们可以看到要想精确创作音乐，我们的神经网络将必须有能力去预测哪个音符或和弦将被使用。这意味着我们的预测集将必须包含每一个我们训练集中遇到的的音符与和弦对象。在 Github 页面的训练集上，不同的音符与和弦的数量总计达 352 个。这似乎交给了网络许多种可能的预测去输出，但是一个 LSTM 网络可以轻松处理它。</p><p>接下来我得考虑把这些音符放到哪里了。正如大部分人听音乐时注意到的，音符的间隔通常不同。你可以听到一连串快速的音符，然后接下来又是一段空白，这时没有任何音符演奏。</p><p>接下来我们从另外一个被 Music21 读取过的 midi 文件里找一个摘录，这次我们仅仅在它后面添加了偏移量。这使我们可以看到每个音符与和弦之间的间隔。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;music21.note.Note B&gt; 72.0</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 72.0</span><br><span class="line">&lt;music21.note.Note A&gt; 72.5</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 72.5</span><br><span class="line">&lt;music21.note.Note E&gt; 73.0</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 73.0</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 73.5</span><br><span class="line">&lt;music21.note.Note E-&gt; 74.0</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 74.0</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 74.5</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 75.0</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 75.5</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 76.0</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 76.5</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 77.0</span><br><span class="line">&lt;music21.chord.Chord E3 A3&gt; 77.5</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 78.0</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 78.5</span><br><span class="line">&lt;music21.chord.Chord F3 A3&gt; 79.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如这段摘录里所示，midi 文件里大部分数据集的音符的间隔都是 0.5。因此，我们可以通过忽略不同输出的偏移量来简化数据和模型。这不会太剧烈的影响神经网络创作的音乐旋律。因此我们将忽视教程中的偏移量并且把我们的可能输出列表保持在 352。</p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>既然我们已经检查了数据并且决定了我们要使用音符与和弦作为网络输出与输出的特征，那么现在就要为网络准备数据了。</p><p>首先，我们把数据加载到一个数组中，就像下面的代码这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> music21 <span class="keyword">import</span> converter, instrument, note, chord</span><br><span class="line"></span><br><span class="line">notes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">&quot;midi_songs/*.mid&quot;</span>):</span><br><span class="line">    midi = converter.parse(file)</span><br><span class="line">    notes_to_parse = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    parts = instrument.partitionByInstrument(midi)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parts: <span class="comment"># 文件包含乐器</span></span><br><span class="line">        notes_to_parse = parts.parts[<span class="number">0</span>].recurse()</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 文件有扁平结构的音符</span></span><br><span class="line">        notes_to_parse = midi.flat.notes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> notes_to_parse:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(element, note.Note):</span><br><span class="line">            notes.append(<span class="built_in">str</span>(element.pitch))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(element, chord.Chord):</span><br><span class="line">            notes.append(<span class="string">&#x27;.&#x27;</span>.join(<span class="built_in">str</span>(n) <span class="keyword">for</span> n <span class="keyword">in</span> element.normalOrder))</span><br></pre></td></tr></table></figure><p>使用 <code>converter.parse(file)</code> 函数，我们开始把每一个文件加载到一个 Music21 流对象中。使用这个流对象，我们在文件中得到一个包含所有的音符与和弦的列表。把数组符号贴到到每个音符对象的音高上，因为使用数组符号可以重新创造音符中最重要的部分。将每个和弦的 ID 编码成一个单独的字符串，每个音符用一个点分隔。这些代码使我们可以轻松的把由网络生成的输出解码为正确的音符与和弦。</p><p>既然我们已经把所有的音符与和弦放入一个序列表中，我们就可以创造一个序列，作为网络的输入。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/2332311.png"></p><p>图 1：当一个数据由分类数据转换成数值数据时，此数据被转换成了一个整数索引来表示某一类在一组不同值中的位置。例如，苹果是第一个明确的值，因此它被映射成 0。桔子在第二个因此被映射成 1，菠萝就是 3，等等。</p><p>首先，我们将写一个映射函数去把字符型分类数据映射成整型数值数据。这么做是因为神经网络处理整型数值数据（的性能）远比处理字符型分类数据好的多。图 1 就是一个把分类转换成数值的例子。</p><p>接下来，我们必须为网络及其输出分别创建输入序列。每一个输入序列对应的输出序列将是第一个音符或者和弦，它在音符列表的输入序列中，位于音符列表之后。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sequence_length = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到所有的音高名称</span></span><br><span class="line">pitchnames = <span class="built_in">sorted</span>(<span class="built_in">set</span>(item <span class="keyword">for</span> item <span class="keyword">in</span> notes))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个音高到音符的映射字典</span></span><br><span class="line">note_to_int = <span class="built_in">dict</span>((note, number) <span class="keyword">for</span> number, note <span class="keyword">in</span> <span class="built_in">enumerate</span>(pitchnames))</span><br><span class="line"></span><br><span class="line">network_input = []</span><br><span class="line">network_output = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入序列和与之对应的输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(notes) - sequence_length, <span class="number">1</span>):</span><br><span class="line">    sequence_in = notes[i:i + sequence_length]</span><br><span class="line">    sequence_out = notes[i + sequence_length]</span><br><span class="line">    network_input.append([note_to_int[char] <span class="keyword">for</span> char <span class="keyword">in</span> sequence_in])</span><br><span class="line">    network_output.append(note_to_int[sequence_out])</span><br><span class="line"></span><br><span class="line">n_patterns = <span class="built_in">len</span>(network_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理输入格式使之与 LSTM 兼容</span></span><br><span class="line">network_input = numpy.reshape(network_input, (n_patterns, sequence_length, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 归一化输入</span></span><br><span class="line">network_input = network_input / <span class="built_in">float</span>(n_vocab)</span><br><span class="line"></span><br><span class="line">network_output = np_utils.to_categorical(network_output)</span><br></pre></td></tr></table></figure><p>在这段示例代码汇总，我们把每一个序列的长度都设为 100 个音符或者和弦。这意味着要想去在序列中去预测下一个音符，网络已经有 100 个音符来帮助预测了。我极其推荐使用不同长度的序列去训练网络然后观察这些不同长度的序列对由网络产生的音乐的影响。</p><p>为网络准备数据的最后一步是将输入归一化处理并且 one-hot 编码输出。</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>最后我们来设计这个模型的架构。在模型中我们使用到了四种不同类型的层：</p><p><strong>LSTM 层</strong>是一个循环的神经网络层，它把一个序列作为输入然后返回另一个序列（返回序列的值为真）或者一个矩阵。</p><p><strong>Dropout 层</strong>是一个正则化规则，这其中包含了在训练期间每次更新时将输入单位的一小部分置于 0，以防止过拟合。它由和层一起使用的参数决定。</p><p><strong>Dense 层</strong>或 <strong>fully connected 层</strong>是一个完全连接神经网络的层，这里的每一个输入节点都连接着输出节点。</p><p><strong>The Activation 层</strong>决定使用神经网络中的哪个激活函数去计算输出节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">    model.add(LSTM(</span><br><span class="line">        <span class="number">256</span>,</span><br><span class="line">        input_shape=(network_input.shape[<span class="number">1</span>], network_input.shape[<span class="number">2</span>]),</span><br><span class="line">        return_sequences=<span class="literal">True</span></span><br><span class="line">    ))</span><br><span class="line">    model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">    model.add(LSTM(<span class="number">512</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">    model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">    model.add(LSTM(<span class="number">256</span>))</span><br><span class="line">    model.add(Dense(<span class="number">256</span>))</span><br><span class="line">    model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">    model.add(Dense(n_vocab))</span><br><span class="line">    model.add(Activation(<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">    model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;rmsprop&#x27;</span>)</span><br></pre></td></tr></table></figure><p>既然我们有关于不同层的一些信息，那就把它们加到神经网络的模型中。</p><p>对于每一个 LSTM，Dense 和 Activation 层，第一个参数是层里应该有多少节点。对于 Dropout 层，第一个参数是输入单元中应该在训练中被舍弃的输入单元的片段。</p><p>对于第一层我们必须提供一个唯一的，名字是 <em>input_shape</em> 的参数。这个参数决定了网络中将要训练的数据的格式。</p><p>最后一层应该始终包含和我们输出不同结果数量相同的节点。这确保网络的输出将直接映射到我们的类里。</p><p>在这里我们将使用一个简单的，包含三个 LSTM 层、三个 Dropout 层、两个 Dense 层和一个 activation 层的网络。我推荐调整网络的结构，观察你是否可以提高预测的质量。</p><p>为了计算每次迭代的损失，我们将使用 分类交叉熵，因为我们每次输出属于一个简单类并且我们有不止两个以上的类在为此工作。为了优化网络我们将使用 RMSprop 优化器。通常对于循环神经网络，使用它算是一个好的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filepath = <span class="string">&quot;weights-improvement-&#123;epoch:02d&#125;-&#123;loss:.4f&#125;-bigger.hdf5&quot;</span>    </span><br><span class="line"></span><br><span class="line">checkpoint = ModelCheckpoint(</span><br><span class="line">    filepath, monitor=<span class="string">&#x27;loss&#x27;</span>, </span><br><span class="line">    verbose=<span class="number">0</span>,        </span><br><span class="line">    save_best_only=<span class="literal">True</span>,        </span><br><span class="line">    mode=<span class="string">&#x27;min&#x27;</span></span><br><span class="line">)    </span><br><span class="line">callbacks_list = [checkpoint]     </span><br><span class="line"></span><br><span class="line">model.fit(network_input, network_output, epochs=<span class="number">200</span>, batch_size=<span class="number">64</span>, callbacks=callbacks_list)</span><br></pre></td></tr></table></figure><p>一旦我们决定了网络的结构，就应该开始训练了。使用 Kearas 里的 <code>model.fit()</code> 函数来训练网络。第一个参数是我们早前准备的输入序列表，而第二个参数是它们各自输出的列表。在本教程中我们将训练网络进行 200 次迭代，每一个批次都是通过包含了 60 个分支的网络增殖的。</p><p>为了确保我们可以在任何时间点停止训练而不会将之前的努力付之东流，我们将使用 model checkpionts（模型检查点）。它为我们提供了一种方法，把每次迭代之后的网络节点的权重保存到一个文件中。这使我们一旦对损失值满意了就可以停掉神经网络而不必担心失去权重值。否则我们必须一直等待直到网络完成所有的 200 次迭代次数才能把权重保存到文件中。</p><h2 id="创作音乐"><a href="#创作音乐" class="headerlink" title="创作音乐"></a>创作音乐</h2><p>既然我们已经完成了训练网络，是时候享受一下我们花了几个小时训练的网络了。</p><p>为了能用神经网络去创作音乐，你得把它恢复到原来的状态。简言之我们将再次使用训练部分中的代码，用之前的方式去准备数据和建立网络模型。这并不是重新训练网络，而是把之前网络中的权重加载到模型中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(LSTM(</span><br><span class="line">    <span class="number">512</span>,</span><br><span class="line">    input_shape=(network_input.shape[<span class="number">1</span>], network_input.shape[<span class="number">2</span>]),</span><br><span class="line">    return_sequences=<span class="literal">True</span></span><br><span class="line">))</span><br><span class="line">model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">model.add(LSTM(<span class="number">512</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">model.add(LSTM(<span class="number">512</span>))</span><br><span class="line">model.add(Dense(<span class="number">256</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.3</span>))</span><br><span class="line">model.add(Dense(n_vocab))</span><br><span class="line">model.add(Activation(<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;rmsprop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给每一个音符赋予权重</span></span><br><span class="line">model.load_weights(<span class="string">&#x27;weights.hdf5&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在我们可以使用训练好的模型去开始创作音符了。</p><p>因为我们有一个完整的音符序列表，我们将在列表中选择任意一个索引作为起始点，这允许我们不需要做任何修改就能重新运行代码并且每次都能返回不同的结果。但是，如果希望控制起始点，只需用命令行参数替换随机函数即可。</p><p>这里我也需要写一个映射函数去编码网络的输出。这个函数将数值数据映射成分类数据（把整数变成音符）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">start = numpy.random.randint(<span class="number">0</span>, <span class="built_in">len</span>(network_input)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">int_to_note = <span class="built_in">dict</span>((number, note) <span class="keyword">for</span> number, note <span class="keyword">in</span> <span class="built_in">enumerate</span>(pitchnames))</span><br><span class="line"></span><br><span class="line">pattern = network_input[start]</span><br><span class="line">prediction_output = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 500 个音符</span></span><br><span class="line"><span class="keyword">for</span> note_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    prediction_input = numpy.reshape(pattern, (<span class="number">1</span>, <span class="built_in">len</span>(pattern), <span class="number">1</span>))</span><br><span class="line">    prediction_input = prediction_input / <span class="built_in">float</span>(n_vocab)</span><br><span class="line"></span><br><span class="line">    prediction = model.predict(prediction_input, verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    index = numpy.argmax(prediction)</span><br><span class="line">    result = int_to_note[index]</span><br><span class="line">    prediction_output.append(result)</span><br><span class="line"></span><br><span class="line">    pattern.append(index)</span><br><span class="line">    pattern = pattern[<span class="number">1</span>:<span class="built_in">len</span>(pattern)]</span><br></pre></td></tr></table></figure><p>我们选择使用网络去创作 500 个音符是因为这大约是两分钟的音乐，而且给了网络充足的空间去创造旋律。想要制作任何一个音符我们都必须给网络提交一个序列。我们提交的第一个序列是开始位置的音符序列。对于我们用作输入的每个后续序列，我们将删除序列的第一个音符，并在序列末尾插入上一个迭代的输出，如图 2 所示。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/232323.png"></p><p>图 2：第一个输入列是 ABCDE。我们依靠网络从流里得到的输出是 F。对于下一次的迭代，我们把 A 从列表里移除，并把 F 追加进去。然后重复这步骤。</p><p>为了从网络的输出中确定出最准确的预测，我们抽取了值最大的索引。输出汇数组中，索引为 <em>X</em> 的列可能对应于下一个音符的 <em>X</em>。图三帮助解释这个。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/231232143.png"></p><p>图 3：我们看到在一个从网络到类的输出预测的映射。正如我们看到的，下一个值最可能是 D，因此我们选择 D 为最可能的音高集合。</p><p>之后我们把网络的所有输出搜集，放到一个单一数组中。</p><p>既然我们有了数组中所有的音符与和弦的编码，我们可以开始解码它们并且创造一个音符与和弦对象的数组。</p><p>首先必须确定我们解码后的输出是音符还是和弦。</p><p>如果模式是<strong>和弦</strong>，我们必须将音符串拆分成一组音符。然后我们循环遍历每个音符的字符串表示，并为每个音符创建一个音符对象。然后我们可以创建一个包含每个音符的和弦对象。</p><p>如果输出是一个<strong>音符</strong>，我们使用模式中包含的音高字符串表示创建一个音符对象。</p><p>在每次迭代的结尾我们增加 0.5 的偏移时间并且把音符/和弦对象追加到一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">offset = <span class="number">0</span></span><br><span class="line">output_notes = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于模型生成的值来创建音符与和弦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pattern <span class="keyword">in</span> prediction_output:</span><br><span class="line">    <span class="comment"># 输出是和弦</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> pattern) <span class="keyword">or</span> pattern.isdigit():</span><br><span class="line">        notes_in_chord = pattern.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        notes = []</span><br><span class="line">        <span class="keyword">for</span> current_note <span class="keyword">in</span> notes_in_chord:</span><br><span class="line">            new_note = note.Note(<span class="built_in">int</span>(current_note))</span><br><span class="line">            new_note.storedInstrument = instrument.Piano()</span><br><span class="line">            notes.append(new_note)</span><br><span class="line">        new_chord = chord.Chord(notes)</span><br><span class="line">        new_chord.offset = offset</span><br><span class="line">        output_notes.append(new_chord)</span><br><span class="line">    <span class="comment"># 输出是音符</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_note = note.Note(pattern)</span><br><span class="line">        new_note.offset = offset</span><br><span class="line">        new_note.storedInstrument = instrument.Piano()</span><br><span class="line">        output_notes.append(new_note)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加每次迭代的偏移量使音符不会堆叠</span></span><br><span class="line">    offset += <span class="number">0.5</span></span><br></pre></td></tr></table></figure><p>在用网络创造音符与和弦的列表之后，我们可以使用这个列表创造一个 Music21 流对象，它使用此列表作为一个参数。最后，为了创建包含网络生成的音乐的 MIDI 文件，我们使用 Music21 工具包中的 <em>write</em> 函数将流写入文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">midi_stream = stream.Stream(output_notes)</span><br><span class="line"></span><br><span class="line">midi_stream.write(<span class="string">&#x27;midi&#x27;</span>, fp=<span class="string">&#x27;test_output.mid&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="未来的工作（Maybe？）"><a href="#未来的工作（Maybe？）" class="headerlink" title="未来的工作（Maybe？）"></a>未来的工作（Maybe？）</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-4a13d555c3d984b9806dca443b1c004c_720w.jpg"></p><blockquote><p>我用一个简单的 LSTM 网络和 352 个音高实现了这个非凡的成果。不过，有一些地方还有待提高。</p></blockquote><ol><li><p>目前实现的结果不支持音符的多种音长和音符间的偏移。我们要为添加为不同音长服务的音高和代表音符停顿时间的音调。</p></li><li><p>为了通过增加音调来获得满意的结果我们也必须增加 LSTM 网络的深度，这需要性能更高的计算机去完成。我自用的笔记本电脑大约需要两个小时去训练网络。</p></li><li><p>为乐章增加前奏和结尾。现在网络在两个乐章之间没有间隔，网络不知道一个章节的结尾和另一个的开始在哪里。这允许网络从前奏到结束地创作一个章节而不是像现在这样突然的结束创作。</p></li><li><p>增加一个方法去处理未知的音符。目前的情况是如果网络遇到一个它不认识的音符，它就会返回状态失败。解决这个方法的可能方案是去寻找一个和未知音符最相似的音符或者和弦。</p></li><li><p>为数据集增加更多的乐器（的音乐）。现在网络仅仅支持只有一种单一乐器的作品。如果可以扩展到一整个管弦乐队那将会是非常有趣的。</p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在本教程中我们演示了如何创建一个 LSTM 神经网络去创作音乐。也许这个结果不尽如人意，但它们还是让人印象深刻。而且它向我们展示了，神经网络可以创作音乐并且可以被用来帮助人们创作更复杂的音乐作品。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-005cc0232839bc566b01d2c8a5f223ca_720w.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习探索之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LSTM </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word2Vec之把美丽的音乐🎵变向量</title>
      <link href="/vec-music/"/>
      <url>/vec-music/</url>
      
        <content type="html"><![CDATA[<blockquote><p>机器学习算法在视觉领域和自然语言处理领域已经带来了很大的改变。但是音乐呢？近几年，音乐信息检索领域一直在飞速发展。这篇文章写的是NLP的一些技术是如何移植到音乐领域的。探寻了一种使用流行的 NLP 技术 word2vec 来表示复调音乐的方法。让我们来探究一下这是如何做到的……</p></blockquote><h2 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h2><p>词嵌入模型使我们能够通过有意义的方式表示词汇，这样机器学习模型就可以更容易地处理它们。这些词嵌入模型让我们可以用包含语义的向量来表示词汇。Word2vec 是一个流行的词向量嵌入模型，由 Mikolov 等人于 2013 年开发，它能够以一种十分有效的方式创建语义向量空间。</p><p>Word2vec 的本质是一个简单的单层神经网络，它有两种构造方式：1）使用连续词袋模型（CBOW）；或 2）使用 skip-gram 结构。这两种结构都非常高效，并且可以相对快速地进行训练。在本研究中，我们使用的是 skip-gram 模型，因为 Mikolov 等人在 2013 年的工作中提到，这个方法对于较小的数据集更加高效。Skip-gram 结构使用当前词 w_t 作为输入（输入层），并尝试预测在窗口范围内与之前后相邻的词（输出层）：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vm090.png"></p><p>由于一些在网上流传的图片，人们对于 skip-gram 结构的样子存在一些疑惑。网络的输出层并不包含多个单词，而是由上下文窗口中的一个单词组成的。那么它如何才能表示整个上下文窗口呢？当训练网络时，我们实际会使用抽样对，它由输入单词和一个上下文窗口中的随机单词组成。</p><p>这种类型的网络的传统训练目标包含一个用 softmax 函数来计算 𝑝(𝑤_{𝑡+𝑖}|𝑤_𝑡) 的过程，而它的梯度计算代价是十分大的。幸运的是，诸如噪音对比估计（Gutmann 和 Hyvärine 于 2012 发表论文）和负采样（Mikolov 等人于 2013 年发表论文）等技术为此提供了一个解决方案。我们用负采样基本地定义一个新的目标：最大化真实单词的概率并最小化噪声样本的概率。一个简单的二元逻辑回归可以用来分类真实单词和噪声样本。</p><p>当 word2vec 模型训练好了，隐藏层上的权重基本上就可以表示习得的、多维的嵌入结果。</p><h2 id="用音乐作为单词？"><a href="#用音乐作为单词？" class="headerlink" title="用音乐作为单词？"></a>用音乐作为单词？</h2><p>音乐和语言是存在内在联系的。它们都由遵从一些语法规则的一系列有序事件组成。更重要的是，它们都会创造出预期。想象一下，如果我说：“我要去比萨店买一个……”。这句话就生成了一个明确的预期……比萨。现在想象我给你哼一段生日快乐的旋律，但是我在最后一个音符前停下了……所以就像一句话一样，旋律生成预期，这些预期可以通过脑电波测量到，比如大脑中的事件相关电位 N400（Besson 和 Schön 于 2002 年发表论文）。</p><p>考虑语到语言和单词的相似性，让我们看看流行的语言模型是否也可以用来对音乐做有意义的表达。为了将一个 midi 文件转换为“语言”，我们在音乐中定义“切片”（相当于语言中的单词）。我们数据库中的每个曲目都被分割成了等时长的、不重叠的、长度为一个节拍的切片。一个节拍的时长可以由 MIDI toolbox 得到，且在每个曲目中可以是不同的。对于每一个切片，我们都会记录一个包含所有音名的列表，也就是没有八度信息的音高。</p><p>下图展示了一个怎样从 Chopin’s Mazurka Op. 67 №4 的第一小节中确定切片的例子。这里一节拍的长度是四分音符。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vmsssa2.png" style="zoom:50%;" /><h2 id="Word2vec-学习调性-——-音乐的语义分布假设"><a href="#Word2vec-学习调性-——-音乐的语义分布假设" class="headerlink" title="Word2vec 学习调性 —— 音乐的语义分布假设"></a>Word2vec 学习调性 —— 音乐的语义分布假设</h2><p>在语言模型中，语义分布假设是词向量嵌入背后的理论基础之一。它表述为“出现在同一上下文中的单词趋向于含有同样的语义”。翻译到向量空间，这意味着这些单词会在几何关系上彼此接近。让我们看看 word2vec 模型是否在音乐上也学习到了类似的表示。</p><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>Chuan 等人使用的 <a href="https://www.reddit.com/r/datasets/comments/3akhxy/the_largest_midi_collection_on_the_internet">MIDI 数据集</a> 包含了 8 种不同音乐类型（从古典到金属）。在总共 130,000 个音乐作品中，基于类型标签，我们只选择了其中的 23,178 个。这些曲目包含了 4,076 个唯一的切片。</p><h3 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h3><p>模型的训练只使用了出现最多的 500 个切片（即单词），并使用一个伪造单词来替代所有其他的情况。当包含的单词含有更多的信息（出现次数）时，这个过程提高了模型的准确性。其他的超参数包括学习率（设为 0.1），skip 窗口大小（设为 4），训练步数（设为 1,000,000）和嵌入维度（设为 256）。</p><h3 id="和弦"><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h3><p>为了评估音乐切片的语义是否被模型捕获，让我们来看看和弦。</p><p>在切片词库中，所有包括三和弦的切片都会被识别出来。然后用罗马数字标注这些切片的音级（就像我们在乐理中经常做的那样）。比如，在C调中，C和弦为 I，而G和弦表示为 V。之后我们会使用余弦距离来计算在嵌入中不同音级的和弦之间有多远。</p><p>在 <em>n</em> 维空间中，两个非零向量 A 和 B 的余弦距离 Ds(A, B) 计算如下：</p><p>D𝑐(A,B)=1-cos(𝜃)=1-D𝑠(A,B)</p><p>其中 𝜃 是 A 和 B 的夹角，Ds 是余弦相似度：</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vmsss.png" style="zoom:50%;" /><p>从乐理视角看，和弦 I 和 V 之间的“音调距离”应该比和弦 I 和 III 之间的小。下图展示了C大三和弦与其他和弦之间的距离。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vmqqqq.png" style="zoom:50%;" /><p>从三和弦 I 到 V、IV 和 vi 的距离相对比较小！这与他们在乐理中被认为的“音调接近”是一致的，同时也表示 word2vec 模型的确学习到了切片之间有意义的关系。</p><p><em>在 word2vec 空间下，和弦之间的余弦距离似乎反映出了乐理中和弦的功能作用！</em></p><h3 id="调"><a href="#调" class="headerlink" title="调"></a>调</h3><p>通过观察巴赫的《平均律钢琴曲集》（WTC）的 24 首前奏曲，其中包括了全部的 24 个调（大调和小调），我们可以研究新的嵌入空间是否捕获到了调的信息。</p><p>为了扩充数据集，每个曲子都被转换为其他每一种大调或小调（基于原调），这样每个曲子都会有 12 个版本。每个调的切片都会被映射到预先训练好的向量空间里，并使用 k-means 聚类，这样我们就能得到一些中心点，把它们作为新数据集中的曲子。通过把这些曲子变调，我们可以保证这些中心点之间的余弦距离只会受到一个元素的影响：调。</p><p>下图展示了不同调的中心点曲子之间的余弦距离结果。和预期的一样，差五度音程的调在音调上是接近的，它们被表示为对角线旁边较暗的区域。音调上较远的调（比如 F 和 F#）呈橙色，这验证了我们的假设，即 word2vec 空间反映了调之间的音调距离关系！</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vm1212.png" style="zoom:50%;" /><h3 id="类推"><a href="#类推" class="headerlink" title="类推"></a>类推</h3><p>这张图片</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/word2vec_chart.jpg" style="zoom:50%;" />展示了 word2vec 的一个突出的特性，它可以在向量空间中找出类似于「国王 -&gt; 皇后」和「男人 -&gt; 女人」这样的转化关系（Mikolov 等人 于 2013 年发表论文）。这说明含义可以通过向量转化向前传递。那么对音乐来说是否也可行呢？</p><p>我们首先从多音切片中检测到一些和弦，并观察一对和弦向量，C大调到G大调（I-V）。可以发现，不同的 I-V 向量对之间的夹角都非常相似（如右图所示），甚至可以被想成一个多维的五度圈。这再一次证明了类推的概念可能也存在于音乐 word2vec 空间上，尽管要想发现更明确的例子还需要做更多的调查研究。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vm.png" alt="vm" style="zoom:40%;" /><h3 id="其它应用-——-音乐生成？"><a href="#其它应用-——-音乐生成？" class="headerlink" title="其它应用 —— 音乐生成？"></a>其它应用 —— 音乐生成？</h3><p>Chuan 等人于 2018 年简要地研究了如何使用该模型替换音乐切片以形成新的音乐。他们表示这只是一个初步的实验，但是该系统可以作为一个表示方法而用于更复杂的系统，例如 LSTM。在论文中可以找到更多相关细节，但下图可以让你对其结果有一个初步的了解。</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/vm12.png" style="zoom:40%;" /><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Chuan、Agres 和 Herremans 于 2018 年创建了一种 word2vec 模型，这种模型可以捕捉到复调音乐的音调属性，而无需将实际的音符输入模型。文章给出了一些令人信服的证据，说明和弦与调的信息可以在新的嵌入中找到，所以可以这样回答标题中的问题：是的，我们能够使用 word2vec 表示复调音乐！现在，将这个表示方法嵌入到其他能够捕捉到音乐的时间信息的模型，这条道路也已经打开了。</p>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word2vec </tag>
            
            <tag> MIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在哪里读人工智能的论文📚？</title>
      <link href="/papers/"/>
      <url>/papers/</url>
      
        <content type="html"><![CDATA[<div align="center"><h1 id="一个读人工智能的论文网站：Paperswithcode"><a href="#一个读人工智能的论文网站：Paperswithcode" class="headerlink" title="一个读人工智能的论文网站：Paperswithcode"></a>一个读人工智能的论文网站：<a href="https://paperswithcode.com/sota">Paperswithcode</a></h1><h2 id="类别丰富，涵盖了各个人工智能的方向"><a href="#类别丰富，涵盖了各个人工智能的方向" class="headerlink" title="类别丰富，涵盖了各个人工智能的方向"></a>类别丰富，涵盖了各个人工智能的方向</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/perasdasd.png"></p><h2 id="跟进最新最热门的学术论文"><a href="#跟进最新最热门的学术论文" class="headerlink" title="跟进最新最热门的学术论文"></a>跟进最新最热门的学术论文</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/perpaer.png"></p></div>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何设计一个聊天机器人？谈谈技术路线</title>
      <link href="/chatbotstack/"/>
      <url>/chatbotstack/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/1_m9IJdAYW04MYh75ivpwUNA.png"></p><p>如果你正在为一个客户设计一个聊天机器人（咨询，开发，原型设计……），这段对话可能听起来很熟悉：</p><blockquote><p>客户：「实现我的机器人最佳技术的是什么？」</p><p>我：「不仅仅是一项技术，而是一系列的多种技术。每项技术都可以解决一个问题，所以这取决于你的项目。」</p><p>客户：「好吧，那你能给我什么建议吗？」</p><p>我：「你知道吗，要回答这个问题，我差不多需要问你将近 10 个聊天机器人问题！」</p></blockquote><p>在这篇文章中，我会详细讲述如何为客户设计高效聊天机器人的技术栈框架。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/3299616503-5a3895c9efdf5_articlex.png"></p><p>正如你所看到的，聊天机器人各种各样的都有。</p><p>所以，该为聊天机器人付多少钱算是一个合理的价格，对于客户来说还是很难去意识到的。</p><p>在某些领域<strong>聊天机器人</strong>的项目价格在 4w 人名币到 350w人民币之间。（关键是有时机器人的质量都是相同的。这价格就很魔幻了！！）</p><p>每一个技术开发者都争着提出「聊天机器人解决方案」，即使对于技术人群来说，也很难去区分平台、框架、NLP 技术、消息功能、免代码机器人……</p><h1 id="如何选择正确的技术栈"><a href="#如何选择正确的技术栈" class="headerlink" title="如何选择正确的技术栈"></a>如何选择正确的技术栈</h1><img src="https://picreso.oss-cn-beijing.aliyuncs.com/tech-mountain-landscape.png" style="zoom:50%;" /><h2 id="三大基准"><a href="#三大基准" class="headerlink" title="三大基准"></a><strong>三大基准</strong></h2><p>在设计一个机器人时，记住三个创新的核心维度：你的产品必须 desirable、viable、feasible。也就是</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/123213123.png"></p><p>这三个标准应该在你选择一项技术时作为引导你的基准：</p><ul><li><p>它是否有<code>可行性</code>？</p></li><li><p>它是否满足<code>客户需求</code>？</p></li><li><p>它是否是<code>可估价</code>？</p></li></ul><h1 id="总体WorkFlow"><a href="#总体WorkFlow" class="headerlink" title="总体WorkFlow"></a>总体WorkFlow</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow0.png"></p><ol><li><strong>定义客户正确的使用场景</strong>与适用范围：某些情况下项目在技术上不可行、没什么用甚至太昂贵。从小做起，扩大规模，在这个想法上不要犹豫</li><li><strong>设计对话流程</strong>（你可以使用 <code>Xmind</code> 这样一款超棒的脑图工具，或者在线并且支持协作的<code>ProcessOn</code> 也可以）</li><li>选择最合适的<strong>技术栈</strong></li><li>使用迭代、beta用户测试来提升机器人流程，知识库，机器人个性……</li><li><strong>扩大规模</strong>，遵循<strong>分析</strong>结果/KPI 并与你想实现的目标进行比较</li></ol><blockquote><p>在第一、二步中，你应该汇集所有你需要的信息以选择最佳技术。</p><ul><li>首先，确保你的用户可以理解选择正确技术的利益</li><li>然后，询问正确的问题来做最明智的决定</li></ul></blockquote><h1 id="怎样解释半智能聊天机器人？"><a href="#怎样解释半智能聊天机器人？" class="headerlink" title="怎样解释半智能聊天机器人？"></a>怎样解释半智能聊天机器人？</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/1q.png"></p><ul><li>用户通过<strong>设备</strong>在<strong>消息平台</strong>上进行交互，她的的消息会通过 <strong>NLP</strong> 进行处理。</li><li>然后机器人可以启动一个过程，用来自<strong>数据库</strong> / <strong>API</strong> 的实时信息来回应，或者<strong>转交人工</strong>。</li><li>接收的消息越多，机器人提升的也就越多：这也就是所谓的机器学习。某些情况下也需要人工来帮助机器人，也就是所谓的监督学习。</li></ul><p>我所讲的都是非常基础的，但是可以很有效地向非技术人员证明机器人背后的关键概念 / 技术:)</p><h1 id="聊天机器人十大重要问题"><a href="#聊天机器人十大重要问题" class="headerlink" title="聊天机器人十大重要问题"></a>聊天机器人十大重要问题</h1><p>以下是我认为任何机器人创建者在选择技术方案强化他的机器人前都需要抓住的 10 个主题。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/2s.png" alt="2s"></p><h2 id="1—消息接口"><a href="#1—消息接口" class="headerlink" title="1—消息接口"></a>1—消息接口</h2><p>你专注于哪个消息平台？你的用户们都在哪儿？你的服务是对任何人都适用还是只对特定的一组用户群？他们会使用什么设备聊天？（智能手机、笔记本电脑、语音……）</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/232esd.png"></p><ul><li><p><strong>腾讯</strong>旗下面向即时通讯的 <strong>微信</strong> <strong>QQ</strong></p></li><li><p><strong>阿里巴巴</strong>旗下的面向购物的 <strong>淘宝</strong>  面向支付的 <strong>支付宝</strong></p></li><li><p><strong>京东</strong>的主要业务  <strong>京东商城</strong></p></li><li><p>简单的<strong>网页小部件或者插件</strong>，如果你打算将你的机器人集成进网站（我的网站也即将集成一个机器人）</p></li><li><p><strong>Skype</strong> 与 <strong>Microsoft Teams</strong> 更面向企业的应用：针对大公司雇员的聊天机器人，具有高度数据隐私问题</p></li><li><p><strong>iMessenger</strong>，如果你用户中的大多数有 iPhone</p></li><li><p><strong>Twitter</strong> 基于 twitter 的社区直达消息/微博，或者公开分享性的会话</p></li></ul><h2 id="2—图标机器人流程建立"><a href="#2—图标机器人流程建立" class="headerlink" title="2—图标机器人流程建立"></a>2—图标机器人流程建立</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/3d.png"></p><ul><li>包括编码与配置技术工具此类的<strong>进阶技术</strong>会更具效力。</li><li><strong>免代码技术</strong>可以使任何人通过拖拽与施放来修改机器人图标界面，少一些定制。这里值得提及的是Chatfuel、Converse.ai、Motion.ai、Smartly.ai、FlowXO、Octane.ai、Sequel、Gupshup ……</li></ul><p>关键问题是：<strong>你是否需要非技术人群能够实时修改机器人内容</strong>？如果内容经常变化并且你想给业务人群自主权，那么就可以考虑使用图形界面的解决方案。</p><h2 id="3—会话流"><a href="#3—会话流" class="headerlink" title="3—会话流"></a>3—会话流</h2><p><em>你的机器人只是一个基础的 QA 机器人还是它运作起来像一个真人一样？（发送多个消息，提供选项……）</em></p><p>有很多解决方案是建立于问答基础之上，像是来自微软的 QNAmaker，由 Intercom 制造的 Operator……所以没有必要构建太复杂的东西。</p><p><strong>如果你需要一个有互动性的 FAQ，那么只需要使用那些简单的工具，在几分钟之内就可以做好。</strong></p><h2 id="4—丰富且有互动的内容"><a href="#4—丰富且有互动的内容" class="headerlink" title="4—丰富且有互动的内容"></a>4—丰富且有互动的内容</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/sdsad.png"></p><p><strong>你的机器人只使用文本，还是你希望使用不同类型的消息？</strong>（图片，按钮，快速回复，列表，模版……）</p><p>在某些特定的使用场景中，你只能够使用文本，尤其是你的目标是短信频道（老人、厌恶数据的部分人群、没有智能手机的一些个别国家）。</p><p>或者，当你计划将机器人接入多个提供不同模版结构的消息平台。</p><h2 id="5—NLP（自然语言处理）"><a href="#5—NLP（自然语言处理）" class="headerlink" title="5—NLP（自然语言处理）"></a>5—NLP（自然语言处理）</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/nlp.jpg"></p><blockquote><p>你真的需要 NLP 吗？！</p></blockquote><p>我经常听人们谈起他们是如何需要他们的机器人变得超级智能，充满 AI，近乎于人类。</p><p><em>事实上，大多数使用场景根本就不需要 NLP，因为他们只是遵循一个简单流程图而已！</em></p><p>举个例子，聊天机器人可以让你浏览产品目录，并最终告诉你商店的营业时间，这并不需要一个复杂的 NLP 解决方案，而完全可以通过按钮、快捷回复以及一个好的菜单来实现。</p><p>不过如果你意向去建立一个真实的会话感受，你是绝对需要 NLP 的！</p><p>现如今共有 <strong>6 大 NLP 平台</strong>，分别由 Facebook、IBM、Google、NuanceGroup 以及 Miscrosoft 所拥有。我外加一个，Recast，一个法国的创业公司，可以提供 NLP 的协作方法。</p><p>做完基础安利后，我要说一下<strong>我的最爱</strong>，<strong>API.Ai</strong>。足够简单，可以让你将回答放在平台上，并支持小的讨论功能，监督学习，多种语言……但是毕竟只是我个人的最爱，仅供参考:)</p><h2 id="6—监督学习"><a href="#6—监督学习" class="headerlink" title="6—监督学习"></a>6—监督学习</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/232esds.png"></p><p>聊天机器人脱离了人类团队什么都不是。我们要给聊天机器人提升会话流程，添加新的意图，丰富知识库……</p><p>这就是所说的<strong>监督学习</strong>或者<strong>监督训练</strong>。监督学习可以在线上进行，也可以在在会话之后。我们可以观察不同的<strong>实践</strong>：</p><ul><li><strong>在线指导</strong>：当机器人不能足够确认信息或者不能识别任何意图时，这时候就需要人来帮助它规范正确意图。</li><li><strong>日常训练</strong>：每天操作员会审视所有对话，并确认或否定机器人所认知的意图。</li><li><strong>周常改进</strong>；每周，团队汇集可以添加的有趣的新功能。聆听并观察你的用户，他们会有你需要去适应的意外举动。</li></ul><h2 id="7—人工转接"><a href="#7—人工转接" class="headerlink" title="7—人工转接"></a>7—人工转接</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/1234.jpg"></p><p><strong>你能准备出真人来接管会话吗？</strong>（当机器人不理解时，或者当用户想要人工服务的时候）在很多场景中，这真的会让自动化聊天机器人变成顾客的惊奇体验。</p><p>再强调一遍，如果你计划将人工集成进这一循环，请确保使用了合适的技术解决方案。举个例子：</p><ul><li><strong>阿里巴巴</strong> 的 <strong>小蜜</strong></li><li><strong>Facebook messenger</strong> 可以让你看见在页面管理器中看见所有会话。他们最近宣布了为开发者的转化协议</li><li><strong>Operator</strong>，来自 Intercom 的 Operator 似乎被设计成可以让人工插入会话</li><li><strong>Chatfuel</strong> 提供按钮来看使「在线聊天会议」</li><li><strong>Dashbot</strong> 有人工转接功能</li></ul><h2 id="8—API-集成"><a href="#8—API-集成" class="headerlink" title="8—API 集成"></a>8—API 集成</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/23wsds2.png"></p><p>如果你需要<strong>通过网络服务集成第三方</strong>，请确保你的技术栈可以支持它。举个例子，Chatfuel 能够让你关联到 Zappier，但是大多数 WYSIWYG 平台不能连接外部网络服务。最灵活的方法是自己编写机器人的逻辑以及使用 REST API。</p><h2 id="9—语言支持"><a href="#9—语言支持" class="headerlink" title="9—语言支持"></a>9—语言支持</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/bV0zh7.jpg"></p><p>根据于你的目标用户，<strong>语言标准会是决定性的因素</strong>。大多数平台都能很好地支持英语，然而它们并不都支持其他语言。有时语言虽然有支持，但是效果也没有预期那样好</p><h2 id="10—估价"><a href="#10—估价" class="headerlink" title="10—估价"></a>10—估价</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/bV0ziX.jpg"></p><p>当然，你需要考虑一下所有软件解决方案的价格以及估算你的<strong>用户增长</strong>。</p><ul><li>免费模式（有或者没有水印）</li><li>免费增值模式（ X 条消息 / X 个用户前免费或为进阶功能付费）</li><li>为每条消息/每个 API 请求付费</li><li>按平台上用户数付费</li><li>订阅</li></ul><h1 id="我最喜欢的技术栈？"><a href="#我最喜欢的技术栈？" class="headerlink" title="我最喜欢的技术栈？"></a>我最喜欢的技术栈？</h1><p>你应该现在有能力去决定哪个技术栈可以提供给你的客户，并在时间推移上，有个价值上的估算了:)</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/bV0zji.jpg"></p><p>目前我喜欢的Flow是：</p><ul><li><strong>用 API.ai 做 NLP 与监督学习</strong>：很不错的讨论小功能，支持法语的最佳平台，漂亮的界面……</li><li><strong>用 Dashbot 做分析以及人工转接</strong>：十分详细的统计，易于集成，报表功能……</li><li><strong>用 Botpress 做 NodeJS 框架</strong>：可以迅速搭建并且十分灵活</li><li><strong>用 Wechat 做消息接口</strong>：10 亿的用户，绝佳的聊天 UX</li><li><strong>用 MongoDB 做数据库</strong>：可以由非技术人群更新</li><li>还有其他一些取决于项目类型的 API（QQ、Spotify、Youtube、 Google Maps……)</li></ul><p>希望本文可以帮助到你们一些人，感谢阅读:)</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/bV0zk9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 聊天机器人 </tag>
            
            <tag> 技术路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One-Hot编码原理解释</title>
      <link href="/one-hot/"/>
      <url>/one-hot/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/One-Hot_Encoding_print.png"></p><h2 id="在机器学习中为什么要进行-One-Hot-编码？"><a href="#在机器学习中为什么要进行-One-Hot-编码？" class="headerlink" title="在机器学习中为什么要进行 One-Hot 编码？"></a>在机器学习中为什么要进行 One-Hot 编码？</h2><p>入门机器学习应用，尤其是需要对实际数据进行处理时，是很困难的。</p><p>一般来说，机器学习教程会推荐你或要求你，在开始拟合模型之前，先以特定的方式准备好数据。</p><p>其中，一个简单的例子就是对类别数据（Categorical data）进行 One-Hot 编码（又称独热编码）。</p><ul><li>为什么 One-Hot 编码是必要的？</li><li>为什么你不能直接使用数据来拟合模型？</li></ul><p>在本文中，你将得到上述重要问题的答案，并能更好地理解机器学习应用中的数据准备工作。</p><h2 id="什么是类别数据？"><a href="#什么是类别数据？" class="headerlink" title="什么是类别数据？"></a>什么是类别数据？</h2><p>类别数据是一种只有标签值而没有数值的变量。</p><p>它的值通常属于一个大小固定且有限的集合。</p><p>类别变量也常被称为 标称值（nominal）</p><p>下面举例说明：</p><ul><li>宠物（pet）变量包含以下几种值：狗（dog）、猫（cat）。</li><li>颜色（color）变量包含以下几种值：红（red）、绿（green）、蓝（blue）。</li><li>位次（place）变量包含以下几种值：第一（first）、第二（second）和第三（third）。</li></ul><p>以上例子中的每个值都代表着一个不同的类别。</p><p>有些类别彼此间存在一定的自然关系，比如自然的排序关系。</p><p>上述例子中，位次（place）变量的值就有这种自然的排序关系。这种变量被称为序数变量（ordinal variable）。</p><h2 id="类别数据有什么问题？"><a href="#类别数据有什么问题？" class="headerlink" title="类别数据有什么问题？"></a>类别数据有什么问题？</h2><p>有些算法可以直接应用于类别数据。</p><p>比如，你可以不进行任何数据转换，将决策树算法直接应用于类别数据上（取决于具体实现方式）。</p><p>但还有许多机器学习算法并不能直接操作标签数据。这些算法要求所有的输入输出变量都是数值（numeric）。</p><p>通常来说，这种限制主要是因为这些机器学习算法的高效实现造成的，而不是算法本身的限制。</p><p>但这也意味着我们需要把类别数据转换成数值形式。如果输出变量是类别变量，那你可能还得将模型的预测值转换回类别形式，以便在一些应用中展示或使用它们。</p><h2 id="如何将类别数据转换成数值数据？"><a href="#如何将类别数据转换成数值数据？" class="headerlink" title="如何将类别数据转换成数值数据？"></a>如何将类别数据转换成数值数据？</h2><p>这包含两个步骤：</p><ol><li>整数编码</li><li>One-Hot 编码</li></ol><h3 id="1-整数编码"><a href="#1-整数编码" class="headerlink" title="1. 整数编码"></a>1. 整数编码</h3><p>第一步，先要给每个类别值都分配一个整数值。</p><p>比如，用 1 表示红色（red），2 表示绿色（green），3 表示蓝色（blue）。</p><p>这种方式被称为标签编码或者整数编码，可以很轻松地将它还原回类别值。</p><p>对于某些变量来说，这种编码就足够了。</p><p>整数之间存在自然的排序关系，机器学习算法也许可以理解并利用这种关系。</p><p>比如，前面的位次（place）例子中的序数变量就是一个很好的例子。对于它我们只需要进行标签编码就够了。</p><h3 id="2-One-Hot-编码"><a href="#2-One-Hot-编码" class="headerlink" title="2. One-Hot 编码"></a>2. One-Hot 编码</h3><p>但对于不存在次序关系的类别变量，仅使用上述的整数编码是不够的。</p><p>实际上，使用整数编码会让模型假设类别间存在自然的次序关系，从而导致结果不佳或得到意外的结果（预测值落在两个类别的中间）。</p><p>这种情况下，就要对整数表示使用 One-Hot 编码了。One-Hot 编码会去除整数编码，并为每个整数值都创建一个二值变量。</p><p>在颜色（color）的示例中，有 3 种类别，因此需要 3 个二值变量进行编码。对应的颜色位置上将被标为“1”，其它颜色位置上会被标为“0”。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">red, green, blue</span><br><span class="line">1, 0, 0</span><br><span class="line">0, 1, 0</span><br><span class="line">0, 0, 1</span><br></pre></td></tr></table></figure><p>在统计学等领域中，这种二值变量通常被称为“虚拟变量”或“哑变量”（dummy variable）。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，你应该了解了为什么在使用机器学习算法时通常要对类别数据进行编码。</p><p>特别要注意：</p><ul><li>类别数据的定义是由一组有限集合中的值构成的变量。</li><li>大多数机器学习算法都需要输入数值变量，并会输出数值变量。</li><li>通过整数编码与 One-Hot 编码可以将类别数据转换为整型数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> one-hot模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊天机器人Louis</title>
      <link href="/chatbot/"/>
      <url>/chatbot/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-Project-ChatBot-Louis"><a href="#AI-Project-ChatBot-Louis" class="headerlink" title="AI Project : ChatBot-Louis"></a>AI Project : ChatBot-Louis</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/louis-on-developing.png" alt="louis-on-developing"></p><blockquote><p>本项目为 基于 <code>Seq2Seq</code> <code>SeqGAN</code>的自学习<code>对话机器人</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理实战 </tag>
            
            <tag> 聊天机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛刷题网站汇总</title>
      <link href="/OJ/"/>
      <url>/OJ/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/1_w_-9_SBx5-p2tXHYp0zMuw.png"></p><h2 id="OJ网站汇总🚀："><a href="#OJ网站汇总🚀：" class="headerlink" title="OJ网站汇总🚀："></a>OJ网站汇总🚀：</h2><hr><h3 id="🚀国内Online-Judge"><a href="#🚀国内Online-Judge" class="headerlink" title="🚀国内Online Judge"></a>🚀国内Online Judge</h3><h4 id="🌲三大OJ🌲"><a href="#🌲三大OJ🌲" class="headerlink" title="🌲三大OJ🌲"></a>🌲三大OJ🌲</h4><ol><li>🎄浙江大学 <a href="http://acm.zju.edu.cn/">http://acm.zju.edu.cn</a> 超过2000题，支持C/C++/Pascal/Java/Python/Perl/Scheme/PHP</li><li>🎄北京大学 <a href="http://poj.org/">http://poj.org</a> 超过2000题，支持C/C++/Pascal/Java/Fortran</li><li>🎄哈尔滨工业大学 <a href="http://acm.hit.edu.cn/">http://acm.hit.edu.cn</a> 超过2000题，支持C/C++/Pascal/Java/Fortran</li></ol><h4 id="🌲非常🔥的hdu🌲"><a href="#🌲非常🔥的hdu🌲" class="headerlink" title="🌲非常🔥的hdu🌲"></a>🌲非常🔥的hdu🌲</h4><ul><li>🎄杭州电子科技大学 <a href="http://acm.hdu.edu.cn/">http://acm.hdu.edu.cn</a> 超过2000题，支持C/C++/Pascal/Java杭电OJ是国内最为活跃的OJ</li><li>🎄每周都会举办bestcoder比赛，相当于国内的codeforce：<a href="http://bestcoder.hdu.edu.cn/">http://bestcoder.hdu.edu.cn/</a></li></ul><h4 id="🌲Set-of-OJ：vjudge🌲"><a href="#🌲Set-of-OJ：vjudge🌲" class="headerlink" title="🌲Set of OJ：vjudge🌲"></a>🌲Set of OJ：vjudge🌲</h4><ul><li>🎄虚拟OJ：<a href="https://vjudge.net/">https://vjudge.net/</a> 这个网站的特色就是用户可以自己举办比赛，vjudge支持数十个OJ网站，用户可以从这些OJ网站上选择题目，可以选择一些同类型题目形成一个题集。</li><li>🎄但是vjudge上的题目并不会永久保存，过一段时间就被清空了。</li></ul><hr><h3 id="🚀国外Online-Judge"><a href="#🚀国外Online-Judge" class="headerlink" title="🚀国外Online Judge"></a>🚀国外Online Judge</h3><ol><li>🎄CF：CodeForce：<a href="http://codeforces.com/problemset">http://codeforces.com/problemset</a> 世界顶级OJ，CodeForce还提供了API接口：<a href="http://codeforces.com/api/help">http://codeforces.com/api/help</a></li><li>🎄Saratov State University <a href="http://acm.sgu.ru/">http://acm.sgu.ru</a> 超过400题，支持C/C++/C#/Java/Delphi</li><li>🎄UVA：University of Valladolid <a href="http://uva.onlinejudge.org/">http://uva.onlinejudge.org</a> 超过800题，支持C/C++/Pascal/Java</li><li>🎄Ural State University <a href="http://acm.timus.ru/">http://acm.timus.ru</a> 超过800题，支持C/C++/C#/Pascal/Java</li><li>🎄Sphere Research Labs <a href="http://www.spoj.pl/">http://www.spoj.pl</a> 超过1000题，支持几乎所有常见语言</li></ol><hr><h3 id="🚀入门到进阶的Online-Judge"><a href="#🚀入门到进阶的Online-Judge" class="headerlink" title="🚀入门到进阶的Online Judge"></a>🚀入门到进阶的Online Judge</h3><ol><li>🎄vijos：大部分题目是NOI题目 <a href="https://vijos.org/">https://vijos.org/</a></li><li>🎄洛谷：<a href="https://www.luogu.org/problemnew/lists">https://www.luogu.org/problemnew/lists</a></li><li>🎄RQNOJ：和vijos很像，适合NOI刷题 <a href="http://www.rqnoj.cn/problem">http://www.rqnoj.cn/problem</a></li></ol><hr><h3 id="🚀招聘面试Online-Judge"><a href="#🚀招聘面试Online-Judge" class="headerlink" title="🚀招聘面试Online Judge"></a>🚀招聘面试Online Judge</h3><ol><li>🎄牛客网：<a href="https://www.nowcoder.com/">https://www.nowcoder.com/</a></li><li>🎄leetcode：<a href="https://leetcode.com/problemset/all/">https://leetcode.com/problemset/all/</a></li><li>🎄LintCode：<a href="https://www.lintcode.com/zh-cn/">https://www.lintcode.com/zh-cn/</a></li><li>🎄51nod：<a href="http://www.51nod.com/Challenge/ProblemList.html#!#isAsc=false">http://www.51nod.com/Challenge/ProblemList.html#!#isAsc=false</a></li><li>🎄hackerrank：<a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法竞赛 </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员神器：iTerm2+Oh_My_Zsh+Tmux</title>
      <link href="/iTerm2-oh-my-zsh-tmux/"/>
      <url>/iTerm2-oh-my-zsh-tmux/</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h3 id="Iterm2-Oh-my-zsh-Tmux"><a href="#Iterm2-Oh-my-zsh-Tmux" class="headerlink" title="Iterm2 + Oh_my_zsh + Tmux"></a>Iterm2 + Oh_my_zsh + Tmux</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/iterm2.png"></p><h3 id="Every-Open-Look"><a href="#Every-Open-Look" class="headerlink" title="Every Open Look"></a>Every Open Look</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/iterm3.png"></p><h3 id="Tmux-Keep-Session-Alive"><a href="#Tmux-Keep-Session-Alive" class="headerlink" title="Tmux : Keep Session Alive"></a>Tmux : Keep Session Alive</h3><blockquote><p> Session &gt; Window &gt; Pane</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/iterm.png"></p><h3 id="Vim-Edit-file-or-Coding"><a href="#Vim-Edit-file-or-Coding" class="headerlink" title="Vim : Edit file or Coding"></a>Vim : Edit file or Coding</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/iterm4.png"></p><blockquote><p>具体如何配置，最近很忙没时间写，空闲会整理一下教程。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Vim </tag>
            
            <tag> Zsh </tag>
            
            <tag> Oh_my_zsh </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛资料整理分享</title>
      <link href="/oishare/"/>
      <url>/oishare/</url>
      
        <content type="html"><![CDATA[<h1 id="算法竞赛资料分享🤹🏼‍♀️"><a href="#算法竞赛资料分享🤹🏼‍♀️" class="headerlink" title="算法竞赛资料分享🤹🏼‍♀️"></a>算法竞赛资料分享🤹🏼‍♀️</h1><p>因为准备实习👔，今天早上整理了一下算法的课件、书籍、论文、习题</p><ul><li>不管是准备校招，进BAT🚀；</li><li>还是自学算法竞赛💼；</li><li>或者单纯的课外拓展🤷；</li></ul><p>对程序员👔而言，算法学习都是有必要的，只是可能要求深浅不同，所以，开始学起来吧🌈～</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/alo.jpg"></p><h3 id="全面收集、整理了从高中参加竞赛到现在的算法竞赛课件、论文集、书籍、习题等，并分类如下👀："><a href="#全面收集、整理了从高中参加竞赛到现在的算法竞赛课件、论文集、书籍、习题等，并分类如下👀：" class="headerlink" title="全面收集、整理了从高中参加竞赛到现在的算法竞赛课件、论文集、书籍、习题等，并分类如下👀："></a>全面收集、整理了从高中参加竞赛到现在的<code>算法竞赛课件</code>、<code>论文集</code>、<code>书籍</code>、<code>习题</code>等，并分类如下👀：</h3><blockquote><p>欢迎大家贡献你的资料丰富这个Repo</p><p>文件很多，目录很长，所以分为文件夹目录和文件树，如有不便之处，敬请谅解😣</p><p>如果对你有所帮助，请 star✨ 或者 follow👨 支持一下</p><p>算法路上加油⛽️</p><p>如有侵权，麻烦提 Issues 或联系 <a href="mailto:&#57;&#x38;&#49;&#x32;&#52;&#x32;&#x33;&#x36;&#x37;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#57;&#x38;&#49;&#x32;&#52;&#x32;&#x33;&#x36;&#x37;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a> 删改</p></blockquote><hr><h2 id="文件导图👀："><a href="#文件导图👀：" class="headerlink" title="文件导图👀："></a>文件导图👀：</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/mindmap.png"></p><h2 id="文件夹目录👀："><a href="#文件夹目录👀：" class="headerlink" title="文件夹目录👀："></a>文件夹目录👀：</h2><ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E9%AB%98%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A5%97%E4%BB%B6">数据结构套件</a>🚀</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E9%AB%98%E4%B8%AD%E7%AE%97%E6%B3%95%E5%A5%97%E4%BB%B6">算法套件</a>🌲</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E9%AB%98%E4%B8%ADC%2B%2B%20%E5%A5%97%E4%BB%B6">C++套件</a>🍟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95">基础算法</a>🤹🏼‍♀️<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6">高精度</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9A%B4%E5%8A%9B">暴力</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86">二分</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB">分治</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2">搜索</a>🌟</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83">贪心</a>🌟</li></ul></li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a>❄️<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">基础数据结构</a>💫</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91">树</a>💫</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA">图</a>💫</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97">分块</a>💫</li></ul></li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a>🎮</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/C%2B%2B">C++</a>🌈</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a>☂️</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E6%95%B0%E5%AD%A6">数学</a>🎱</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95">计算几何</a>🧠</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E4%B9%A6%E7%B1%8D">书籍</a>🍟<ul><li><code>算法</code>：<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E.pdf">数学之美</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.pdf">数据结构与算法（Java）</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8.pdf">算法竞赛</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89.pdf">算法</a>👑</li></ul></li><li><code>语言</code>：<ul><li><code>C</code>：<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/C/c%20primerplus.pdf">CPrimerPlus</a>👑</li></ul></li><li><code>C++</code>：<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/C%2B%2B">C++PrimerPlus</a>👑(TOO LARGE TO SUBMIT)</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/C%2B%2B">C++Primer</a>👑(TOO LARGE TO SUBMMIMT)</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/C%2B%2B/Effective%20C%2B%2B.pdf">Effective C++</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/C%2B%2B/Effective%20STL.pdf">Effective STL</a>👑</li></ul></li><li><code>Python</code>：<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/Python/%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5.pdf">从入门到实践</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/Python/%E6%B5%81%E7%95%85%E7%9A%84python.pdf">流畅的Python</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/Python/Effective%20Python.pdf">Effective Python</a>👑</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/blob/master/%20%E4%B9%A6%E7%B1%8D/%E8%AF%AD%E8%A8%80/Python/PythonCookbook.pdf">PythonCookbook</a>👑</li></ul></li></ul></li></ul></li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E9%A2%98">习题</a>⛄️</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86">研究性论文集</a>🎄<ul><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F1999%E8%AE%BA%E6%96%87%E9%9B%86">1999论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2000%E8%AE%BA%E6%96%87%E9%9B%86">2000论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2001%E8%AE%BA%E6%96%87%E9%9B%86">2001论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2002%E8%AE%BA%E6%96%87%E9%9B%86">2002论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2003%E8%AE%BA%E6%96%87%E9%9B%86">2003论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2004%E8%AE%BA%E6%96%87%E9%9B%86">2004论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2005%E8%AE%BA%E6%96%87%E9%9B%86">2005论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2006%E8%AE%BA%E6%96%87%E9%9B%86">2006论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2007%E8%AE%BA%E6%96%87%E9%9B%86">2007论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2008%E8%AE%BA%E6%96%87%E9%9B%86">2008论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2009%E8%AE%BA%E6%96%87%E9%9B%86">2009论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2013%E8%AE%BA%E6%96%87%E9%9B%86">2013论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2014%E8%AE%BA%E6%96%87%E9%9B%86">2014论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2015%E8%AE%BA%E6%96%87%E9%9B%86">2015论文集</a>🧳</li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E7%A0%94%E7%A9%B6%E6%80%A7%E8%AE%BA%E6%96%87%E9%9B%86/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2018%E8%AE%BA%E6%96%87%E9%9B%86">2018论文集</a>🧳</li></ul></li><li><a href="https://github.com/Xunzhuo/OI_Sharing/tree/master/%20%E6%9D%82">杂</a>🍀</li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/alpha.jpeg"></p><hr><h2 id="👔详细文件目录👀："><a href="#👔详细文件目录👀：" class="headerlink" title="👔详细文件目录👀："></a>👔详细文件目录👀：</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br></pre></td><td class="code"><pre><span class="line">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span><br><span class="line">|<span class="strong">____</span> 数学</span><br><span class="line">| |<span class="strong">____</span>数论初步.pptx</span><br><span class="line">| |<span class="strong">____</span>数论初窥<span class="emphasis">_谢兴宇.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>简单易懂的质数筛法_</span>陈牧歌.pdf</span><br><span class="line">| |<span class="strong">____</span>数论<span class="emphasis">_杨定澄.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>线性筛法与积性函数_</span>贾志鹏.pptx</span><br><span class="line">| |<span class="strong">____</span>具体数学(part 1)<span class="emphasis">_赵启阳.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>莫比乌斯反演_</span>方泓杰.pdf</span><br><span class="line">| |<span class="strong">____</span>形形色色的“数学题”<span class="emphasis">_刘汝佳.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>类欧几里得算法_</span>洪华敦.pdf</span><br><span class="line">| |<span class="strong">____</span>博弈论和SG函数<span class="emphasis">_方泓杰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数论 2019.03.02.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>离散数学在信息学竞赛中的运用_</span>未知作者.ppt</span><br><span class="line">| |<span class="strong">____</span>对拟阵的初步研究<span class="emphasis">_刘雨辰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>莫比乌斯反演_</span>王天懿.ppt</span><br><span class="line">| |<span class="strong">____</span>浅谈一些概率期望问题<span class="emphasis">_钟皓曦.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>整数与多项式.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数学_</span>翁家翌 &amp; 黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>数论入门<span class="emphasis">_阮行止.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>高斯消元解XOR方程组_</span>莫涛.ppt</span><br><span class="line">| |<span class="strong">____</span>OI 中的超现实数和不平等博弈问题<span class="emphasis">_杜瑜皓.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>组合游戏略述——浅谈SG游戏的若干拓展及变形_</span>贾志豪.ppt</span><br><span class="line">| |<span class="strong">____</span>2017计算几何.pptx</span><br><span class="line">| |<span class="strong">____</span>计数问题选讲<span class="emphasis">_陈立杰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>2016组合数学.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数论及其应用_</span>周聿浩 &amp; 黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>ACM中的数学问题<span class="emphasis">_林舒.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>概率和期望_</span>方泓杰.pdf</span><br><span class="line">| |<span class="strong">____</span>数学<span class="emphasis">_易健驰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>最近一年 THU 命题组出过的数学题选讲_</span>翁家翌.pdf</span><br><span class="line">| |<span class="strong">____</span>数学杂题选讲<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>组合计数问题_</span>方泓杰.pdf</span><br><span class="line">| |<span class="strong">____</span>数学相关.pdf</span><br><span class="line">| |<span class="strong">____</span>OI中的数学<span class="emphasis">_金靖.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>IOI2013与博弈论_</span>王康宁.pptx</span><br><span class="line">| |<span class="strong">____</span>具体数学(part 2)<span class="emphasis">_赵启阳.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>组合数学——母函数与递推_</span>朱全民.ppt</span><br><span class="line">| |<span class="strong">____</span>Fourier transform<span class="emphasis">_郭晓旭.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>Primality Test_</span>吴争锴.pptx</span><br><span class="line">| |<span class="strong">____</span>多项式及求和<span class="emphasis">_杜瑜皓.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>OI中的概率_</span>黄涛岸.ppt</span><br><span class="line">| |<span class="strong">____</span>计算几何.pdf</span><br><span class="line">| |<span class="strong">____</span>计数与期望问题选讲<span class="emphasis">_陈立杰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>概率与随机化算法_</span>钟诚.pptx</span><br><span class="line">| |<span class="strong">____</span>一些数学知识<span class="emphasis">_王若松.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>博弈论2018.pptx</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>算法套件</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第2章  数据排序(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第1章  高精度计算(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第9章  第3节 动态规划背包问题(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第4章  递归算法(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第8章  广度优先搜索.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第3章  递推算法(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第5章  搜索与回溯算法(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第6章  贪心算法.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第9章  第1-2节 动态规划基础(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第7章  分治算法(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第9章  第4节 动态规划经典题(C++版).ppt</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>计算几何</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>二维计算几何相关算法与实战应用_</span>徐明宽.pptx</span><br><span class="line">| |<span class="strong">____</span>计算几何及其应用<span class="emphasis">_林厚从.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算几何_</span>翁家翌 &amp; 黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>计算几何<span class="emphasis">_钟思思.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算几何基础知识_</span>陈胤伯.pdf</span><br><span class="line">| |<span class="strong">____</span>叉积的应用<span class="emphasis">_卓亮.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算几何_</span>未知作者.ppt</span><br><span class="line">| |<span class="strong">____</span>计算几何<span class="emphasis">_邓东.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算几何讨论_</span>胡伟栋.pptx</span><br><span class="line">| |<span class="strong">____</span>计算几何<span class="emphasis">_未知作者 2.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>半平面交的新算法及其实用价值_</span>朱泽园.ppt</span><br><span class="line">| |<span class="strong">____</span>计算几何<span class="emphasis">_黄涛岸.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算几何教程_</span>北大ACM.ppt</span><br><span class="line">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span><br><span class="line">|<span class="strong">____</span>数据结构套件</span><br><span class="line">| |<span class="strong">____</span>第1章  栈(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第3章  第1-2节 树及二叉树(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第2章  队列(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第4章  第6节 最小生成树(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第4章  第1-2节 图论算法(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第4章  第3-4节 图论算法(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第3章  第3节 堆及其应用(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第4章  第7节 拓扑排序与关键路径(C++版).ppt</span><br><span class="line">| |<span class="strong">____</span>第4章  第5节 并查集(C++版).ppt</span><br><span class="line">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span><br><span class="line">|<span class="strong">____</span> 书籍</span><br><span class="line">| |<span class="strong">____</span>算法（第四版）.pdf</span><br><span class="line">| |<span class="strong">____</span>算法竞赛入门经典.pdf</span><br><span class="line">| |<span class="strong">____</span>数学之美.pdf</span><br><span class="line">| |<span class="strong">____</span>数据结构与算法.pdf</span><br><span class="line">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span><br><span class="line">|<span class="strong">____</span>动态规划</span><br><span class="line">| |<span class="strong">____</span>动态规划入门.pptx</span><br><span class="line">| |<span class="strong">____</span>DP总结<span class="emphasis">_翁家翌.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>状态压缩类型动态规划_</span>朱全民..ppt</span><br><span class="line">| |<span class="strong">____</span>动态规划优化.pptx</span><br><span class="line">| |<span class="strong">____</span>DP专题评讲第一部分.pptx</span><br><span class="line">| |<span class="strong">____</span>动态规划问题优化模式2<span class="emphasis">_杨志灿.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>dp专题讲题后半.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>背包九讲.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划的优化_</span>谢兴宇.pdf</span><br><span class="line">| |<span class="strong">____</span>背包与树形<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划及其应用(二)_</span>杨志灿.pptx</span><br><span class="line">| |<span class="strong">____</span>动态规划优化<span class="emphasis">_方泓杰.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划引论_</span>阮行止.pdf</span><br><span class="line">| |<span class="strong">____</span>动态规划入门<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划入门_</span>谢兴宇.pdf</span><br><span class="line">| |<span class="strong">____</span>动态规划从入门到精通（Ⅰ）.ppt</span><br><span class="line">| |<span class="strong">____</span>基于连通性状态压缩的动态规划问题<span class="emphasis">_陈丹琦.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>状压与区间_</span>黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>动态规划的拓扑延拓<span class="emphasis">_谢兴宇.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划中的一些优化_</span>孟泽楠.ppt</span><br><span class="line">| |<span class="strong">____</span>组合计数与动态规划<span class="emphasis">_曹钦翔.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划_</span>钱雨杰.pptx</span><br><span class="line">| |<span class="strong">____</span>dp专题讲义.pdf</span><br><span class="line">| |<span class="strong">____</span>均摊分析简介.ppt</span><br><span class="line">| |<span class="strong">____</span>树形动态规划<span class="emphasis">_朱全民.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划_</span>叶国平.ppt</span><br><span class="line">| |<span class="strong">____</span>动态规划优化<span class="emphasis">_翁家翌 &amp; 黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>树形数位动态规划_</span>黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>dp入门讲解.pptx</span><br><span class="line">| |<span class="strong">____</span>动态规划.pdf</span><br><span class="line">| |<span class="strong">____</span>树形动态规划<span class="emphasis">_未知作者.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划_</span>方泓杰.pdf</span><br><span class="line">| |<span class="strong">____</span>动态规划从入门到精通（Ⅱ）.pptx</span><br><span class="line">| |<span class="strong">____</span>评注.pdf</span><br><span class="line">| |<span class="strong">____</span>动态规划入门与典型模型.ppt</span><br><span class="line">| |<span class="strong">____</span>常见DP模型讲解.pptx</span><br><span class="line">| |<span class="strong">____</span>动态规划<span class="emphasis">_李远韬.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>动态规划及其应用(一)_</span>杨志灿.ppt</span><br><span class="line">| |<span class="strong">____</span>DP入门<span class="emphasis">_阮行止.pptx</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>基础算法</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>搜索</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>深搜.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>万能的解题金钥匙——搜索_</span>未知作者.ppt</span><br><span class="line">| | |<span class="strong">____</span>匹配算法在搜索问题中的巧用<span class="emphasis">_楼天城.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>人工智能中的搜索问题_</span>丁铭.pptx</span><br><span class="line">| | |<span class="strong">____</span>高级搜索算法.pdf</span><br><span class="line">| | |<span class="strong">____</span>深搜之拯救少林神棍.pdf</span><br><span class="line">| | |<span class="strong">____</span>广搜.pdf</span><br><span class="line">| | |<span class="strong">____</span>搜索及其优化<span class="emphasis">_杨志灿.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>搜索问题.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>搜索专题.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>二分</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>二分.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>复杂度分析</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>时间复杂度经典解说_</span>未知作者.ppt</span><br><span class="line">| | |<span class="strong">____</span>复杂度理论、排序、模拟<span class="emphasis">_阮行止.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>分治</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>分治_</span>lyy.pptx</span><br><span class="line">| | |<span class="strong">____</span>NOIP归纳、贪心、二分、数论<span class="emphasis">_未知作者.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>分治算法初探_</span>方泓杰.pdf</span><br><span class="line">| | |<span class="strong">____</span>分治.pdf</span><br><span class="line">| | |<span class="strong">____</span>搜索分治贪⼼暴⼒和构造<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>高精度</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>6. 模拟与高精度计算.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>贪心</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>贪心问题选讲_</span>王天懿.ppt</span><br><span class="line">| | |<span class="strong">____</span>贪心数学普及<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>贪心杂题选讲_</span>黄哲威.pdf</span><br><span class="line">| |<span class="strong">____</span>暴力</span><br><span class="line">| | |<span class="strong">____</span>暴力出奇迹<span class="emphasis">_翁家翌.pdf</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>C++ 套件</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第4章  循环结构(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第5章  数组(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第1章~1.PPT</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第6章  函数递推递归(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第3章  选择结构(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第7章  文件和结构体(C++版).ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第2章~1.PPT</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第8章  C++实用技巧与模版库.ppt</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span> 字符串</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>“h”函数_</span>未知作者.pptx</span><br><span class="line">| |<span class="strong">____</span>有限状态自动机<span class="emphasis">_乔明达.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>字符串1.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>字符串试题评讲.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>string_</span>2.3.pdf</span><br><span class="line">| |<span class="strong">____</span>字符串讲座.pptx</span><br><span class="line">| |<span class="strong">____</span>字符串匹配.pdf</span><br><span class="line">| |<span class="strong">____</span>多串匹配算法及其启示<span class="emphasis">_朱泽园.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>后缀自动机_</span>陈立杰.pptx</span><br><span class="line">| |<span class="strong">____</span>HASH函数及其应用<span class="emphasis">_朱全民.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>字符串.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>字符串与搜索专题部分题解.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>后缀数组——处理字符串的有力工具_</span>罗穗骞.ppt</span><br><span class="line">| |<span class="strong">____</span>AC自动机.txt</span><br><span class="line">| |<span class="strong">____</span>kmp.ppt</span><br><span class="line">| |<span class="strong">____</span>字符串算法选讲<span class="emphasis">_金策.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>形式语言与自动机_</span>茹逸中.pptx</span><br><span class="line">| |<span class="strong">____</span>自然语言处理与词向量<span class="emphasis">_黎才华.pptx</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>数据结构</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>树</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>线段树的合并_</span>黄嘉泰.pptx</span><br><span class="line">| | |<span class="strong">____</span>线段树与树状数组.pdf</span><br><span class="line">| | |<span class="strong">____</span>替罪羊树<span class="emphasis">_未知作者.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>K-D Tree_</span>翁家翌.pdf</span><br><span class="line">| | |<span class="strong">____</span>树链剖分<span class="emphasis">_王天懿.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>线段树_</span>方泓杰.pdf</span><br><span class="line">| | |<span class="strong">____</span>动态序列与动态树问题——浅谈几种常用数据结构<span class="emphasis">_莫凡.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>平衡树_</span>王天懿.pptx</span><br><span class="line">| | |<span class="strong">____</span>线段树<span class="emphasis">_浙大ACM.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>线段树_</span>树状数组I.ppt</span><br><span class="line">| | |<span class="strong">____</span>统计的力量——线段树全接触<span class="emphasis">_张昆玮.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>Splay树及其应用_</span>朱全民.ppt</span><br><span class="line">| | |<span class="strong">____</span>二叉树与其应用<span class="emphasis">_朱全民.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>k-d tree在传统OI数据结构题中的应用_</span>任之洲.pdf</span><br><span class="line">| | |<span class="strong">____</span>线段树<span class="emphasis">_翁家翌 &amp; 黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>左偏树的特点及其应用_</span>黄源河.ppt</span><br><span class="line">| | |<span class="strong">____</span>最小生成树.pdf</span><br><span class="line">| |<span class="strong">____</span>基础数据结构</span><br><span class="line">| | |<span class="strong">____</span>基础数据结构<span class="emphasis">_阮行止.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>基本数据结构在信息学竞赛中的应用_</span>朱晨光.ppt</span><br><span class="line">| | |<span class="strong">____</span>并查集.pdf</span><br><span class="line">| | |<span class="strong">____</span>根号算法杂谈<span class="emphasis">_杨志灿.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高级数据结构入门.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>可并堆_</span>王天懿.ppt</span><br><span class="line">| | |<span class="strong">____</span>高级数据结构.pptx</span><br><span class="line">| | |<span class="strong">____</span>解决动态统计问题的两把利刃——剖析线段树与矩形切割<span class="emphasis">_薛矛.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>提高组数据结构_</span>吉如一.pdf</span><br><span class="line">| | |<span class="strong">____</span>数据结构入门<span class="emphasis">_许昊然.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>匹配.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>莫队算法_</span>刘孟博.pptx</span><br><span class="line">| | |<span class="strong">____</span>数据结构基础.ppt</span><br><span class="line">| | |<span class="strong">____</span>数据结构<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>分块</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>分块算法及简单扩展_</span>黄哲威.pdf</span><br><span class="line">| | |<span class="strong">____</span>分块算法<span class="emphasis">_未知作者.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>图论</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>树链剖分及其应用_</span>蒋一瑶.pptx</span><br><span class="line">| | |<span class="strong">____</span>弦图与区间图<span class="emphasis">_陈丹琦.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>最短路径.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论知识及其应用_</span>刘弈.ppt</span><br><span class="line">| | |<span class="strong">____</span>网络流<span class="emphasis">_魏越闽.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>NOIP知识点串讲-图论(一)_</span>Colin.pdf</span><br><span class="line">| | |<span class="strong">____</span>图论abc.ppt</span><br><span class="line">| | |<span class="strong">____</span>通信题与压缩算法.pdf</span><br><span class="line">| | |<span class="strong">____</span>浅析二分图匹配在信息学竞赛中的应用<span class="emphasis">_王俊.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图 树.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论入门与最短路_</span>黄哲威.pdf</span><br><span class="line">| | |<span class="strong">____</span>网络流建模<span class="emphasis">_周尚彦.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>线性规划与网络流_</span>曹钦翔.pptx</span><br><span class="line">| | |<span class="strong">____</span>线性代数与图.pdf</span><br><span class="line">| | |<span class="strong">____</span>生成树和拓扑排序<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>两极相通——浅析最大最小定理在信息学竞赛中的应用_</span>周冬.ppt</span><br><span class="line">| | |<span class="strong">____</span>图的连通<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>浅谈一些树形问题_</span>高胜寒.ppt</span><br><span class="line">| | |<span class="strong">____</span>图论复习<span class="emphasis">_未知作者.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图连通性若干拓展问题探讨_</span>李煜东.pptx</span><br><span class="line">| | |<span class="strong">____</span>浅谈信息学竞赛中的线性规划——简洁高效的单纯形法实现与应用<span class="emphasis">_李宇骞.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>分层图思想及其在信息学竞赛中的应用_</span>肖天.ppt</span><br><span class="line">| | |<span class="strong">____</span>图论DEF+N.pptx</span><br><span class="line">| | |<span class="strong">____</span>倍增算法及其应用<span class="emphasis">_未知作者.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论专题之生成树_</span>唐文斌.ppt</span><br><span class="line">| | |<span class="strong">____</span>图论<span class="emphasis">_李煜东.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>强连通分量.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>树分治_</span>黄哲威.pdf</span><br><span class="line">| | |<span class="strong">____</span>树上倍增<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>拟阵选讲_</span>董宏华.pdf</span><br><span class="line">| | |<span class="strong">____</span>网络流算法.pdf</span><br><span class="line">| | |<span class="strong">____</span>某静态的超仙人掌<span class="emphasis">_吴作凡 &amp; 倪星宇.pptx</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论基础.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论入门_</span>谢兴宇.pdf</span><br><span class="line">| | |<span class="strong">____</span>由对称性解2-SAT问题<span class="emphasis">_未知作者.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>图论基础与网络流习题集锦_</span>朱睿.pptx</span><br><span class="line">| | |<span class="strong">____</span>二分图与匹配<span class="emphasis">_黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>网络流_</span>未知作者.ppt</span><br><span class="line">| | |<span class="strong">____</span>网络流<span class="emphasis">_周聿浩 &amp; 黄哲威.pdf</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span> 题</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>题目推荐_</span>刘汝佳.pptx</span><br><span class="line">| |<span class="strong">____</span>ulam&#x27;game <span class="emphasis">_rzz_</span>2017.2.4.pdf</span><br><span class="line">| |<span class="strong">____</span>数据结构专题（K-M）：翁亦旸题目分析.pptx</span><br><span class="line">| |<span class="strong">____</span>普及组近5年NOIP试题分析<span class="emphasis">_叶国平.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>图论专题(A-D)：陈鑫题目分析.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>2018ds_</span>A-D.pdf</span><br><span class="line">| |<span class="strong">____</span>ParameterizedAlgorithm.pptx</span><br><span class="line">| |<span class="strong">____</span>I-K题题解.pptx</span><br><span class="line">| |<span class="strong">____</span>图论JKL题解.ppt</span><br><span class="line">| |<span class="strong">____</span>吴旭东<span class="emphasis">_图论专题部分题解.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>校赛题解 .ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>Combinatorics.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>图论专题-GHIO题解.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数据结构I-R题题解.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>XJBS.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数据结构专题（A-C）：张冠斓题目分析.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数据结构专题（N-Q）：金欧文题目分析.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>IOI2016试题讨论.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数据结构专题（D-J）：李子通题目分析.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>数据结构E-H题题解.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>第二次讲题.pptx</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span>C++</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>容器总结.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>C++_</span>STL使用例子大全.pdf</span><br><span class="line">| |<span class="strong">____</span>关于scanf  gets fscanf fopen等系列函数在VS中不安全要使用<span class="emphasis">_s的解决方法.docx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>C++的pb_</span>ds库在OI中的应用<span class="emphasis">_于纪平.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>C++.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>C++模板与STL库介绍.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>c++容器使用经验总结.doc</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span> 杂</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>稍微进阶一点的套路_</span>阮行止.pptx</span><br><span class="line">| |<span class="strong">____</span>提交答案型题目解题方法<span class="emphasis">_赵金昊.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>计算机系统与ACM.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>浅析非完美算法在信息学竞赛中的应用_</span>胡伟栋.ppt</span><br><span class="line">| |<span class="strong">____</span>构造<span class="emphasis">_沈洋.pptx</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>几道构造相关的题目_</span>吉如一.pdf</span><br><span class="line">| |<span class="strong">____</span>随机算法选讲<span class="emphasis">_张恒捷.pptx</span></span><br><span class="line"><span class="emphasis">🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲🌲</span></span><br><span class="line"><span class="emphasis">|<span class="strong">____</span> 研究性论文集</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2002论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨旻旻--构造法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>杨旻旻.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张宁--遗传算法的特点及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张宁.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张宁.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>戴德承--目标转化思想”的若干应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>戴德承.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>何林--猜想及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>何林.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>何林.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>何江舟--用高斯消元解线性方程组</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>何江舟.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张一飞--透析一类搏弈游戏的解答过程</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张一飞.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张一飞.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>方奇--浅谈必要条件的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>方奇.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>孙林春--从《parity》的解法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>孙林春.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄芸</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄芸.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张家琳--多项式乘法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张家琳.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>俞玮--ulam的游戏及编码</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>俞玮.pps</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>符文杰--排序网络</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>符文杰.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>王知昆--搜索顺序的选择</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王知昆.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>骆骥--浅析解对策问题的两种思路</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>骆骥.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李睿--二分法与统计问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李睿.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李睿.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周文超--树结构在程序设计中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周文超.PPT</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>许智磊--二分，再二分</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>许智磊.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李澎煦--半平面交的算法及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李澎煦.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李澎煦.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>金恺--浅谈网络流算法的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>金恺.PPT</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>孙方成--偶图的算法及应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>孙方成.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>孙方成.doc</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2006论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱晨光--基本数据结构在信息学竞赛中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱晨光.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱晨光.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>余远铭--最短路算法及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>余远铭.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>余远铭.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>layout.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Dijkstra.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>exchange.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>bic.pas</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>陈首元--维护森林连通性——动态树</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陈首元.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陈首元.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱泽园--半平面交的新算法及其实用价值</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱泽园.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱泽园.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱泽园.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>王栋</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王栋--浅析平面voronoi图的构造及应用.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王栋.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>voronoi.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>zju2009.dpr</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄晓愉--信息学竞赛中搜索问题的常见优化技巧</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄晓愉.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>weight-build.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>weight1.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>weight2.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>weight-check.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>zju1937-1.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>zju1937-2.pas</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄晓愉.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>俞鑫--棋盘中的棋盘——浅谈棋盘的分割思想</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>俞鑫.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>JUMP.PAS</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>GAMERS.PAS</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>俞鑫.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄劲松--贪婪的动态规划——浅谈贪心思想在动态规划中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄劲松.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄劲松.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>汤泽-从一类单调性问题看算法的优化</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>汤泽.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>汤泽.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周戈林--浅谈类比思想</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周戈林.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周戈林.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>王赟--tire图的构造活用及改进</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王赟.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王赟.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>胡伟栋--演讲的若干建议</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>胡伟栋.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>胡伟栋（附）.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周以苏--反汇编在常数优化因子中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周以苏.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周以苏.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>唐文斌--浅谈“调整”思想在信息学竞赛中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>唐文斌.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>唐文斌.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>冯威--数与图的完美结合</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>冯威.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>冯威.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高逸涵--对一道题目的深入分析</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>高逸涵.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>贾由--由图论问题浅析算法优化</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>贾由.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>贾由.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李天翼--从特殊情况考虑</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李天翼.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李天翼.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李天翼.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>汪晔--信息学中的参考系与坐标系</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>汪晔.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>龙凡--一类猜数问题的研究</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>龙凡.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>龙凡.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>陈启峰--一张一弛，解题之道</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>附件</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>消防站解题报告.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>骑士解题报告.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>友好的动物的解题报告.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陈启峰.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陈启峰.doc</span></span><br><span class="line"><span class="emphasis">|   </span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2007论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>day2</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.刘家骅《浅谈随机化在信息学竞赛中的应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>9.周冬《生成树的计数及其应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>3.郭华阳《RMQ与LCA问题》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>4.刘雨辰《对拟阵的初步研究》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>1.杨弋《Hash在信息学竞赛中的一类应用》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>7.胡伯涛《最小割模型在信息学竞赛中的应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.何森《浅谈数据的合理组织》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.何森《浅谈数据的合理组织》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>1.杨弋《Hash在信息学竞赛中的一类应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>4.刘雨辰《对拟阵的初步研究》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>9.周冬《生成树的计数及其应用》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.刘家骅《浅谈随机化在信息学竞赛中的应用》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>7.胡伯涛《最小割模型在信息学竞赛中的应用》.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>5.陈雪《问题中的变与不变》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>8.陈瑜希《多角度思考 创造性思维》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>2.古楠《平面嵌入》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>2.古楠《平面嵌入》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>5.陈雪《问题中的变与不变》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>8.陈瑜希《多角度思考 创造性思维》.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>day1</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>4.余江伟《如何解决好动态统计问题》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.陈启峰《Size Balanced Tree》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.李宇骞《浅谈信息学竞赛中的线性规划——简洁高效的单纯形法实现与应用》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>8.杨哲《凸完全单调性的一个加强与应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>7.袁昕颢《动态树问题及其应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.李宇骞《浅谈信息学竞赛中的线性规划——简洁高效的单纯形法实现与应用》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>3.仇荣琦《欧拉回路性质与应用探究》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>1.高逸涵《与圆有关的离散化方法》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>2.王晓珂《解析一类组合游戏》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>5.杨沐《浅析信息学中的“分”与“合”》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>9.王欣上《浅谈基于分层思想的网络流算法》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.陈启峰《Size Balanced Tree》.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>9.王欣上《浅谈基于分层思想的网络流算法》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>5.杨沐《浅析信息学中的“分”与“合”》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>1.高逸涵《与圆有关的离散化方法》.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>2.王晓珂《解析一类组合游戏》.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>3.仇荣琦《欧拉回路性质与应用探究》.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2003论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>金恺--探寻深度优先搜索中的优化问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>金恺.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>饶向荣--剖析一道字符串匹配问题的解题过程</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>饶向荣.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>邵烜程--数学思想助你一臂之力</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>邵烜程.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>邵烜程.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>林希德--寻找最大重复子串</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>林希德.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>林希德.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>许智磊--浅谈补集转化思想在统计问题中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>许智磊.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>许智磊.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>项荣璟--例析动态规划的个性化优化</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>项荣璟.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>何林--一类称球问题的解法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>何林.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>GAME.PAS</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>何林.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>刘才良--平面图在信息学中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>刘才良.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>伍昱--由对称性解2-SAT问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>伍昱.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>姜尚仆--模线性方程的应用，用数论方法解决整数问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>姜尚仆.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张宁--猜数问题的研究</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>TL1.PAS</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Tl3.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>TL2.PAS</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张宁.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张宁.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>侯启明--信息论在信息学竞赛中的简单应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>侯启明.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>侯启明.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张云亮--论对题目中算法的选择</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张云亮.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>TURNOVER.PAS</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>MYTURN.PAS</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张云亮.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>王知昆--浅谈用极大化思想解决最大子矩形问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>附件.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王知昆.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>王知昆.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高正宇--浅谈问答式交互问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>高正宇.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周源--浅析“最小表示法”思想在字符串循环同构问题中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周源.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>周源.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>陆可昱--长方体的体积并</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陆可昱.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>方奇--染色法和构造法在棋盘上的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>方奇.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>方奇.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>刘一鸣--一类搜索问题的优化思想——数据的有序化</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>刘一鸣.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>刘一鸣.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>雷环中--结果提交类问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>雷环中.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>雷环中.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队1999论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>邵铮--数学模型的建立、比较和应用.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>陈宏--数据结构的选择与算法效率.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>齐鑫--搜索方法中的剪枝优化.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨帆--准确性、全面性、美观性.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>来煜坤--把握本质，灵活运用——动态规划的深入探讨.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周咏基论随机化算法的原理与设计.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>石润婷--隐蔽化、多维化、开放化.doc</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2014论文集.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2008论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>Day2</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.周冬《两极相通——浅析最大—最小定理在信息学竞赛中的应用》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>冬令营论文演示文稿.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.余林韵《运用化归思想解决信息学中的数列问题》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Ural1309.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>推荐网站.txt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>count.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Ural1396.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>讲稿.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>余林韵_</span>运用化归思想解决信息学中的数列问题.ppt</span><br><span class="line">| | | | |<span class="strong">____</span>附件数学相关知识.pdf</span><br><span class="line">| | | | |<span class="strong">____</span>论文.pdf</span><br><span class="line">| | | |<span class="strong">____</span>2.高逸涵《部分贪心思想在信息学竞赛中的应用》</span><br><span class="line">| | | | |<span class="strong">____</span>部分贪心在信息学竞赛中的应用.doc</span><br><span class="line">| | | | |<span class="strong">____</span>部分贪心在信息学竞赛中的应用.ppt</span><br><span class="line">| | | |<span class="strong">____</span>8.高亦陶《从立体几何问题看降低编程复杂度》</span><br><span class="line">| | | | |<span class="strong">____</span>从立体几何问题看降低编程复杂度.ppt</span><br><span class="line">| | | |<span class="strong">____</span>9.苏煜《对块状链表的一点研究》</span><br><span class="line">| | | | |<span class="strong">____</span>附件</span><br><span class="line">| | | | | |<span class="strong">____</span>necklace.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>KeyInsertion.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>KeyInsertion.blocklist.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>sort.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>sequence.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>editor.cpp</span><br><span class="line">| | | | | |<span class="strong">____</span>yly.NOI2007solutionV3.rar</span><br><span class="line">| | | | | |<span class="strong">____</span>happybirthday.cpp</span><br><span class="line">| | | | |<span class="strong">____</span>对块状链表的一点研究.ppt</span><br><span class="line">| | | | |<span class="strong">____</span>对块状链表的一点研究.doc</span><br><span class="line">| | | |<span class="strong">____</span>4.张煜承《一类算法复合的方法》</span><br><span class="line">| | | | |<span class="strong">____</span>一类算法复合的方法.ppt</span><br><span class="line">| | | | |<span class="strong">____</span>一类算法复合的方法.pdf</span><br><span class="line">| | | | |<span class="strong">____</span>一类算法复合的方法.docx</span><br><span class="line">| | | |<span class="strong">____</span>7.任一恒《非完美算法初探》</span><br><span class="line">| | | | |<span class="strong">____</span>非完美算法初探——任一恒.doc</span><br><span class="line">| | | | |<span class="strong">____</span>非完美算法初探——任一恒.ppt</span><br><span class="line">| | | |<span class="strong">____</span>5.陈瑜希《Pólya计数法的应用》</span><br><span class="line">| | | | |<span class="strong">____</span>pálya计数法的应用.ppt</span><br><span class="line">| | | | |<span class="strong">____</span>pálya计数法的应用.doc</span><br><span class="line">| | | |<span class="strong">____</span>1.程芃祺《计算几何中的二分思想》</span><br><span class="line">| | | | |<span class="strong">____</span>计算几何中的二分思想.doc</span><br><span class="line">| | | | |<span class="strong">____</span>计算几何中的二分思想.ppt</span><br><span class="line">| | | |<span class="strong">____</span>3.陈丹琦《基于连通性状态压缩的动态规划问题》</span><br><span class="line">| | | | |<span class="strong">____</span>基于连通性状态压缩的动态规划问题<span class="emphasis">_Cdq.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>Day1</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>2.郑暾《平衡规划——浅析一类平衡思想的应用》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>pku3237.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>pku2103.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>catch.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>平衡规划.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>平衡规划.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>ural1099</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1099_</span>10.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_20_</span>10.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_10_</span>10.txt</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_5_</span>5.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_5_</span>10.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_10_</span>10.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_20_</span>10.txt</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_10.txt</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1099_</span>5<span class="emphasis">_10.txt</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1099_</span>5<span class="emphasis">_5.txt</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1099_</span>50.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_20.txt</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1099_</span>50.txt</span><br><span class="line">| | | | | |<span class="strong">____</span>gen.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>ural1099<span class="emphasis">_20.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>ural1099.dpr</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>4.顾研《浅谈随机化思想在几何问题中的应用》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈随机化思想在几何问题中的应用.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈随机化思想在几何问题中的应用.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>9.周小博《浅谈信息学竞赛中的区间问题》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈信息学竞赛中的区间问题.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈信息学竞赛中的区间问题.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>1.曹钦翔《数据结构的提炼与压缩》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>论文.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>目录.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>数据结构的提炼与压缩.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>封面.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>10.俞华程《矩阵乘法在信息学中的应用》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>矩阵乘法.pdf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>slide.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>7.方戈《浅析信息学竞赛中一类与物理有关的问题》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>ars.cpp</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>water tanks.pdf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>3D_</span>Music.doc</span><br><span class="line">| | | | |<span class="strong">____</span>ars longa.pdf</span><br><span class="line">| | | | |<span class="strong">____</span>浅析信息学竞赛中一类与物理有关的问题.doc</span><br><span class="line">| | | | |<span class="strong">____</span>3D<span class="emphasis">_Music.cpp</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>tanks_</span>2.cpp</span><br><span class="line">| | | | |<span class="strong">____</span>tanks<span class="emphasis">_1.cpp</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅析信息学竞赛中一类与物理有关的问题.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>5.周梦宇《码之道——浅谈信息学竞赛中的编码与译码问题》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>码之道.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>码之道.pptx</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>8.吕子鉷《浅谈最短径路问题中的分层思想》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈最短径路问题中的分层思想.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈最短路径问题中的分层思想.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>6.肖汉骏《例谈信息学竞赛分析中的“深”与“广”》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>讲稿.doc</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>肖汉骏论文.pdf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>HunkShaw.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>3.刘弈《浅谈信息学中状态的合理设计与应用》</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈信息学中状态的合理设计与应用.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>例题程序</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>Shoot_</span>Your<span class="emphasis">_Gun.dpr</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>Banal_</span>Tickets.dpr</span><br><span class="line">| | | | | |<span class="strong">____</span>Square<span class="emphasis">_Roots.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈信息学中状态的合理设计与应用.doc</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2009论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>6.李骥扬《线段跳表——跳表的一个拓展》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>线段跳表——跳表的一个拓展.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>线段跳表——跳表的一个拓展.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>附件.rar</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>7.汤可因《浅析竞赛中一类数学期望问题的解决方法》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅析竞赛中一类数学期望问题的解决方法.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅析竞赛中一类数学期望问题的解决方法.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>2.贾志豪《组合游戏略述——浅谈SG游戏的若干拓展及变形》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>组合游戏略述——浅谈SG游戏的若干拓展及变形.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>组合游戏略述——浅谈SG游戏的若干拓展及变形.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>14.毛杰明《母函数的性质及应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>母函数的性质及应用.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>母函数的性质及应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>12.方展鹏《浅谈如何解决不平等博弈问题》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈如何解决不平等博弈问题.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈如何解决不平等博弈问题.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>15.董华星《浅析字母树在信息学竞赛中的应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅析字母树在信息学竞赛中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>display</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>aeop.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gdiplus.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>kgdi.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>kfretype.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>msvcp60.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>kfc12.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>aeoplayer.exe</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>kso10.dll</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>thesis.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>1.武森《浅谈信息学竞赛中的“0”和“1”》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>论文ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>浅谈信息学竞赛中的“0”和“1”.ppt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Tree5.swf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Insert3.swf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Insert1.swf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Search1.swf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Search2.swf</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>TreeInsert.swf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈信息学竞赛中的“0”和“1”.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>19.金斌《欧几里得算法的应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>欧几里得算法的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>slide.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>10.漆子超《分治算法在树的路径问题中的应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>分治算法在树的路径问题中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>分治算法在树的路径问题中的应用.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>16.梅诗珂《信息学竞赛中概率问题求解初探》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>信息学竞赛中概率问题求解初探.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>信息学竞赛中概率问题求解初探.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>11.罗穗骞《后缀数组——处理字符串的有力工具》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>后缀数组——处理字符串的有力工具.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>附件</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>附件3---源程序</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku3261</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku3261_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku3261<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku3294</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku3294_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku3294<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1297</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>ural1297_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>ural1297<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>spoj694</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>spoj694_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>spoj694<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>spoj687</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>spoj687_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>spoj687<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>spoj220</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>spoj220_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>spoj220<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku3415</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku3415_</span>da.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku3415<span class="emphasis">_dc3.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku1743</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku1743_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku1743<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku2774</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku2774_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku2774<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>ural1517</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>ural1517_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>ural1517<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>pku1226</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>pku1226_</span>dc3.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>pku1226<span class="emphasis">_da.cpp</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>spoj705</span></span><br><span class="line"><span class="emphasis">| | | | | | |<span class="strong">____</span>spoj705_</span>da.cpp</span><br><span class="line">| | | | | | |<span class="strong">____</span>spoj705<span class="emphasis">_dc3.cpp</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>附件1---倍增算法和dc3算法完整代码</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>da.h</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>dc3.h</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>附件2---题目</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>Timus Online Judge_</span> Problem 1297.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>3294 -- Life Forms.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>2774 -- Long Long Message.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>Sphere Online Judge (SPOJ) - Problem DISUBSTR.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>Sphere Online Judge (SPOJ) - Problem PHRASES.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>3415 -- Common Substrings.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>Sphere Online Judge (SPOJ) - Problem REPEATS.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>1743 -- Musical Theme.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>3261 -- Milk Patterns.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>Sphere Online Judge (SPOJ) - Problem SUBST1.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>1226 -- Substrings.mht</span><br><span class="line">| | | | | |<span class="strong">____</span>Timus Online Judge<span class="emphasis">_ Problem 1517.mht</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>2406 -- Power Strings.mht</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>3693 -- Maximum repetition substring.mht</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>后缀数组——处理字符串的有力工具.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>附件.rar</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>3.徐持衡《浅谈几类背包题》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈几类背包题.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈几类背包题.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>5.刘聪《浅谈数位类统计问题》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>code.rar</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈数位类统计问题.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈数位类统计问题.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>17.高逸涵《数位计数问题解法研究》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>数位计数问题解法研究.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>数位计数问题解法研究.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>18.周而进《浅谈估价函数在信息学竞赛中的应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>浅谈估价函数在信息学竞赛中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>演示文稿.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>13.姜碧野《SPFA算法的优化及应用》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>SPFA算法的优化及应用.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>SPFA算法的优化及应用.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>9.张昆玮《数学归纳法与解题之道》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>数学归纳法与解题之道.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>数学归纳法与解题之道.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>20.曹钦翔《从“k倍动态减法游戏”出发探究一类组合游戏问题》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>从“k倍动态减法游戏”出发探究一类组合游戏问题.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>从“k倍动态减法游戏”出发探究一类组合游戏问题.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>8.徐源盛《对一类动态规划问题的研究》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>对一类动态规划问题的研究.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>对一类动态规划问题的研究.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>4.骆可强《论程序底层优化的一些方法与技巧》</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>论程序底层优化的一些方法与技巧.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>论程序底层优化的一些方法与技巧.ppt</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2013论文集.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2004论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>肖天.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>许智磊.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄源河--浅谈图论模型的建立与应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>胡伟栋.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>薛矛--解决动态统计问题的两把利刃，剖析线段树与矩形切割.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>楼天城.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>何林--信息学中的守恒法.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>薛矛.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>金恺--极限法，解决几何最优化问题的捷径.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周源--浅谈数形结合思想在信息学竞赛中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>肖天--分层图思想及其在信息学竞赛中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李锐喆--细节，不可忽视的要素.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>汪汀.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱泽园--多串匹配算法及其启示.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>鬲融--浅谈特殊穷举思想的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨思雨.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱晨光.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱泽园.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>韩文弢--论C++语言在信息学竞赛中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱晨光--优化，再优化.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>林涛--线段树的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>贝小辉.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>栗师--转化目标在解题中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄源河.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>吴景岳--最小生成树算法及其应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>林涛.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>胡伟栋--减少冗余与算法优化.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李锐喆.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>楼天城浅谈部分搜索+高效算法在搜索问题中的应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>周源.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>栗师.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>韩文韬.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>汪汀--最小生成树问题的拓展.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨思雨--伸展树的基本操作与应用.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>贝小辉--浅析树的划分问题.pdf</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>鬲融.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>金恺.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>何林.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>许智磊--后缀数组.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>IOI2018中国国家候选队论文集正式版.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2015论文集.pdf</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2000论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>陈彧--信息学竞赛中的思维方法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>陈彧论文.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨培-- 非最优化算法初探</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>杨培论文.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高寒蕊--递推关系的建立及在信息学竞赛中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>高寒蕊论文.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>徐静--图论模型的建立与转化</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>mars.html</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>导线排布.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>FINALS95.HTM</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>徐静论文.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Homeland.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>方奇--动态规划</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>方奇论文.DOC</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>徐串--论程序的调试技巧</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>徐串论文.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李刚--动态规划的深入讨论</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Pascal</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>1<span class="emphasis">_2.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>3<span class="emphasis">_1.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Pro_</span>1<span class="emphasis">_1.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>3<span class="emphasis">_2.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Pro_</span>5.Pas</span><br><span class="line">| | | | |<span class="strong">____</span>Pro<span class="emphasis">_6.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>4<span class="emphasis">_3.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>4<span class="emphasis">_2.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>PRO_</span>4<span class="emphasis">_1.pas</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李刚论文.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Readme.txt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Data</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Input_</span>5.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Sol<span class="emphasis">_6.txt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Sol_</span>5.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_4_</span>4.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_4_</span>5.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_4_</span>4.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_4_</span>5.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_4_</span>2.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_4_</span>3.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_4_</span>2.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_6.txt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>SOL_</span>4<span class="emphasis">_3.TXT</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>SOL_</span>4<span class="emphasis">_1.TXT</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Data_</span>4<span class="emphasis">_1.txt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Data_</span>5.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_1_</span>3.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_1_</span>2.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_1_</span>3.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_1_</span>2.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_1_</span>1.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_1_</span>1.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_1_</span>5.TXT</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_1_</span>4.txt</span><br><span class="line">| | | | |<span class="strong">____</span>Data<span class="emphasis">_1_</span>5.txt</span><br><span class="line">| | | | |<span class="strong">____</span>SOL<span class="emphasis">_1_</span>4.TXT</span><br><span class="line">| | |<span class="strong">____</span>龙翀--解决空间规模问题的几种常用的存储结构</span><br><span class="line">| | | |<span class="strong">____</span>龙翀论文.doc</span><br><span class="line">| | |<span class="strong">____</span>张力--类比思想在解题中的应用</span><br><span class="line">| | | |<span class="strong">____</span>张力论文.doc</span><br><span class="line">| | |<span class="strong">____</span>骆骥--数学模型的建立和选择</span><br><span class="line">| | | |<span class="strong">____</span>骆骥论文.DOC</span><br><span class="line">| | |<span class="strong">____</span>肖洲--数据结构的在程序设计中的应用</span><br><span class="line">| | | |<span class="strong">____</span>肖洲论文.doc</span><br><span class="line">| | |<span class="strong">____</span>杨江明--论数学策略在信息学问题中的应用</span><br><span class="line">| | | |<span class="strong">____</span>杨江明论文.doc</span><br><span class="line">| | |<span class="strong">____</span>谢婧--规模化问题的解题策略</span><br><span class="line">| | | |<span class="strong">____</span>land.2</span><br><span class="line">| | | |<span class="strong">____</span>land.5</span><br><span class="line">| | | |<span class="strong">____</span>land.4</span><br><span class="line">| | | |<span class="strong">____</span>land.3</span><br><span class="line">| | | |<span class="strong">____</span>land.8</span><br><span class="line">| | | |<span class="strong">____</span>land.6</span><br><span class="line">| | | |<span class="strong">____</span>land.1</span><br><span class="line">| | | |<span class="strong">____</span>land.7</span><br><span class="line">| | | |<span class="strong">____</span>land.9</span><br><span class="line">| | | |<span class="strong">____</span>谢婧论文.doc</span><br><span class="line">| | |<span class="strong">____</span>张一飞--浅谈信息的充分利用</span><br><span class="line">| | | |<span class="strong">____</span>张一飞论文.doc</span><br><span class="line">| | | |<span class="strong">____</span>Pro<span class="emphasis">_2.pas</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Pro_</span>3.pas</span><br><span class="line">| | | |<span class="strong">____</span>Pro<span class="emphasis">_1.pas</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张辰--动态规划的特点及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张辰论文.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>江鹏--探索构造法解题模式</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>江鹏程序</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>TOX_</span>SIMU.PAS</span><br><span class="line">| | | | |<span class="strong">____</span>TIAO.PAS</span><br><span class="line">| | | | |<span class="strong">____</span>hotel.PAS</span><br><span class="line">| | | | |<span class="strong">____</span>TOXIC.PAS</span><br><span class="line">| | | | |<span class="strong">____</span>TOXIC<span class="emphasis">_S.PAS</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>SEQUENCE.PAS</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>江鹏论文.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>江鹏论文附录.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>施遥--人工智能在围棋程序中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>施遥论文.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gogame.exe</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example4.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example1.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example5.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>SHAPE.DAT</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example8.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example10.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example9.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>readme.txt</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example2.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example6.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example7.go</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>example3.go</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>codes</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gomain.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>readme.dcu</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>readme.dfm</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>SHAPE.DAT</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>readme.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gomain.dfm</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gomain.dcu</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gogame.cfg</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gogame.dpr</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gogame.res</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>gogame.dof</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>郭一--数学模型及其在信息学竞赛中的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>郭一论文.doc</span></span><br><span class="line"><span class="emphasis">| |<span class="strong">____</span>国家集训队2001论文集</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张一飞--求n！的高精度算法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张一飞i.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>俞玮--基本动态规划问题的扩展</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>俞玮.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>江鹏--从一道题目的解法试谈网络流的构造与算法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>江鹏.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李源--树的枚举</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李源.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>刘汝佳--搬运工问题的启示</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>preface.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>chapter1.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>chapter2.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Chapter3.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>content.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>毛子青--动态规划算法的优化技巧</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>毛子青.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>毛子青.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>符文杰--Pólya原理及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>符文杰.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>骆骥--由“汽车问题”浅谈深度搜索的一个方面</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>骆骥.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>李益明--发言稿</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>李益明.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高岳--中等硬度解题报告</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>高岳.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>高寒蕊--从圆桌问题谈数据结构的综合运用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>ghr_</span>mine1.doc</span><br><span class="line">| | | |<span class="strong">____</span>ghr<span class="emphasis">_pub1.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Paper_</span>Show.doc</span><br><span class="line">| |<span class="strong">____</span>国家集训队2005论文集</span><br><span class="line">| | |<span class="strong">____</span>蒋炎岩--数据结构的联合，块状链表</span><br><span class="line">| | | |<span class="strong">____</span>蒋炎岩.ppt</span><br><span class="line">| | |<span class="strong">____</span>栗师--树的乐园</span><br><span class="line">| | | |<span class="strong">____</span>栗师.ppt</span><br><span class="line">| | |<span class="strong">____</span>钱自强--遗传算法应用的分析与研究</span><br><span class="line">| | | |<span class="strong">____</span>钱自强.ppt</span><br><span class="line">| | | |<span class="strong">____</span>钱自强.doc</span><br><span class="line">| | |<span class="strong">____</span>胡伟栋--浅析非完美算法在信息学竞赛中的应用</span><br><span class="line">| | | |<span class="strong">____</span>胡伟栋.ppt</span><br><span class="line">| | | |<span class="strong">____</span>胡伟栋.doc</span><br><span class="line">| | | |<span class="strong">____</span>附件</span><br><span class="line">| | | | |<span class="strong">____</span>Intuitionistic Logic.pdf</span><br><span class="line">| | | | |<span class="strong">____</span>传染病控制解题报告.doc</span><br><span class="line">| | | | |<span class="strong">____</span>polygon-1.2.rtf</span><br><span class="line">| | | | |<span class="strong">____</span>polygon.pdf</span><br><span class="line">| | | | |<span class="strong">____</span>epidemic - Random.PAS</span><br><span class="line">| | | | |<span class="strong">____</span>prime.pas</span><br><span class="line">| | |<span class="strong">____</span>杨弋--浅谈算法的优化</span><br><span class="line">| | | |<span class="strong">____</span>杨弋.ppt</span><br><span class="line">| | |<span class="strong">____</span>周源--压去冗余 缩得精华</span><br><span class="line">| | | |<span class="strong">____</span>周源.doc</span><br><span class="line">| | | |<span class="strong">____</span>周源.ppt</span><br><span class="line">| | |<span class="strong">____</span>李羽修--Hash函数的设计优化</span><br><span class="line">| | | |<span class="strong">____</span>李羽修.ppt</span><br><span class="line">| | | |<span class="strong">____</span>李羽修.doc</span><br><span class="line">| | |<span class="strong">____</span>王俊--浅析二分图匹配在信息学竞赛中的应用</span><br><span class="line">| | | |<span class="strong">____</span>王俊.ppt</span><br><span class="line">| | | |<span class="strong">____</span>王俊.doc</span><br><span class="line">| | |<span class="strong">____</span>唐文斌--正难则反–浅谈逆向思维在解题中的应用</span><br><span class="line">| | | |<span class="strong">____</span>唐文斌.ppt</span><br><span class="line">| | | |<span class="strong">____</span>唐文斌.doc</span><br><span class="line">| | | |<span class="strong">____</span>Program</span><br><span class="line">| | | | |<span class="strong">____</span>Tower.cpp</span><br><span class="line">| | |<span class="strong">____</span>杨思雨--美，无处不在——浅谈“黄金分割”和信息学的联系</span><br><span class="line">| | | |<span class="strong">____</span>杨思雨.doc</span><br><span class="line">| | | |<span class="strong">____</span>试题</span><br><span class="line">| | | | |<span class="strong">____</span>登山问题.doc</span><br><span class="line">| | | | |<span class="strong">____</span>取石子游戏.doc</span><br><span class="line">| | | |<span class="strong">____</span>杨思雨.ppt</span><br><span class="line">| | | |<span class="strong">____</span>Program</span><br><span class="line">| | | | |<span class="strong">____</span>explorer</span><br><span class="line">| | | | | |<span class="strong">____</span>tools<span class="emphasis">_c.h</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>explorer.pas</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>tools_</span>p.ppu</span><br><span class="line">| | | | |<span class="strong">____</span>tools<span class="emphasis">_c.h</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>tools_</span>p.ppu</span><br><span class="line">| | | | |<span class="strong">____</span>stone</span><br><span class="line">| | | | | |<span class="strong">____</span>stone<span class="emphasis">_2.pas</span></span><br><span class="line"><span class="emphasis">| | | | | |<span class="strong">____</span>stone_</span>3.pas</span><br><span class="line">| | | | | |<span class="strong">____</span>stone<span class="emphasis">_1.pas</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>张伟达--用改进算法的思想解决规模维数增大的问题</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张伟达.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>张伟达.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Team Selection2.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>Team Selection1.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>炮兵阵地.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>街道问题扩展.pas</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>旅行.pas</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄源河--左偏树的特点及其应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄源河.pdf</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄源河.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄源河.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>朱泽园--回到起点——一种突破性思维</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱泽园.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>朱泽园.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>黄刚--数据结构的联合</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>黄刚.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>龙凡--序的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>龙凡.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>龙凡.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>杨俊--浅谈二分策略的应用</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>杨俊.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>杨俊.doc</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>任恺--图论的基本思想及方法</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>任恺.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>任恺.ppt</span></span><br><span class="line"><span class="emphasis">| | |<span class="strong">____</span>魏冉--让算法的效率“跳起来”！</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>魏冉.ppt</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>魏冉.doc</span></span><br><span class="line"><span class="emphasis">| | | |<span class="strong">____</span>Program</span></span><br><span class="line"><span class="emphasis">| | | | |<span class="strong">____</span>cashier_</span>skiplist.pas</span><br><span class="line">| | | | |<span class="strong">____</span>pet.pas</span><br><span class="line">| | | | |<span class="strong">____</span>skiplist.pas</span><br><span class="line">| | |<span class="strong">____</span>吴景岳--解法讨论</span><br><span class="line">| | | |<span class="strong">____</span>吴景岳.ppt</span><br><span class="line">| | |<span class="strong">____</span>金恺--杂题大拼盘</span><br><span class="line">| | | |<span class="strong">____</span>金恺.ppt</span><br><span class="line">| | |<span class="strong">____</span>汪汀--参数搜索的应用</span><br><span class="line">| | | |<span class="strong">____</span>汪汀.doc</span><br><span class="line">| | | |<span class="strong">____</span>汪汀.ppt</span><br><span class="line">| | |<span class="strong">____</span>潘震皓--置换群快速幂运算 研究与探讨</span><br><span class="line">| | | |<span class="strong">____</span>潘震皓.ppt</span><br><span class="line">| | | |<span class="strong">____</span>潘震皓.doc</span><br><span class="line">| | |<span class="strong">____</span>何林--数据关系的简化</span><br><span class="line">| | | |<span class="strong">____</span>何林.doc</span><br><span class="line">| | | |<span class="strong">____</span>何林.ppt</span><br><span class="line">| | |<span class="strong">____</span>朱晨光--浅析倍增思想在信息学竞赛中的应用</span><br><span class="line">| | | |<span class="strong">____</span>朱晨光.ppt</span><br><span class="line">| | | |<span class="strong">____</span>朱晨光.doc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ai.jpg"></p><blockquote><p>如果对你有帮助希望star、follow</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 算法 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何科学制定计划？用我的CV法</title>
      <link href="/studyplan/"/>
      <url>/studyplan/</url>
      
        <content type="html"><![CDATA[<h1 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h1><div class="note success flat"><p>从小到大我有一个习惯，我喜欢做事情前都做一个计划。如果在做一件事情之前，或者在一段时间里，没有一个规划和计划，我会很慌乱。</p></div><div class="note primary flat"><p>所以这些年我做每件事前都会计划，甚至约会也是:</p><ul><li>约会一天做那些事？</li><li>早中晚做什么?</li><li>用什么交通工具？</li><li>开始结束时间？</li><li>特殊情况？</li><li>………</li></ul></div><p>这么多年我的感觉是做事有计划是个好习惯</p><ul><li>比如逛商场买东西，有一个计划列表不会忘买什么重要东西</li><li>比如出去旅游，有一个计划，会让你的旅游更加丰富紧凑高效</li></ul><div class="note warning flat"><p>但是我出现的问题是计划安排的不合理。作废情况很多，从而导致心情个方面有所影响。</p><p><code>所以说制定计划很重要，科学地制定计划更重要。</code></p></div><blockquote><p>接下来我来分享一下最近自己总结的一个我个人觉得不错的计划制定方法</p></blockquote><hr><h1 id="How？"><a href="#How？" class="headerlink" title="How？"></a>How？</h1><p>首先我认为制定计划 一定不能 <code>复杂</code>！！！</p><p>整个计划纷繁复杂，当自己真正做事的时候，自己都看的头疼，而且制定计划的时间可能都得用很长时间，这样得不偿失！！！那么如何简洁高效的制定计划呢？</p><h2 id="CV法-plan-constant-variate"><a href="#CV法-plan-constant-variate" class="headerlink" title="CV法 $ plan = constant + variate$"></a><code>CV</code>法 $ plan = constant + variate$</h2><p>我总结的计划制定办法，我称为<code>CV</code>法</p><p>看起来高端，其实所谓CV</p><ul><li>C = Constant</li><li> V = Variate</li></ul><p>也就是 </p><ul><li>C是常量 </li><li>V是变量</li></ul><p>这个思想很简单，因为我认为古话说的好</p><p><code>计划赶不上变化</code></p><p>所有的计划，制定了都可能会遇到变数，也就是存在变量。</p><p>但是我认为所有的计划也一定有一些常量，也就是确定的事。</p><h2 id="我的常量"><a href="#我的常量" class="headerlink" title="我的常量"></a>我的常量</h2><p>比如在这学期我制定的计划来说，我认为对于我来说常量就是：</p><ul><li><p>作息时间 </p><ul><li>5:00 am to get up</li><li> 0:00 am to sleep</li></ul></li><li><p>每天的晨跑 30 min</p></li><li><p>早上起床后的：</p><ol><li><p>Coding：1.5 小时 算法方面的编程学习、练习</p></li><li><p>Spider ：0.5 小时 相关学习：爬虫框架的编写</p></li><li><p>AI：每天至少3小时的AI学习</p><blockquote><p> AI = 神经网络与深度学习 + Pytorch + 自然语言处理原理</p><p>就像这里一样，计划得细化到具体，不能很空洞</p></blockquote></li></ol></li></ul><p>我来谈谈常量如何确定的：</p><ul><li>首先我计算了一周所有学校内课程占用的时间，算出平均时间，最大值，最小值。</li><li>然后通过最大值来确定我的常量，也就是必须做的事。<ul><li>让必须做的事的时间 小于 最少可支配时间</li><li>我算出最少每天可以自己支配的时间为 6 小时 </li><li>而我必做的事情 的时间总和为5小时 符合这一要求</li></ul></li></ul><p>确定了计划的常量了就基本完成一大半了，剩余就是变量：</p><p>变量就是近期特别该做的事，是临时产生的变量。</p><h2 id="我的变量"><a href="#我的变量" class="headerlink" title="我的变量"></a>我的变量</h2><p>比如我制定的计划中的变量就是：</p><ol><li>课内学习的总结归纳成博文</li><li>数学深入学习：<ol><li>微积分</li><li>概率论</li><li>线性代数</li><li>离散数学</li></ol></li><li>语言深入总结为博文：<ol><li>C</li><li>Python</li><li>C++</li></ol></li><li>AI 学习<ol><li>NN DL</li><li>Pytorch</li><li>NLP principle</li></ol></li><li>AI project in action</li></ol><blockquote><p>这样除去，常量的时间，剩余的时间按上面的顺序来学习就是了，具体花多少时间是不确定的，因为每天的时间具有不确定性</p></blockquote><h1 id="总结来说："><a href="#总结来说：" class="headerlink" title="总结来说："></a>总结来说：</h1><p>制定计划很简单：先列出来所有的事情，确定哪些是常量，哪些是变量，并合理分配时间。</p><blockquote><p>然后就带着满腔的热血来实现它！</p><p>我的CV法很简单，希望你有所收获</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲暇品味人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 计划 </tag>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出：信息和信息熵原理</title>
      <link href="/entropy/"/>
      <url>/entropy/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>信息是生活中的我们必不可少的元素，但是信息如何定义，如何去度量信息的多少，以及度量信息的不确定性，是一个抽象的难题，香农在1948年提出的信息理论解决了这个问题。</p></div><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/xn.jpg" alt="香农"></p><div class="note success flat"><p>这篇文章我会用浅显的例子来解释，什么是信息，什么是信息熵，以及信息熵公式的原理。</p><p>我不会一开始就堆砌一些抽象的概念，会一步一步用例子来解释。</p></div><h1 id="定性分析"><a href="#定性分析" class="headerlink" title="定性分析"></a>定性分析</h1><blockquote><p>举例解释各个概念的含义</p></blockquote><h2 id="信息、信息量、自信息、信息熵"><a href="#信息、信息量、自信息、信息熵" class="headerlink" title="信息、信息量、自信息、信息熵"></a>信息、信息量、自信息、信息熵</h2><p>总的来说：当一件事情（宏观态）有多种情况（微观态）时，这种事情对某人（观察者）而言具体是哪种情况（微观态）的不确定性叫做信息熵</p><p>所以<code>信息熵</code>是描述信息的<code>不确定性</code>的，而且常常是指宏观态的不确定性，是一个系统的不确定性</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/entropy.jpeg"></p><p>而信息是什么呢？</p><p><code>信息</code>就是用来<code>消除</code>该人对这件事情的<code>不确定性</code>的</p><p>熵和信息我们可以看到，是一对相反的概念：<code>消除熵 == 获取信息</code></p><p>那如何去度量信息熵多少呢，我们常常用信息量来度量，信息熵多意味着信息量多，换句通俗的例子来说就是，比如一个人说了一句深奥的话，可能会表达很多意思，自己丈二摸不着头脑，吐槽了一句：“这句话信息量有点大哦”，这里的信息量和熵问我们提到的差不多类似。</p><p>那自信息是什么呢？自信息更像信息熵的子集，也就是微观态所对应的信息量，对应的是每个事件。</p><blockquote><p>所以 信息熵是指系统所具有的信息量，而自信息是指个体（微观态）具有的信息量。</p></blockquote><h2 id="宏观态、微观态、观察者"><a href="#宏观态、微观态、观察者" class="headerlink" title="宏观态、微观态、观察者"></a>宏观态、微观态、观察者</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ep2.jpg"></p><p>比如我们用传奇人物<code>小明</code>来举例子，小明不会一道数学题，数学题有ABCD四个选项。正确答案（宏观态）是A B C D（四个微观态）哪个答案的不确定性就是信息熵，每个选项所对应的不确定性叫做自信息</p><p>而例子中：</p><p>正确答案就是 宏观态，宏观态是不考虑内部细节的状态</p><p>每个选项就是 微观态，微观态是考虑内部细节的状态</p><p>小明叫做观察者</p><p>信息熵在 A B C D等概率时，最大，即：$ P(A) = P(B)=P(C)=P(D)=\frac{1}4$ 时</p><p>为什么呢，我们思考一下，加入四个的概率都相等，对小明来说，哪个选项都是一样的，这就相当于纯机选了，信息的不确定性最大，即信息熵最大。（这里涉及到一个重要原理：<code>最大熵原理</code>，后面我会写相关的文章）</p><p>当某个选项小明完全确定的时候，信息熵最小，即信息混乱程度最低。</p><h2 id="消除不确定性的信息的三种类型"><a href="#消除不确定性的信息的三种类型" class="headerlink" title="消除不确定性的信息的三种类型"></a>消除不确定性的信息的三种类型</h2><blockquote><p>本质都是调整每个情况（微观态）的概率</p></blockquote><h3 id="调整微观态概率"><a href="#调整微观态概率" class="headerlink" title="调整微观态概率"></a>调整微观态概率</h3><p>比如小红告诉小明，一般可能性是选C选项，那么ABCD的可能性相对应调整为：$ P(C)=\frac{1}2,P(A)=P(B)=P(D)$</p><h3 id="排除某微观状态"><a href="#排除某微观状态" class="headerlink" title="排除某微观状态"></a>排除某微观状态</h3><p>比如小红告诉小明，C一定是错的，ABCD概率又相对应调整。</p><h3 id="确定情况"><a href="#确定情况" class="headerlink" title="确定情况"></a>确定情况</h3><p>比如小红告诉小明，确定是选C。</p><h2 id="噪音、数据、信息"><a href="#噪音、数据、信息" class="headerlink" title="噪音、数据、信息"></a>噪音、数据、信息</h2><p>比如，小红告诉小明，选项是 ABCD其中一种，这哪里受得了不是废话嘛。</p><p>为什么小明恼羞成怒？因为其实这句话不包含任何信息，不能够消除不确定性。</p><p>这种被称为噪音，不能称为信息，而 <code>数据 = 信息 + 噪音</code></p><h2 id="信息的性质"><a href="#信息的性质" class="headerlink" title="信息的性质"></a>信息的性质</h2><h3 id="同一个观察者，对同一件事情接收到的信息与用于传递信息的信号形式无关"><a href="#同一个观察者，对同一件事情接收到的信息与用于传递信息的信号形式无关" class="headerlink" title="同一个观察者，对同一件事情接收到的信息与用于传递信息的信号形式无关"></a>同一个观察者，对同一件事情接收到的信息与用于传递信息的信号形式无关</h3><p>比如 </p><ul><li><p>视觉： 小红给了小明一个写有C的纸条</p></li><li><p>触觉：小红踢了小明 三下椅子</p></li><li><p>听觉：直接告诉小明 选C</p></li></ul><h3 id="信息是相对于观察者的"><a href="#信息是相对于观察者的" class="headerlink" title="信息是相对于观察者的"></a>信息是相对于观察者的</h3><p>比如 小红会这道题 不管告不告诉小红正确答案，她都会选择C，信息熵为0</p><p>但是 对于小明就是具有不确定性，信息熵就不为0</p><blockquote><p>虽然信息是相对于观察者的，但是信息是客观存在的，不会因为观察者的主观意识改变，比如正确答案就是C</p></blockquote><h3 id="信息是相对于宏观态的"><a href="#信息是相对于宏观态的" class="headerlink" title="信息是相对于宏观态的"></a>信息是相对于宏观态的</h3><p>比如 小明如果是从 ABCD中选</p><p>或者从 AB 或者 CD中选</p><p>信息的不确定性是不同的</p><h2 id="概率和熵"><a href="#概率和熵" class="headerlink" title="概率和熵"></a>概率和熵</h2><p>概率大家都接触的很多了，概率是什么，概率是用于描述一个事件发生的<code>确定性</code>的，比如，小明机选正确的概率是$\frac{1}4$。</p><p>而熵是什么呢？</p><p>之前也说了，熵是信息的不确定性。</p><blockquote><p>上面部分讲述了 信息、信息熵的定性考量，下半部分，会从定量来描述，信息和信息熵。</p></blockquote><hr><h1 id="定量分析"><a href="#定量分析" class="headerlink" title="定量分析"></a>定量分析</h1><blockquote><ul><li>信息是如何量化的？</li><li>为什么信息还有单位？</li></ul></blockquote><h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><ul><li><p>我们来考虑一个问题：什么东西有单位？</p><blockquote><p>那太多了吧，桌子的长度，人的体重等等</p></blockquote></li><li><p>那我们如何测量呢？</p><blockquote><p>简单啊，在测量桌子的长度的时候，用一把尺子来量，也就是一个参照物。</p></blockquote></li><li><p>那尺子又是从哪里来呢？</p><blockquote><p>其实尺子上的长度是人规定的：1cm有多长，1m有多长都是人们约定好的，共同认可的。</p></blockquote></li></ul><h2 id="测量参照物"><a href="#测量参照物" class="headerlink" title="测量参照物"></a>测量参照物</h2><p>​    <img src="http://picreso.oss-cn-beijing.aliyuncs.com/ep.png"></p><p>所以，要测量信息，其实也是要用一个参照物，这个参照物就是：硬币！</p><p>用硬币就能测量信息，是不是很神奇呢？我们来看看硬币是如何做到的吧！</p><p>信息我们说了 信息就是消除不确定性的 那我们量化它，我们就用另一个事件的不确定性作为参照物，也就是我们的硬币</p><p>要测量某个事件的不确定性 就相当于 测量多少个硬币的不确定性。</p><p>这里的多少个 就是<code>信息量</code> 也就是度量信息多少的量，单位为bit</p><h2 id="具体测量方法"><a href="#具体测量方法" class="headerlink" title="具体测量方法"></a>具体测量方法</h2><blockquote><p>还是通过例子来讲解</p></blockquote><p>比如我们测量我的体重，我站在一个天平上面，参照物就是一堆1kg的砝码，我的体重就是最后平衡时，砝码的个数kg。就是用待测物体的质量除以参照物体的质量。</p><p>但是信息可以这么测量吗，不行！</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ep3.jpg"></p><p>因为我们要测量某个事件的不确定性 就相当于 测量多少个硬币的不确定性。而对于硬币而言，不确定性是一个硬币对应的是正反两面，这两个等概率的事件。</p><p>所以我们测量一个事件的不确定性就是测量事件有多少个等概率的事件。</p><p>我们设为相当于的等概率事件为 m个。</p><p>硬币的个数我们设为 n个。</p><p>信息熵我们设为 entropy。我们上面说了信息熵就是硬币的个数。所以 entropy = n</p><p>一个硬币对应两个等概率事件 所以 n个硬币相当于$2^n$个等概率事件。</p><p>所以 $m = 2^n$，所以$ entropy = n = \log_2{m}$，信息熵我们就算出来了。等等没完啊，怎么算事件一共有多少个等概率事件呢？</p><p>我们知道 假设 一个事件的概率是$\frac{1}{10}$，那相当于是在十个概率事件中取一个事件的概率，那么一个事件的概率为$p_i$，是不是对应的等概率事件个数为$\frac{1}{p_i}$。</p><p>所以我们计算一个事件的等概率事件数 实际上得先算出它的概率。</p><p>小明选选择题假如说他对知识一无所知，那 ABCD是不是概率都为 $\frac{1}{4}$，那信息熵选A、B、C、D都相同概率即$P(A)=P(B)=P(C)=P(D)=\frac{1}4$，每个事件的等概率事件对应硬币数个数为$log_2(\frac{1}4)$，总的硬币个数为四个的加权平均也就是数学期望，也就是自信息对应的信息量只和。最后得到，硬币数为 2 即信息熵为2bit。</p><p>总结来说公式为</p><ul><li> $entropy = \sum p_ilog_2\frac{1}{p_i}=-\sum p_ilog_2p_i$</li><li>自信息  = $ I（P_i）= - \log_2(P_i)$</li></ul><blockquote><p>这就是信息熵的公式的由来，这样你就测量了信息的不确定性。</p><p>由一块硬币就能度量世间万物的信息</p><p>信息熵原理你学会了吗？</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ep1.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 信息论 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理、机器学习、深度学习推荐书目</title>
      <link href="/book/"/>
      <url>/book/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>本文主要是我对ML、DL、NLP的经典书籍的推荐，希望你有所收获。</p><p>我认为以下都是经典书籍了，AI方向我觉得都可以好好读读，必定有收获 （CV 方向 NLP的书就看情况了吧～）</p></div><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book.jpg" alt="西瓜书" style="zoom:50%;" /><div class="note success flat"><p>周老师的经典书籍，很详细的讲述了机器学习的理论知识 主要讲述了为什么机器学习的火热 以及顶层的原理。如果感兴趣的朋友可以 先学一学微积分  线性代数 微积分 因为这本书对机器学习的数学功底有一定要求，不然的话学习起来会吃力并且效率低下</p></div><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book1.jpg" alt="机器学习实战"></p><div class="note success flat"><p>比较经典的入门实战教程，自己买了还没看完，后面准备手撸一遍算法</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>机器学习基础</li><li>KNN</li><li>决策树</li><li>Logistics 回归</li><li>SVM</li><li>AdaBoost</li></ol><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><ol><li>回归</li><li>树回归</li></ol><h3 id="无监督学习："><a href="#无监督学习：" class="headerlink" title="无监督学习："></a>无监督学习：</h3><ol><li>K-means</li><li>Apiriori</li><li>FP-growth</li><li>PCA</li><li>SVD</li><li>MapReduce</li></ol></div><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book6.jpg" alt="统计学习方法" style="zoom:50%;" /><div class="note success flat"><p>统计学习方法，李航老师的经典之作，理论知识详细且生动，值得反复读</p></div><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book2.jpg" alt="NLP汉语自然语言处理原理与实践"></p><div class="note success flat"><p>郑捷老师的汉语NLP书籍，详细的从语言学讲到自然语言处理，比较全面</p></div><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/hanLP.jpg" alt="hanLP"></p><div class="note success flat"><p>HanLP作者 何晗写的自然语言处理入门</p></div><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book3.jpg" alt="统计自然语言处理" style="zoom:50%;" /><div class="note success flat"><p>我认为这本书很经典，但是不适合入门，适合入门后进阶使用</p></div><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book5.jpg" alt="深度学习" style="zoom:100%;" /><div class="note success flat"><p>俗称花书，讲的相当全面，被称为DL的圣经，适合<code>深度学习</code></p></div><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book7.jpg" alt="动手学习深度学习 MXnet版" style="zoom:50%;" /><div class="note success flat"><p>基于<code>MXnet</code>的动手学习深度学习，配合深度学习，颜值担当，而且深入浅出</p></div><img src="https://picreso.oss-cn-beijing.aliyuncs.com/book4.jpg" alt="动手学习深度学习Pytorch版" style="zoom:100%;" /><div class="note success flat"><p>Github上面的能人，对动手学习深度学习 以Pytorch实现代码重新编写的书籍，以Pytorch为主的盆友必看</p></div><img src=" https://picreso.oss-cn-beijing.aliyuncs.com/book8.jpg" alt="神经网络与深度学习" style="zoom:100%;" /><div class="note success flat"><p>邱老师相当舒服的开源项目，深入浅出，将神经网络讲的全面且透彻，强烈推荐！</p></div><div class="note warning flat"><p>如果需要以上书籍PDF的，可以留言评论</p></div>]]></content>
      
      
      <categories>
          
          <category> NLPer炼丹之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 书籍 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BloomFilter原理与Python实现</title>
      <link href="/boomfilter/"/>
      <url>/boomfilter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bloom Filter是由Bloom在1970年提出的一种多哈希函数映射的快速查找算法。</p><p>通常应用在一些需要快速判断某个元素是否属于集合，但是并不严格要求100%正确的场合。</p><p>基于一种概率数据结构来实现，是一个有趣且强大的算法</p></blockquote><h2 id="一-实例"><a href="#一-实例" class="headerlink" title="一 .  实例"></a><strong>一</strong> .  <strong>实例</strong></h2><p>为了说明Bloom Filter存在的重要意义，举一个实例，也是为什么我要学习Boomfilter的起因：</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/spider1.jpg"></p><p>假设我们要写一个爬虫程序。由于网络间的链接错综复杂，蜘蛛在网络间爬行很可能会形成“环”，爬虫就会进入一个无限怪圈，找不到出路，程序出现崩溃。</p><p>所以为了避免形成“环”，就需要知道蜘蛛已经访问过那些URL，也就是如何<code>判重</code>。</p><p>给一个URL，怎样知道蜘蛛是否已经访问过呢？按照我们的常识，就会有如下几种方案：</p><ol><li><p>将访问过的URL<code>保存到数据库</code>，数据库管理系统可以为你去重。</p></li><li><p>用<code>Set</code>将访问过的URL保存起来。那只需接近O(1)的代价就可以查到一个URL是否被访问过了。</p></li><li><p>URL经过<code>MD5</code>或<code>SHA-1</code>等单向哈希后再保存到<code>Set</code>或<code>数据库</code>。</p></li><li><p><code>Bit-Map方法</code>。建立一个<code>BitSet</code>，将每个URL经过一个哈希函数映射到某一位。</p></li></ol><blockquote><p>方法1~3都是将访问过的URL完整保存，方法4则只标记URL的一个映射位。</p></blockquote><p>以上方法在数据量较小的情况下都能完美解决问题，但是当数据量变得非常庞大时问题就来了。</p><blockquote><p><code>方法1</code>的缺点：数据量变得非常庞大后关系型数据库查询的效率会变得很低。而且每来一个URL就启动一次数据库查询是不是太小题大做了？</p><p><code>方法2</code>的缺点：太消耗内存。随着URL的增多，占用的内存会越来越多。就算只有1亿个URL，每个URL只算50个字符，至少需要5GB内存，还不包括Set数据结构中的内存浪费。</p><p><code>方法3</code>的缺点：由于字符串经过MD5处理后的信息摘要长度只有128Bit，SHA-1处理后也只有160Bit，因此方法3比方法2节省了好几倍的内存。</p><p><code>方法4</code>的缺点：消耗内存是相对较少的，但缺点是单一哈希函数发生冲突的概率太高。</p></blockquote><p>若要降低冲突发生的概率到1%，有种办法就是就要将BitSet的长度设置为URL个数的100倍。</p><p>假设一亿条URL，就得把BitSet长度设为100亿，过于稀疏也是很费内存的</p><blockquote><p>实质上上面的算法都忽略了一个重要的隐含条件：允许小概率的出错，不一定要100%准确！</p><p>也就是说少量url实际上没有没网络爬虫访问，而将它们错判为已访问的代价是很小的——大不了少抓几个网页呗。 </p></blockquote><hr><h2 id="二-Bloom-Filter-算法原理"><a href="#二-Bloom-Filter-算法原理" class="headerlink" title="二 . Bloom Filter 算法原理"></a><strong>二</strong> <strong>. Bloom Filter</strong> <strong>算法原理</strong></h2><p>废话说到这里，下面引入本篇的主角——<code>Bloom Filter</code>。其实上面方法4的思想已经很接近Bloom Filter了。</p><p>方法四的致命缺点是冲突概率高，为了降低冲突的概念，Bloom Filter使用了多个哈希函数，而不是一个。</p><blockquote><p>为什么可以降低呢？我们知道Hash函数有一定几率出现冲突，概率假设为 p1，我们知道p1是一个很小的几率，但是在数据量大之后冲突就会变多，也就是上面第四种方法的问题。</p><p>BoomFilter使用 多个Hash函数 分别冲突概率为 p2 p3 p4 p5 …. pn ，我们知道不同 Hash函数处理同一个字符串彼此独立，所以冲突概率通过乘法公式得到为: p1p2p3p4p5p6…..pn，是相当相当小的了。</p></blockquote><p> Bloom Filter算法如下：</p><h3 id="预操作"><a href="#预操作" class="headerlink" title="预操作"></a>预操作</h3><div class="note success flat"><p>创建一个m位BitSet（C++自带，Python为bitarray），先将所有位初始化为0，然后选择k个不同的哈希函数。第i个哈希函数对字符串str哈希的结果记为h（i，str），且h（i，str）的范围是0到m-1 。</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/bf3.jpg" alt="BitSet清零"></p></div><h3 id="Add操作"><a href="#Add操作" class="headerlink" title="Add操作"></a>Add操作</h3><p>下面是每个字符串处理的过程，首先是将字符串str“记录”到BitSet中的过程：</p><p>对于字符串str，分别计算h（1，str），h（2，str）…… h（k，str）。然后将BitSet的第h（1，str）、h（2，str）…… h（k，str）位设为1。</p><p> <img src="http://picreso.oss-cn-beijing.aliyuncs.com/bf1.jpg" alt="Bloom Filter加入字符串过程"></p><p>　　</p><p>很简单吧？这样就将字符串str映射到BitSet中的k个二进制位了。</p><h3 id="CHeck操作"><a href="#CHeck操作" class="headerlink" title="CHeck操作"></a><strong>CHeck操作</strong></h3><p>根据上图，我们对每个字符串采用同样的算法。</p><p>下面是检查字符串str是否被BitSet记录过的过程：</p><ul><li><p>对于字符串str，分别计算h（1，str），h（2，str）…… h（k，str）。然后检查BitSet的第h（1，str）、h（2，str）…… h（k，str）位是否为1，若其中任何一位不为1则可以判定str一定没有被记录过。若全部位都是1，则“认为”字符串str存在。</p></li><li><p>若一个字符串对应的Bit不全为1，则可以肯定该字符串一定没有被Bloom Filter记录过。（这是显然的，因为字符串被记录过，其对应的二进制位肯定全部被设为1了）</p></li></ul><ul><li>但是若一个字符串对应的Bit全为1，实际上是不能100%的肯定该字符串被Bloom Filter记录过的。（因为有可能该字符串的所有位都刚好是被其他字符串所对应）这种将该字符串划分错的情况，称为<code>wrong position</code>。</li></ul><h3 id="Delete操作"><a href="#Delete操作" class="headerlink" title="Delete操作"></a><strong>Delete操作</strong></h3><p>字符串加入了就被不能删除了，因为删除会影响到其他字符串。实在需要删除字符串的可以使用Counting bloomfilter(CBF)，这是一种基本Bloom Filter的变体，CBF将基本Bloom Filter每一个Bit改为一个计数器，这样就可以实现删除字符串的功能了。</p><blockquote><p>Bloom Filter跟单哈希函数Bit-Map不同之处在于：Bloom Filter使用了k个哈希函数，每个字符串跟k个bit对应。从而降低了冲突的概率。</p></blockquote><hr><h2 id="三-Bloom-Filter-优化"><a href="#三-Bloom-Filter-优化" class="headerlink" title="三. Bloom Filter 优化"></a><strong>三</strong>. Bloom Filter 优化</h2><p> <img src="http://picreso.oss-cn-beijing.aliyuncs.com/bf2.png"></p><p>考虑到BoomFilter上面的指标，总结一下有以下几个</p><blockquote><p>m ： BitSet 位数</p><p>n ： 插入字符串个数</p><p>k ：hash函数个数</p><p>当然，哈希函数也是影响的重要因素</p></blockquote><p> 从表格来看 m/n越大越准，k越大越准。</p><p>但是具体怎么设计呢？</p><h3 id="哈希函数选择"><a href="#哈希函数选择" class="headerlink" title="哈希函数选择"></a>哈希函数选择</h3><ul><li><p>哈希函数的选择对性能的影响应该是很大的，一个好的哈希函数要能近似等概率的将字符串映射到各个Bit。</p></li><li><p>选择k个不同的哈希函数比较麻烦，一种简单的方法是选择一个哈希函数，然后送入k个不同的参数。</p></li></ul><h3 id="参数设计"><a href="#参数设计" class="headerlink" title="参数设计"></a>参数设计</h3><p>相信大家对于 Bloom Filter 的工作原理都有了一个基本的了解，现在我们来看看在Bloom Filter 中涉及到的一些参数指标：</p><ul><li>欲插入Bloom Filter中的元素数目: n</li><li>Bloom Filter误判率: P(true)</li><li>BitArray数组的大小: m</li><li>Hash Function的数目: k</li></ul><p>欲插入Bloom Filter中的元素数目 n 是我们在实际应用中可以提前获取或预估的；Bloom Filter的误判率 P(true) 则是我们提前设定的可以接受的容错率。所以在设计Bloom Filter过程中，最关键的参数就是BitArray数组的大小 m 和 Hash Function的数目 k，下面将给出这两个关键参数的设定依据、方法</p><h4 id="误判率-P-true"><a href="#误判率-P-true" class="headerlink" title="误判率 P(true)"></a>误判率 P(true)</h4><p>向Bloom Filter插入一个元素时，其一个Hash Function会将BitArray中的某Bit置为1，故对于任一Bit而言，其被置为1的概率 $P{1}=\frac{1}{m}$，那么其依然是0的概率 $ P0=1−P1=1−\frac{1}{m}$；易知插入一个元素时，其 k 个Hash Function 都未将该Bit置为1的概率 $P{0}^1=(1−\frac{1}m)^k$。则向Bloom Filter 插入全部n个元素后，该Bit依然为0的概率即为 $P{0}^n=(1−\frac{1}m)^{kn}$，反之，该Bit为1的概率则为 $P{1}^n=1−P{0}^n=1−(1−\frac{1}m)^{kn}$</p><p>由前文可知，判定一个元素存在于Bloom Filter，要求k个Hash Function的哈希值对应的Bit的值均为1。据此，我们可以计算出其误判率 P(true)：</p><p>$$P(true)=(P{1}^n)^k=[1−(1−\frac{1}m)^{kn}]^k$$</p><p>根据基本极限</p><p>$$\lim_{x \to \infty}(1-\frac{1}x)^{−x}=e$$</p><p>可知：</p><p>$P(true)≈(1−e^{\frac{-nk}m})^k$</p><p>从上式可以看出，当BitArray数组的大小m增大 或 欲插入Bloom Filter中的元素数目n 减小时，均可以使得误判率P(true)下降</p><h4 id="Hash-Function的数目-k"><a href="#Hash-Function的数目-k" class="headerlink" title="Hash Function的数目 k"></a>Hash Function的数目 k</h4><p>前文已经看到Hash Function数目k的增加可以减小误判率P(true)，但是随着Hash Function数目k的继续增加，反而会使误判率P(true)上升，即误判率是一个关于Hash Function数目k的凸函数。所以当k在极值点时，此时误判率即为最小值</p><p>$$f(k)=(1−e^{\frac{−nk}m})^k$$</p><p>令 $a=e^{\frac{n}m}$，则有：</p><p>$$f(k)=(1−a^−k)^k$$</p><p>分别对上式两边，先取对数，再对k求一次导，可有：</p><p>$\frac{1}{f(k)}f(k)′=ln(1−a^−k)+\frac{ka^{−k}lna}{1−a^−k}$</p><p>易知，当k取极值点时，有 f(k)′=0，故将其带入上式即可求出k</p><p>$$ln(1−a^−k)+\frac{ka^{−k}lna}{1−a^−k}=0$$</p><p>$$⇒(1−a^{−k})ln(1−a^{−k})=−ka^{−k}lna$$</p><p>$$⇒(1−a^{−k})ln(1−a^{−k})=a^{−k}lna^{−k}$$</p><p>$$⇒ 1−a^{−k}=a^{−k} $$</p><p>$$⇒a^{−k}=\frac{1}2$$</p><p>$$⇒e^{\frac{−kn}m}=\frac{1}2$$</p><p>$$⇒k=\frac{m}nln2≈0.7\frac{m}n$$</p><p>此时，我们即可以利用上式的结果，通过m和n来确定最优的Hash Function数目k</p><h4 id="BitArray数组的大小-m"><a href="#BitArray数组的大小-m" class="headerlink" title="BitArray数组的大小 m"></a>BitArray数组的大小 m</h4><p>如何确定BitArray数组的大小 m 呢？这里，我们联立 P(true)、k 的公式，即可解出 m</p><p>$$P(true)=(1−e^{\frac{−nk}m})^k$$</p><p>$$k=\frac{m}nln2$$</p><p>联立后有：</p><p>$$⇒ P(true)=(1−e^{−ln2})^{\frac{m}nln2}=\frac{1}{2}^{\frac{m}nln2}≈0.6185^{\frac{m}n} $$</p><p>对上式求解，可得：</p><p>$$⇒lnP(true)=\frac{m}nln2ln\frac{1}2$$</p><p>$$⇒m=−\frac{nlnP(true)}{(ln2)^2}$$</p><p>此时，我们即可以利用上式的结果，通过P(true)和n来确定最优的BitArray数组的大小 m</p><hr><h2 id="Python-代码简单实现"><a href="#Python-代码简单实现" class="headerlink" title="Python 代码简单实现"></a>Python 代码简单实现</h2><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bitarray <span class="keyword">import</span> bitarray <span class="comment"># 产生BitSet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mmh3 <span class="comment"># 产生Hash函数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span>(<span class="params"><span class="built_in">set</span></span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size, hash_count</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BloomFilter, self).__init__()</span><br><span class="line">        self.bit_array = bitarray(size)</span><br><span class="line">        self.bit_array.setall(<span class="number">0</span>)</span><br><span class="line">        self.size = size</span><br><span class="line">        self.hash_count = hash_count</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.size</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.bit_array)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">for</span> seed <span class="keyword">in</span> <span class="built_in">range</span>(self.hash_count):</span><br><span class="line">            index = mmh3.<span class="built_in">hash</span>(item, seed) % self.size</span><br><span class="line">            self.bit_array[index] = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        out = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> seed <span class="keyword">in</span> <span class="built_in">range</span>(self.hash_count):</span><br><span class="line">            index = mmh3.<span class="built_in">hash</span>(item, seed) % self.size</span><br><span class="line">            <span class="keyword">if</span> self.bit_array[index] == <span class="number">0</span>:</span><br><span class="line">                out = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    bloom = BloomFilter(<span class="number">10000</span>, <span class="number">20</span>)</span><br><span class="line">    animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;giraffe&#x27;</span>, <span class="string">&#x27;fly&#x27;</span>, <span class="string">&#x27;mosquito&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;eagle&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;boar&#x27;</span>, <span class="string">&#x27;butterfly&#x27;</span>, <span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;anaconda&#x27;</span>, <span class="string">&#x27;bear&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;chicken&#x27;</span>, <span class="string">&#x27;dolphin&#x27;</span>, <span class="string">&#x27;donkey&#x27;</span>, <span class="string">&#x27;crow&#x27;</span>, <span class="string">&#x27;crocodile&#x27;</span>]</span><br><span class="line">    <span class="comment"># First insertion of animals into the bloom filter</span></span><br><span class="line">    <span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">        bloom.add(animal)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Membership existence for already inserted animals</span></span><br><span class="line">    <span class="comment"># There should not be any false negatives</span></span><br><span class="line">    <span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">        <span class="keyword">if</span> animal <span class="keyword">in</span> bloom:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is in bloom filter as expected&#x27;</span>.<span class="built_in">format</span>(animal))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Something is terribly went wrong for &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(animal))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;FALSE NEGATIVE!&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Membership existence for not inserted animals</span></span><br><span class="line">    <span class="comment"># There could be false positives</span></span><br><span class="line">    other_animals = [<span class="string">&#x27;badger&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>, <span class="string">&#x27;pig&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;bee&#x27;</span>, <span class="string">&#x27;wolf&#x27;</span>, <span class="string">&#x27;fox&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;whale&#x27;</span>, <span class="string">&#x27;shark&#x27;</span>, <span class="string">&#x27;fish&#x27;</span>, <span class="string">&#x27;turkey&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;dove&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;falcon&#x27;</span>, <span class="string">&#x27;goat&#x27;</span>, <span class="string">&#x27;gorilla&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;hawk&#x27;</span> ]</span><br><span class="line">    <span class="keyword">for</span> other_animal <span class="keyword">in</span> other_animals:</span><br><span class="line">        <span class="keyword">if</span> other_animal <span class="keyword">in</span> bloom:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is not in the bloom, but a false positive&#x27;</span>.<span class="built_in">format</span>(other_animal))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is not in the bloom filter as expected&#x27;</span>.<span class="built_in">format</span>(other_animal))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">dog <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">cat <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">giraffe <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">fly <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">mosquito <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">horse <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">eagle <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">bird <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">bison <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">boar <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">butterfly <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">ant <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">anaconda <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">bear <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">chicken <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">dolphin <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">donkey <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">crow <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">crocodile <span class="keyword">is</span> <span class="keyword">in</span> bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">badger <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">cow <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">pig <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">sheep <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">bee <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">wolf <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">fox <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">whale <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">shark <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">fish <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">turkey <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">duck <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">dove <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">deer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">elephant <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">frog <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">falcon <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">goat <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">gorilla <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br><span class="line">hawk <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the bloom <span class="built_in">filter</span> <span class="keyword">as</span> expected</span><br></pre></td></tr></table></figure><p>可以看到 没有任何误判</p><hr><p>之后我会尝试用C来实现一个BoomFilter，python在GitHub上有造好的轮子了，我就不重复写了，这位大哥写的很好了～附上链接</p><p>链接 <a href="https://github.com/jaybaird/python-bloomfilter">https://github.com/jaybaird/python-bloomfilter</a></p><blockquote><p>希望你有所收获。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫那些小事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解P2P技术</title>
      <link href="/internet14/"/>
      <url>/internet14/</url>
      
        <content type="html"><![CDATA[<blockquote><p>P2P = Peer to Peer </p><p>现在P2P也有很多不同架构，以下是常见的一些P2P架构</p></blockquote><h2 id="纯P2P架构"><a href="#纯P2P架构" class="headerlink" title="纯P2P架构"></a>纯P2P架构</h2><ul><li>没有总是在线的服务器</li><li>任意端系统之间直接通信</li><li>对等方之间可以间断连接并可 以改变IP地址</li></ul><p>例子:</p><ul><li><p>文件分发 </p></li><li><p>流媒体</p></li><li><p>VoIP</p></li></ul><blockquote><p>复杂应用纯P2P无法实现</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p2p.png"></p><hr><h2 id="P2P-集中式目录"><a href="#P2P-集中式目录" class="headerlink" title="P2P: 集中式目录"></a><strong>P2P:</strong> <strong>集中式目录</strong></h2><blockquote><p>Napster公司首先设计，由中央集中服务器管理</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p1.png"></p><ol><li>当对等方启动时，它通知目录 服务器以下信息</li></ol><ul><li><p>IP地址</p></li><li><p>可供共享的对象名称</p></li></ul><ol start="2"><li>Alice查询文件“Hey Jude” 3) Alice 向Bob请求文件</li></ol><blockquote><p> 通过架构我们可以看到一些问题</p></blockquote><h3 id="集中式目录问题"><a href="#集中式目录问题" class="headerlink" title="集中式目录问题"></a><strong>集中式目录</strong>问题</h3><ul><li>单点故障 </li><li>性能瓶颈 </li><li>侵犯版权</li></ul><blockquote><p> 文件传输是分散的， 但是定位内容的过 程是高度集中的</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p2.png"></p><hr><h2 id="Gnutella-使用洪泛法查询"><a href="#Gnutella-使用洪泛法查询" class="headerlink" title="Gnutella(使用洪泛法查询)"></a>Gnutella(使用洪泛法查询)</h2><blockquote><p>类似于广播，范围有限，发出请求后，能响应的服务器回应</p></blockquote><ul><li><p>全分布</p></li><li><p>没有集中式服务器</p></li><li><p>公共域协议</p></li><li><p>许多Gnutella客户机实现Gnutella协议</p></li></ul><p>覆盖网络：</p><ul><li><p>如果对等方X和Y维护了一条TCP连接，则说X和Y之间有一条边</p></li><li><p>所有活跃的对等方和边组成覆盖网络</p></li><li><p>边不是物理通信链路</p></li><li><p>给定对等方连接的覆盖网络路径中的节点少于10个,即TTL小于10</p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p3.png"></p><blockquote><p>查询报文在已有的TCP连接上发送</p><p>对等方转发报文</p><p>QueryHit 报文按反向路径传送</p></blockquote><h3 id="Gnutella-加入对等方"><a href="#Gnutella-加入对等方" class="headerlink" title="Gnutella: 加入对等方"></a><strong>Gnutella:</strong> 加入对等方</h3><ul><li><p>加入对等方X必须发现在Gnutella网络中的其他对等方:使用对等方列表 。</p></li><li><p>X试图与该列表上的对等方建立一条TCP连接，直到与Y创建一条连接。</p></li><li><p>向Y发送一个Ping报文;Y转发该Ping报文。</p></li><li><p>所有的对等方接收Ping报文并响应一个Pong报 文。</p></li><li><p>X接收到许多Pong报文。然后能同某些其他对等 方建立TCP连接。</p></li></ul><h3 id="Gnutella-对等方离开"><a href="#Gnutella-对等方离开" class="headerlink" title="Gnutella: 对等方离开"></a><strong>Gnutella:</strong> <strong>对等方离开</strong></h3><ul><li><p>主动离开:离开接点的所有对等方都会刷新自身 的激活对等方列表,并开始与列表中的新的对等 方建立连接</p></li><li><p>断网:发送信息的时候对等方没有响应,则表明对 等方离开,节点刷新自身的激活对等方列表,并开 始与列表中的新的对等方建立连接</p></li></ul><hr><h2 id="KaZaA"><a href="#KaZaA" class="headerlink" title="KaZaA"></a><strong>KaZaA</strong></h2><blockquote><p>纯P2P的改进，超级节点技术</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p.png"></p><ul><li><p>每个对等方要不被指派 为组长，要不被指派给一个组长</p><ul><li><p>对等方和组长之间建立 TCP连接</p></li><li><p>组长之间建立TCP连接</p></li></ul></li><li><p>组长维护它的子对等方 共享的内容</p></li></ul><h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><ul><li>每个文件有文件的散列码标识</li><li>客户机送向组长发送关键词的查询</li><li>组长响应匹配</li><li>逐项匹配: <ul><li>元数据</li><li>散列值</li><li>IP地址</li></ul></li><li>如果组长转发查询给其他组长则其他组长响应匹 配</li><li>客户端选择要下载的文件</li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><p>请求排队:限制对等方并行上载数量，新的请求进行排队。</p></li><li><p>激励优先权:根据不同的上载下载比例优先服务贡献大者。</p></li><li><p>并行下载:将一个文件分成若干段，从多个对等方并行下载。</p></li></ul><hr><h2 id="P2P文件分发：BitTorrent"><a href="#P2P文件分发：BitTorrent" class="headerlink" title="P2P文件分发：BitTorrent"></a><strong>P2P</strong>文件分发：<strong>BitTorrent</strong></h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p5.png"></p><ul><li><p>BitTorrent是一种用于文件分发的流行P2P协议。</p></li><li><p>参与一个特定文件分发的所有对等方的集合被称为一个洪流 (torrent)。</p></li><li><p>一个洪流中的对等方彼此下载等长度的文件块(chunk)，典型 块长度为256KB。</p></li></ul><p>追踪器tracker服务器</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/bitt.png"></p><h2 id="P2P文件分发流程"><a href="#P2P文件分发流程" class="headerlink" title="P2P文件分发流程"></a><strong>P2P</strong>文件分发流程</h2><ul><li>对等方加入 torrent:<ul><li>没有文件块，但会随着时间流逝从其它对等方处累积文件     块</li><li>在tracker处注册，取得对等方列表，连到所有对等方的 一个子集(邻居)</li></ul></li><li>在下载的同时给其它对等方上传文件块 </li><li>对等方可能改变和其交换文件块的对象 </li><li>对等方会不断进入或者离开</li><li>一旦某对等方下载完了整个文件，它可以离开(自 私)或者继续留在torrent系统里(无私)</li></ul><h2 id="BitTorrent-请求、发送"><a href="#BitTorrent-请求、发送" class="headerlink" title="BitTorrent:请求、发送"></a>BitTorrent:请求、发送</h2><h3 id="请求文件块"><a href="#请求文件块" class="headerlink" title="请求文件块"></a><strong>请求文件块</strong></h3><ul><li><p>在任何给定的时刻，不同的对等方拥有不同的文件块子集</p></li><li><p>每个对等方会周期性的询 问其它每个它连接的对等方当前所拥有的文件块列 表</p></li><li><p>对等方将请求下载最稀缺的文件块</p></li></ul><h3 id="发送文件块-tit-for-tat-一报还一报"><a href="#发送文件块-tit-for-tat-一报还一报" class="headerlink" title="**发送文件块: tit-for-**tat(一报还一报)"></a>**发送文件块: tit-for-**tat(一报还一报)</h3><ul><li><p>Alice发送文件块的对象是 所有邻居中向自己发送速率 最快的4个</p><ul><li><p>其它邻居被阻塞</p></li><li><p>每10秒重新计算速率</p></li></ul></li><li><p>每30秒，随机选择一个其 他邻居，发送文件块</p></li></ul><hr><h2 id="DHT-分布式Hash表"><a href="#DHT-分布式Hash表" class="headerlink" title="DHT(分布式Hash表)"></a><strong>DHT(<strong>分布式</strong>Hash</strong>表)</h2><blockquote><p> DHT: 一个分布式的P2P数据库</p></blockquote><ul><li>数据库由许多(key,value)((键, 值)) 对构成。例如:<ul><li>key: 社保号; value: 人名</li><li>key: 电影名称; value: IP地址</li></ul></li><li>所有(key, value) 对被分发到成千上万的对等方用户群中</li><li>一个对等方利用key来查询DHT</li><li>DHT返回与之匹配的value</li><li>对等方还可以插入(key, value)对</li></ul><h3 id="怎样把键值分配给对等方"><a href="#怎样把键值分配给对等方" class="headerlink" title="怎样把键值分配给对等方?"></a><strong>怎样把键值分配给对等方</strong>?</h3><h4 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题:"></a>核心问题:</h4><ul><li>分配 (key, value) 对给各对等方</li></ul><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想:"></a>基本思想:</h4><ul><li>把每个key转化成一个整数</li><li>给每个对等方分配一个整数标识符</li><li>把 (key,value) 对分配给标识符离key最近的 那个对等方</li></ul><h3 id="DHT-标识符"><a href="#DHT-标识符" class="headerlink" title="DHT 标识符"></a><strong>DHT</strong> 标识符</h3><ul><li>给每个对等方分配一个[0,2n-1]之间的整数标识符，n为某给定值.<ul><li>每个标识符由 <em>n</em> 比特构成.</li></ul></li><li>需要每个key也在同样的范围内</li><li>为得到整数key,将原key做hash<ul><li>例如*,* key = hash(“Led Zeppelin IV”) </li><li>这就是为什么叫做分布式hash表的原因</li></ul></li></ul><h3 id="将key分配给对等方"><a href="#将key分配给对等方" class="headerlink" title="将key分配给对等方"></a><strong>将</strong>key分配给对等方</h3><p>规则:把key分配给具有最邻近ID的对等方.</p><ul><li>为方便起见: 最临近被定义为该key的直接后继 (immediate successor )</li><li> 例如:</li><li><em>n</em>=4; peers: 1,3,4,5,8,10,12,14;</li><li>key = 13, then successor peer = 14 </li><li>key = 15, then successor peer = 1</li></ul><h2 id="环形DHT"><a href="#环形DHT" class="headerlink" title="环形DHT"></a>环形DHT</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p6.png"></p><ul><li><p>每个对等方仅和其直接后继和直接前任( predecessor)联系. </p></li><li><p>“覆盖网络”</p></li></ul><p>当有N个对等方时，为找 到负责的键，发送消息数 量的负责度是O(N)</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p7.png"></p><h2 id="带捷径的环形DHT"><a href="#带捷径的环形DHT" class="headerlink" title="带捷径的环形DHT"></a><strong>带捷径的环形</strong>DHT</h2><ul><li><p>每个对等方知晓直接前任、后继以及捷径方的IP</p></li><li><p>本例中，将消息数从6减至2</p></li><li><p>DHT可以设计为每个对等方的邻居和每个请求的报文数均为<em>O(log N)</em></p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p8.png"></p><h2 id="对等方扰动"><a href="#对等方扰动" class="headerlink" title="对等方扰动"></a><strong>对等方扰动</strong></h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/p2p9.png"></p><ul><li>对等方可能进入或者离去 </li><li>对等方需要知晓它后面两个后继的地址</li><li>每个对等方周期性的ping这两个后继以 检查它们的存活性</li><li>如果直接后继离开了，则选择它的下一 个后继作为直接后继</li></ul><blockquote><p>例如: peer 5离开</p></blockquote><ul><li>peer 4检测到5的离开，将8当作其直接后继，并且问 8它的直接后继是谁(10)，然后将10当作其第二后继。 </li><li>如果编号为13的peer要加入怎么办? 后续还有很多问题，篇幅有限，感兴趣可以下来了解。</li></ul><blockquote><p>希望你能通过这篇文章了解到现在网络上常见的几个P2P的模式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Internet的目录DNS</title>
      <link href="/internet13/"/>
      <url>/internet13/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS体系介绍"><a href="#DNS体系介绍" class="headerlink" title="DNS体系介绍"></a>DNS体系介绍</h1><h2 id="为什么要有DNS"><a href="#为什么要有DNS" class="headerlink" title="为什么要有DNS"></a>为什么要有DNS</h2><blockquote><p> DNS = Domain Name System</p></blockquote><p>在Internet中，主机和路由器都有一个标识符： IP地址，这是为了在网络层服务（后面会单独写文章解释）</p><p>和人对比，ip类似于人的身份证号</p><p>但是我们彼此称呼的时候，张三 叫 李四 不可能叫他 511024XXXXXX身份证号吧，而是直呼名字，那在互联网中，这些网络设备，也可以拥有名字，这就是域名，也叫主机名</p><p>DNS 就负责建立 IP地址和主机名之间建立映射关系，负责两者转换。</p><h2 id="DNS提供的功能"><a href="#DNS提供的功能" class="headerlink" title="DNS提供的功能"></a>DNS提供的功能</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dns2.png"></p><blockquote><p>DNS是通过专门的服务器实现它的功能，称为DNS服务器。</p></blockquote><ul><li><p>主机名到IP地址的转换  </p></li><li><p>主机别名</p></li><li><p>一个主机可以有一个规范主机名和多个主机别名</p></li><li><p>邮件服务器别名 </p></li><li><p>负载分配</p><ul><li><p>DNS实现冗余服务器:一个IP地址 集合可以对应于同一个规范主机名。</p><p>（比如你访问的baidu.com，访问量巨大，不可能让单一的主机来负责请求，一般是很多个主机映射到一个域名上面，负载均衡）</p></li></ul></li></ul><h2 id="DNS特点"><a href="#DNS特点" class="headerlink" title="DNS特点"></a>DNS特点</h2><ul><li><p>分布式数据库: 一个由分层 DNS服务器实现的分布式数据库</p></li><li><p>应用层协议:DNS服务器实现域名转换 (域名/地址转换)、</p></li></ul><blockquote><p><code>为什么不集中式DNS?</code></p><ul><li><p>单点故障 导致DNS服务瘫痪 </p></li><li><p>巨大访问量</p></li><li><p>远距离集中式数据库维护</p></li><li><p>不可扩展!</p></li></ul></blockquote><p>分层结构：</p><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dns3.png"></p><p><code>客户机怎样决定主机名www.amazon.com的IP地址?</code></p><blockquote><p>从后往前查询</p></blockquote><ol><li><p>客户机查询根服务器得到com DNS服务器 </p></li><li><p>客户机查询com DNS服务器得到amazon.comDNS服务器</p></li><li><p>客户机查询amazon.comDNS服务器得到 <a href="http://www.amazon.com/">www.amazon.com</a>  的IP地址</p></li></ol><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dns.png"></p><h2 id="顶级域-TLD-服务器和权威DNS服务器"><a href="#顶级域-TLD-服务器和权威DNS服务器" class="headerlink" title="顶级域(TLD)服务器和权威DNS服务器"></a><strong>顶级域(TLD)服务器和权威</strong>DNS服务器</h2><ul><li><p><code> 顶级域服务器</code>(top-level domain servers): </p><blockquote><p> 13个顶级域名服务器和镜像服务器 一共全球 500多个</p></blockquote><ul><li>负责顶级域名 com, org, net, edu, etc, 和所有国家的顶级域名 uk, fr, ca, jp.</li><li> Network solutions 公司维护com顶级域的TLD服务器</li><li>Educause 公司维护edu顶级域的 TLD服务器</li></ul></li><li><p><code>权威DNS服务器</code>(authoritative DNS servers): 在因特网上具有公共可访问主机 (如Web服务器和邮件服务器)的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机的名字映射为IP地址。</p><ul><li>组织机构的权威DNS服务器负 责保存这些DNS记录。</li><li>多数大学和公司维护它们的基本权威DNS服务器</li></ul></li></ul><h2 id="本地DNS服务器"><a href="#本地DNS服务器" class="headerlink" title="本地DNS服务器"></a>本地DNS服务器</h2><blockquote><p>相当于一个本地代理</p></blockquote><ul><li><p>严格来说不属于该服务器的层次结构</p></li><li><p>每个ISP(如居民区ISP、公司、大学)都有一 个本地DNS</p><ul><li>也叫默认服务器</li></ul></li><li><p>当主机发出DNS请求时，该请求被发往本地DNS服务器。</p></li><li><p>起着代理的作用，转发请求到层次结构中。</p></li></ul><hr><h1 id="DNS工作原理"><a href="#DNS工作原理" class="headerlink" title="DNS工作原理"></a>DNS工作原理</h1><h2 id="DNS-查询方法"><a href="#DNS-查询方法" class="headerlink" title="DNS 查询方法"></a>DNS 查询方法</h2><blockquote><p>具体DNS查询是如何实现的呢？</p><p>一般是如下两种方法</p></blockquote><h3 id="递归查询-recursive-query"><a href="#递归查询-recursive-query" class="headerlink" title="递归查询 (recursive query)"></a>递归查询 (recursive query)</h3><ul><li><p>简单来说就是：名字解析的负担交给被查询的名字服务器，它帮你查</p></li><li><p>被查询的名字服务器负载重? 就像图中root DNS server</p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dn4.png"></p><h3 id="迭代查询-iterated-query"><a href="#迭代查询-iterated-query" class="headerlink" title="迭代查询(iterated query)"></a>迭代查询(iterated query)</h3><ul><li><p>简单来说：被查询的名字服务器 回复可以被 查询的名字服务器的IP地址，给你指路，并不帮你查询</p></li><li><p>“我不知道它的名字，但是可以问 服务器”</p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dns5.png"></p><blockquote><p>可以看到这种情况，查询都是本地DNS服务器，降低了root DNS server负担。</p></blockquote><h2 id="DNS缓存和权威DNS记录更新"><a href="#DNS缓存和权威DNS记录更新" class="headerlink" title="DNS缓存和权威DNS记录更新"></a><strong>DNS</strong>缓存和权威<strong>DNS</strong>记录更新</h2><blockquote><p>本地DNS服务器缓存，加快访问速度</p></blockquote><ul><li><p>一旦名字服务器获得DNS映射, 它将缓存该映射到局部内存</p><ul><li> 服务器在一定时间后将丢弃缓存的信息</li><li>本地DNS服务器可以缓存TLD服务器的IP地址<ul><li>因此根DNS服务器不会被经常访问</li></ul></li></ul></li><li><p>权威DNS服务器记录更新:IETF动态更新/通报机制 • RFC 2136</p></li></ul><h2 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a>DNS记录</h2><p>DNS: 存储资源记录(RR，Resource Records)的分布式数据库</p><p>DNS记录是以RP格式四元组方式存储的</p><p><strong>RR 格式: (name, value, type,ttl)</strong></p><ul><li><p><strong>Type=A(Adress)</strong></p><ul><li> <strong>name = 主机名</strong> </li><li><strong>value = IP地址</strong></li></ul><p>相当于 一个域名指向一个ip地址</p></li><li><p><strong>Type=CNAME(canonical)</strong> </p><ul><li><p>name = 主机别名</p><p><strong><a href="http://www.ibm.com的真名为/">www.ibm.com的真名为</a></strong>servereast.backup2.ibm.com</p></li><li><p><strong>value = 真实的规范主机名</strong></p></li></ul><p>相当于 一个域名指向另一个域名</p></li><li><p>Type=NS</p><p>( name server )</p><ul><li><p>name = 域名(如foo.com)</p></li><li><p>value = 该域权威名字服务器的主机名 </p></li></ul><p>相当于指向了它的域名服务器</p></li></ul><blockquote><p>还有很多规则不在这里一一列举</p></blockquote><h2 id="DNS协议、消息"><a href="#DNS协议、消息" class="headerlink" title="DNS协议、消息"></a>DNS协议、消息</h2><p>DNS也有自己的查询报文和应答报文，但是格式是相同的</p><h3 id="报文头部"><a href="#报文头部" class="headerlink" title="报文头部"></a>报文头部</h3><ul><li><p>标识符: 16位，查询和应答报文使 用相同的标识符</p></li><li><p>标志:有若干个标志构成，分别标 识不同的功能</p></li><li><p>查询/应答-0/ 1</p></li><li><p>查询希望是/非递归查询-1/0</p></li><li><p>应答可/否获得(支持)递归查询 -1/0</p></li><li><p>应答是/否来自权威名字服务器 -1/ 0</p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/dns6.png"></p><h2 id="如何在DNS数据库中插入记录"><a href="#如何在DNS数据库中插入记录" class="headerlink" title="如何在DNS数据库中插入记录"></a>如何在DNS数据库中插入记录</h2><p>例子:刚刚创建一个“network”公司</p><ul><li><p>如果你想在注册登记机构注册你的域名network.com，则</p></li><li><p>需要提供你自己的基本权威DNS服务器和辅助权威DNS服务器的名字和IP地址</p></li><li><p>该注册登记机构将下列两条资源记录插入注册机构的DNS系统中:</p></li></ul><p><code>(network.com, dns1.network.com, NS)</code></p><p><code>(dns1.network.com, 212.212.212.1, A)</code></p><ul><li><p>如果你想建立一个网站，则可以将网址<a href="http://www.network.com以类型a的方式记录到你的权威dns服务器dns1.network.com中./">www.network.com以类型A的方式记录到你的权威DNS服务器dns1.network.com中。</a></p></li><li><p>如果你想建一个邮件服务器，则可以将mail.network.com以类型MX的方式记录到你的权威DNS服务器dns1.network.com中。</p></li></ul><h2 id="DNS安全问题"><a href="#DNS安全问题" class="headerlink" title="DNS安全问题"></a>DNS安全问题</h2><p>DDoS攻击:对根域名服务器或顶级域名服务器发起拒绝服务攻击，基于主机耗尽型的DNS查询拒绝服务</p><p>重定向攻击:中间人攻击、DNS中毒攻击(发送欺骗的域名解析结果给DNS服务器)</p><p>利用DNS实现DDoS攻击: DNS反弹式拒绝服务攻击(DNS reflector attacks，又称DNS amplification attacks)。伪造客户地址向大量的dns服务器发出请求，导致客户无法访问 dns服务器进行域名解析。</p>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>因特网中的电子邮件SMTP,POP3,IMAP</title>
      <link href="/internet12/"/>
      <url>/internet12/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>电子邮件在很长一段时间是最重要的互联网应用。或许现在我们感受不到，也很少发邮件，因为现在很多即时通信软件：QQ、微信等等。</p></blockquote><blockquote><p>在互联网之初，人们相互通信，大部分是通过发送邮件，所以谈谈因特网中的电子邮件协议是很重要的。</p></blockquote><h2 id="电子邮件的组成部分"><a href="#电子邮件的组成部分" class="headerlink" title="电子邮件的组成部分"></a>电子邮件的组成部分</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/smtp.png"></p><blockquote><p>电子邮件通信主要由三大部分组成：</p><ol><li>用户代理</li><li>邮件服务器</li><li>邮件协议</li></ol></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp2.png"></p><h3 id="一、用户代理-user-agents"><a href="#一、用户代理-user-agents" class="headerlink" title="一、用户代理 user agents"></a>一、用户代理 user agents</h3><blockquote><p>就像我们常常使用的邮箱客户端，我们能直接接触的部分</p></blockquote><ul><li><p>允许用户阅读,回复,转发,保存,编辑邮件消息 </p></li><li><p>例如:Outlook, foxmail等</p></li><li><p>发送, 接收邮件消息到/从服务器</p></li><li><p>运行邮件协议</p></li></ul><h3 id="二、邮件服务器-mail-servers"><a href="#二、邮件服务器-mail-servers" class="headerlink" title="二、邮件服务器 mail servers"></a>二、邮件服务器 mail servers</h3><ul><li>邮箱mailbox 存放用户接收的邮件消息</li><li>外出报文队列outgoing message queue</li><li>运行邮件协议</li></ul><h3 id="三、邮件协议"><a href="#三、邮件协议" class="headerlink" title="三、邮件协议"></a>三、邮件协议</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>简单邮件传输协议</li><li>邮件接收协议</li></ul><h4 id="SMTP-RFC-5321-简单邮件传输协议"><a href="#SMTP-RFC-5321-简单邮件传输协议" class="headerlink" title="SMTP [RFC 5321] 简单邮件传输协议"></a><strong>SMTP [RFC 5321]</strong> 简单邮件传输协议</h4><blockquote><p><strong>Simple Mail Transfer Protocol</strong></p></blockquote><ul><li><p>客户使用TCP来可靠传输邮件消息到服务器</p></li><li><p>端口号<code>25</code></p></li><li><p>直接传送: 发送服务器到接收服务器</p></li><li><p>传输的3个阶段 </p><ul><li>握手 (问候)</li><li>邮件消息的传输 </li><li>结束</li></ul></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp1.png"></p><blockquote><ul><li><p>命令/应答的交互<br> –  命令: ASCII文本格式 </p><p>–  应答: 状态码及其短语</p></li><li><p>邮件消息必须是7-bit ASCII</p></li></ul></blockquote><h4 id="例子：Alice发送邮件消息到Bob"><a href="#例子：Alice发送邮件消息到Bob" class="headerlink" title="例子：Alice发送邮件消息到Bob"></a>例子：<strong>Alice</strong>发送邮件消息到Bob</h4><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp3.png"></p><ol><li><p>Alice使用用户代理编写邮件消息(给<a href="mailto:&#98;&#x6f;&#98;&#64;&#115;&#x6f;&#109;&#x65;&#x73;&#x63;&#104;&#111;&#x6f;&#x6c;&#46;&#101;&#100;&#117;">&#98;&#x6f;&#98;&#64;&#115;&#x6f;&#109;&#x65;&#x73;&#x63;&#104;&#111;&#x6f;&#x6c;&#46;&#101;&#100;&#117;</a>的) </p></li><li><p>Alice的用户代理发送邮件消息 到她的邮件服务器;邮件消息存放在邮件消息队列</p></li><li><p>Alice邮件服务器的SMTP客户端发起建立一个到Bob的邮件服务器的SMTP服务器端的TCP连接,经过应用层握手.</p></li><li><p>SMTP客户在这个TCP连接上发送Alice的邮件消息</p></li><li><p>Bob服务器存放邮件消息存到 Bob的邮箱</p></li><li><p>Bob调用他的用户代理读邮件消息</p></li></ol><hr><h4 id="SMTP总结"><a href="#SMTP总结" class="headerlink" title="SMTP总结"></a>SMTP总结</h4><ul><li>SMTP使用持久连接</li><li>SMTP 要求邮件消息 (header &amp; body)必须 是7-bit ASCII</li><li>SMTP服务器使用 CRLF.CRLF 来判断邮件消息的结束</li></ul><p>与HTTP的比较:</p><ul><li>HTTP: 拉协议</li><li>SMTP: 推协议</li><li>都有ASCII 命令/应答交互, 状态码</li><li>HTTP: 每个对象封装在它各自的 HTTP响应消息中发送</li><li>SMTP: 一个邮件内各个对象置于同一 个邮件消息的多目部分发送</li></ul><hr><h3 id="邮件消息的格式"><a href="#邮件消息的格式" class="headerlink" title="邮件消息的格式"></a>邮件消息的格式</h3><ul><li><p>信头-头部行。如:</p><ul><li><p>To: line </p></li><li><p>From:</p></li><li><p>Subject:</p><p> 这些头部不同于<em>SMTP</em>命令!</p></li></ul></li><li><p>信体</p><ul><li>邮件消息也必须是ASCII字符</li></ul><blockquote><p>有人问信体是中文怎么办，包括之前谈到的HTTP协议，默认的都是ASCII？</p><p>这时候就出现了MIME，在请求头部添加头部就能转换编码等等其他功能，大大扩展了功能。</p></blockquote></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp4.png"></p><hr><h3 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h3><blockquote><p>当通过SMTP协议将邮件传送到目的地的邮件服务器处时，接收方如何通过用户代理访问自己的邮件呢？</p><p>这里就需要邮件访问协议</p></blockquote><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp5.png"></p><h4 id="邮件访问协议-从服务器获取邮件消息"><a href="#邮件访问协议-从服务器获取邮件消息" class="headerlink" title="邮件访问协议: 从服务器获取邮件消息"></a>邮件访问协议: 从服务器获取邮件消息</h4><ul><li><p>POP: Post Office Protocol 邮局协议[RFC 1939]</p><ul><li>110端口号</li><li> 身份认证 (代理 &lt;–&gt;服务器) 并下载邮件消息</li></ul></li><li><p>IMAP: Internet Message Access Protocol [RFC 3501] </p><ul><li><p>143端口</p></li><li><p>更多功能特征 (更复杂!)</p></li><li><p>允许用户像对待本地邮箱那样操纵远程邮箱的邮件</p></li></ul></li><li><p> HTTP: Hotmail , Yahoo! Mail, etc.</p></li></ul><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/smtp6.png"></p><h4 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a><strong>POP3</strong>协议</h4><ol><li><p>身份认证阶段</p><p>authorization phase</p><ul><li><p>客户命令:</p><ul><li>user username </li><li>pass password</li></ul></li><li><p> 服务器响应 </p></li><li><p>+OK</p></li><li><p>-ERR</p></li></ul></li><li><p>传输阶段</p><p>transaction phase, client:</p><ul><li><p>list: 列出邮件编号</p></li><li><p>retr: 按编号取邮件</p></li><li><p>dele: 删除</p></li><li><p>quit</p></li></ul></li></ol><h3 id="POP3-和-IMAP"><a href="#POP3-和-IMAP" class="headerlink" title="POP3 和 IMAP"></a><strong>POP3</strong> <strong>和</strong> <strong>IMAP</strong></h3><h4 id="POP3的更多细节"><a href="#POP3的更多细节" class="headerlink" title="POP3的更多细节"></a>POP3的更多细节</h4><ul><li>先前例子使用 “Download-and-delete”.</li><li>Bob换客户端后不能再读邮件</li><li>“Download-and-keep”模式: 在不同客户机上的邮件拷贝</li><li>POP3的会话是无状态的</li></ul><h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><ul><li>保存所有邮件消息在一个位 置: 服务器</li><li>允许用户在服务器的各文件 夹中管理邮件消息</li><li>IMAP跟踪用户会话的状态 信息 :<ul><li>​    文件夹和邮件消息IDs与 文件夹名字的映射</li></ul></li></ul><blockquote><p>希望通过这篇文章你能明白邮件是如何实现的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈FTP文件传输协议</title>
      <link href="/internet11/"/>
      <url>/internet11/</url>
      
        <content type="html"><![CDATA[<h2 id="文件传输协议概述"><a href="#文件传输协议概述" class="headerlink" title="文件传输协议概述"></a>文件传输协议概述</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ftp.png"></p><blockquote><p>如果你想往你的服务器上传递文件，该怎么办呢？</p><p>这是个常见的问题，我们常常不仅要传文件，还涉及到下载文件，和管理服务器文件。</p><p>这时FTP协议出现了！（现在有很多基于FTP的客户端图形化软件，可以在网上下载，连接服务器，轻松管理服务器文件）</p><p><code>FTP:  文件传输协议  File Transfer Protocol</code></p></blockquote><ul><li>主要功能：<ul><li> 传输文件到远程主机/从远程主机下载文件</li></ul></li><li> 应用层模式：</li><li>client/server模式<ul><li><em>client</em>:  发起传输的一方 </li><li><em>server:</em>  远程主机</li></ul></li><li> ftp: RFC 959</li><li> ftp服务器: 端口号 21</li></ul><blockquote><p>和HTTP相比，FTP面向的直接是服务器的文件系统，并且具有维持状态的特点，在文件传输管理上，FTP更胜一筹。</p></blockquote><h3 id="工作流程："><a href="#工作流程：" class="headerlink" title="工作流程："></a>工作流程：</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ftp1.png"></p><ul><li>FTP客户首先发起建立1个与FTP服务器端口号21之间的TCP控制连接, 指定TCP作为传输层协议</li><li>客户在建立的控制连接上获得身份认证</li><li>客户在建立的控制连接上发送命令来浏览远程主机的目录.</li><li>当服务器接收到1个文件传输命令时, 在服务器端口号20创建1个与客户 的TCP数据连接</li><li>1个文件传输后,服务器结束这个TCP数据连接.</li><li>之后 再次传输，服务器创建第2个TCP与客户的数据连接来传输下一个文件.</li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><p>控制连接: 带外发送控制信息（对比 HTTP 带内控制信息）</p></li><li><p>FTP 服务器要维护用户状态信息: 当前目录, 先前的身份认证（对比HTTP的无状态连接）</p></li></ul><hr><h2 id="FTP的模块架构"><a href="#FTP的模块架构" class="headerlink" title="FTP的模块架构"></a>FTP的模块架构</h2><p>控制连接:</p><ul><li>USER-PI(protocol interpreter):用户协议解释器 </li><li> SERVER-PI:服务器协议解释器</li></ul><p>数据连接:</p><ul><li>user-DTP(Data Transfer Process):用户数据传输进程 </li><li>server-DTP:服务器数据传输进程</li></ul><h3 id="模型一"><a href="#模型一" class="headerlink" title="模型一"></a>模型一</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ftp2.png"></p><h3 id="模型二"><a href="#模型二" class="headerlink" title="模型二"></a>模型二</h3><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ftp3.png"></p><hr><h2 id="FTP数据连接建立方式"><a href="#FTP数据连接建立方式" class="headerlink" title="FTP数据连接建立方式"></a>FTP数据连接建立方式</h2><h3 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式:"></a>主动模式:</h3><ul><li><p>客户端发送PORT命令</p><p>PORT h1,h2,h3,h4,p1,p2 (h1-h4是IP地址，p1-p2是端口号)</p></li><li><p>服务器根据PORT命令指定的客户端地址和端口号发起数据连 接</p></li></ul><h3 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式:"></a>被动模式:</h3><ul><li>客户端发送PASV命令</li><li>服务器返回监听的地址和端口号 • 客户端发起数据连接</li></ul><hr><h2 id="FTP命令和应答"><a href="#FTP命令和应答" class="headerlink" title="FTP命令和应答"></a>FTP命令和应答</h2><p>常见命令:</p><ul><li>在控制连接上发送ASCII文本<ul><li>USER <em>username</em></li><li>PASS <em>password</em></li><li>LIST:返回当前远程目录的文 件列表</li><li>RETR filename:获取远程主 机当前目录下的1个文件(get)</li><li>STOR filename:存放1个文 件到远程主机当前目录下(put)</li></ul></li></ul><p>常见应答:</p><ul><li> 状态码及其相应短语 (同 HTTP)</li><li>331 Username OK, password required</li><li>125 data connection already open; transfer starting</li><li>425 Can’t open data connection • 452 Error writing file</li></ul><hr><h2 id="FTP数据传输的模式？"><a href="#FTP数据传输的模式？" class="headerlink" title="FTP数据传输的模式？"></a>FTP数据传输的模式？</h2><p><img src="http://picreso.oss-cn-beijing.aliyuncs.com/ftp4.png"></p><blockquote><p>希望通过这篇文章，能让你知道，什么是FTP协议，以及他的基本原理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Web缓存</title>
      <link href="/internet10/"/>
      <url>/internet10/</url>
      
        <content type="html"><![CDATA[<h2 id="Web缓存原理"><a href="#Web缓存原理" class="headerlink" title="Web缓存原理"></a>Web缓存原理</h2><blockquote><p>目标：在不涉及原始服务器的情况下满足客户端HTTP请求</p></blockquote><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul><li>用户配置浏览器：Web访问经过缓存</li><li>所有HTTP请求指向缓存<ul><li>对象在缓存中:缓存器返回对象</li><li>否则缓存器向起始服务器发出请求，接收对象后转发给客户机</li></ul></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/proxy.png"></p><ul><li>缓存服务器既是服务器又是客户机</li></ul><h3 id="为什么要用Web缓存器？"><a href="#为什么要用Web缓存器？" class="headerlink" title="为什么要用Web缓存器？"></a>为什么要用Web缓存器？</h3><ul><li>减少对客户机请求的响应时间 </li><li>减少内部网络与接入链路上的通信量</li><li> 能从整体上大大降低因特网上 的Web流量</li></ul><h2 id="Web缓存举例"><a href="#Web缓存举例" class="headerlink" title="Web缓存举例"></a>Web缓存举例</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/proxy3.png"></p><ul><li><p>假设</p><ul><li>对象平均长度 = 100,000 bits</li><li>浏览器对对象的平均访问速率= 15/sec</li><li>因特网时延= 2 sec</li></ul></li><li><p>结论</p><ul><li>局域网上的流量强度 = 0.15</li><li>链路上的流量强度 = 1</li><li>总延时 = 因特网时延 + 接入时延 + 局域网时延= 2秒+数分钟+数毫秒</li></ul></li></ul><blockquote><p>可以看到相当大的延时，如何解决呢？</p></blockquote><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p><code>增加接入链路的带宽</code></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/proxy2.png"></p><p>结论：</p><ul><li><p>局域网上的流量强度 = 15%</p></li><li><p>链路上的流量强度 = 15%</p></li><li><p>总时延 = 因特网时延 + 接入时延 + 局域网时延= 2 秒 +数毫秒+数毫秒 </p></li><li><p>这种方案需要较大的投资</p></li></ul><h3 id="优秀"><a href="#优秀" class="headerlink" title="优秀"></a>优秀</h3><p><code>安装缓存器</code></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/proxy1.png"></p><p>假设缓存器命中率为0.4</p><p>结论</p><ul><li><p>40%的请求立即会得到响应</p></li><li><p>60 %的请求通过访问起始服务器满足</p></li><li><p>链路上的流量强度减为0.6，可以忽略不 计</p></li><li><p><code>总的平均延时=因特网时延+接入时延+ 局域网时延</code>=0.6*2 秒 + 数毫秒&lt; 1.4 秒</p></li></ul><blockquote><p>降低了成本，加快了速度</p></blockquote><h3 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h3><blockquote><p>虽然我们说我们访问某些对象，那么如何保证缓存服务器上的对象时最新的呢？使用一种特定的GET方法。</p></blockquote><p><code>缓存服务器也是客户机，为了确保缓存服务器上的数据是最新的，它会发送条件GET到原始服务器上</code></p><ul><li><p>目的: 证实缓存器中的对象是否为最新</p></li><li><p>缓存器: 在请求报文中包含对象最后修改时间 If-modified-since: <date></p></li><li><p>服务器:  如果对象是最新的则响应报文中不包含对象: </p><p>HTTP/1.0 304 Not Modified</p></li></ul><p>简单的举例：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/proxy4.png"></p><ul><li><p>如果没被修改 原始服务器则返回304给缓存服务器 缓存服务器就可以使用缓存</p></li><li><p>如果被修改 服务器则返回最新数据给缓存服务器，更新缓存</p></li></ul><blockquote><p>希望通过这篇文章，让你了解了Web缓存。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Cookie</title>
      <link href="/internet9/"/>
      <url>/internet9/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie综述"><a href="#Cookie综述" class="headerlink" title="Cookie综述"></a>Cookie综述</h1><div class="note success flat"><p>cookie 英文中叫做小甜品，那么Web中这个耳熟能详的词是有什么神奇的功效呢？</p></div><p><code>总的来说：cookie提高用户和服务端的交互性</code></p><p>我们知道HTTP是无状态协议，即无法维护历史状态。</p><p>换句话来说就是，即是你不断的HTTP请求，并且做了一些事，下一次访问时，Web站点也不认识你。</p><p>这带来很多麻烦，也使得某些服务很难进行</p><p>比如：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/cookie1.png"></p><ul><li>逛淘宝、京东，即使没有登录账号，也能加入购物车，下次访问同样有记录</li><li>身份认证，访问网站时，cookie信息能一定程度认证你的身份</li><li>推荐广告或者其他业务</li><li>用户会话状态</li></ul><p>So? <code>cookie 就使得HTTP有了记忆</code></p><h2 id="Cookie-四个重要方面"><a href="#Cookie-四个重要方面" class="headerlink" title="Cookie 四个重要方面"></a>Cookie 四个重要方面</h2><ol><li>cookie头部行在响应消息中</li><li>cookie头部行在请求消息中</li><li>cookie文件保存在用户主机中并被用户浏览器管理</li><li>cookie也保存在web站点后端数据库</li></ol><h2 id="Cookies-和隐私"><a href="#Cookies-和隐私" class="headerlink" title="Cookies 和隐私"></a>Cookies 和隐私</h2><ul><li>cookies允许网站更加了解你</li><li>你可以提供名字和e-mail给网站 </li><li>广告公司通过网站获得信息</li><li>Cookies不适合游动用户</li><li>同时一定程度存在信息个人隐私泄漏的问题</li></ul><h1 id="Cookie举例"><a href="#Cookie举例" class="headerlink" title="Cookie举例"></a>Cookie举例</h1><ol><li><p>李四总是使用同台PC访问Internet </p></li><li><p>他首次访问1个电子商务网站</p></li><li><p>当他最初发出HTTP请求访问该站点时,该站点创 建一个唯一的 ID,并在后端数据库创建一个响应于 该ID表项</p></li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/cookie2.png"></p><p>可以看到流程：</p><ol><li>第一次请求，服务端生成cookie，在响应报文中返回。浏览器保存</li><li>下一次请求，用户请求报文中带着cookie信息，服务端就能识别用户。</li></ol><blockquote><p>cookie的原理看起来挺简单，但是是一个强大的工具</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与Json</title>
      <link href="/json/"/>
      <url>/json/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p> JSON 是一种轻量级的数据交换格式 （JavaScript Object Notation）</p></blockquote><p>Python对JSON的处理相当简单</p><p>主要用到 <code>json</code>模块，四大函数：</p><p>处理的如果是程序对象：</p><ul><li><p>json.dumps 编码</p></li><li><p>json.loads 解码</p></li></ul><p>处理的如果是文件</p><ul><li>json.dump 写入文件</li><li>json.load 读出文件</li></ul><h2 id="转化规则"><a href="#转化规则" class="headerlink" title="转化规则"></a>转化规则</h2><blockquote><p>python数据格式与json转化的关系如下</p></blockquote><h3 id="Python-编码为-JSON-类型转换对应表"><a href="#Python-编码为-JSON-类型转换对应表" class="headerlink" title="Python 编码为 JSON 类型转换对应表"></a>Python 编码为 JSON 类型转换对应表</h3><table><thead><tr><th align="left">Python</th><th align="left">JSON</th></tr></thead><tbody><tr><td align="left">dict</td><td align="left">object</td></tr><tr><td align="left">list, tuple</td><td align="left">array</td></tr><tr><td align="left">str</td><td align="left">string</td></tr><tr><td align="left">int, float, int- &amp; float-derived Enums</td><td align="left">number</td></tr><tr><td align="left">True</td><td align="left">true</td></tr><tr><td align="left">False</td><td align="left">false</td></tr><tr><td align="left">None</td><td align="left">null</td></tr></tbody></table><h3 id="JSON-解码为-Python-类型转换对应表："><a href="#JSON-解码为-Python-类型转换对应表：" class="headerlink" title="JSON 解码为 Python 类型转换对应表："></a>JSON 解码为 Python 类型转换对应表：</h3><table><thead><tr><th align="left">JSON</th><th align="left">Python</th></tr></thead><tbody><tr><td align="left">object</td><td align="left">dict</td></tr><tr><td align="left">array</td><td align="left">list</td></tr><tr><td align="left">string</td><td align="left">str</td></tr><tr><td align="left">number (int)</td><td align="left">int</td></tr><tr><td align="left">number (real)</td><td align="left">float</td></tr><tr><td align="left">true</td><td align="left">True</td></tr><tr><td align="left">false</td><td align="left">False</td></tr><tr><td align="left">null</td><td align="left">None</td></tr></tbody></table><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>开始前，Python 當中自帶 json 套件，所以我們不必另外安裝，可以直接在程式碼中匯入這個模組。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br></pre></td></tr></table></figure><p>tips：让数据格式化输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps( source , sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="dumps"><a href="#dumps" class="headerlink" title="dumps"></a>dumps</h2><blockquote><p>用dict来举例，按转化规则变成一个Object</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span> = &#123;<span class="string">&quot;liuxunzhuo&quot;</span>:&#123;<span class="string">&quot;job&quot;</span>:<span class="string">&quot;engineer&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span>,<span class="string">&quot;experience&quot;</span>:&#123;<span class="string">&quot;2020&quot;</span>:<span class="string">&quot;AirSpider&quot;</span>,<span class="string">&quot;2019&quot;</span>:<span class="string">&quot;NovelDao&quot;</span>&#125;,<span class="string">&quot;wanyueke&quot;</span>:&#123;<span class="string">&quot;job&quot;</span>:<span class="string">&quot;lawer&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;female&quot;</span>,<span class="string">&quot;experience&quot;</span>:<span class="string">&quot;None&quot;</span>&#125;&#125;</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span></span><br><span class="line">&#123;<span class="string">&#x27;liuxunzhuo&#x27;</span>: &#123;<span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;engineer&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;experience&#x27;</span>: &#123;<span class="string">&#x27;2020&#x27;</span>: <span class="string">&#x27;AirSpider&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>: <span class="string">&#x27;NovelDao&#x27;</span>&#125;, <span class="string">&#x27;wanyueke&#x27;</span>: &#123;<span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;lawer&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;experience&#x27;</span>: <span class="string">&#x27;None&#x27;</span>&#125;&#125;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_dict = json.dumps(<span class="built_in">dict</span>,sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(json_dict)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;liuxunzhuo&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;experience&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;2019&quot;</span>: <span class="string">&quot;NovelDao&quot;</span>,</span><br><span class="line">            <span class="string">&quot;2020&quot;</span>: <span class="string">&quot;AirSpider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">        <span class="string">&quot;job&quot;</span>: <span class="string">&quot;engineer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wanyueke&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;experience&quot;</span>: <span class="string">&quot;None&quot;</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">            <span class="string">&quot;job&quot;</span>: <span class="string">&quot;lawer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h2><blockquote><p>接着上面的例子，将json转化为dict</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = json.loads(json_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(res)</span><br><span class="line">&#123;<span class="string">&#x27;liuxunzhuo&#x27;</span>: &#123;<span class="string">&#x27;experience&#x27;</span>: &#123;<span class="string">&#x27;2019&#x27;</span>: <span class="string">&#x27;NovelDao&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>: <span class="string">&#x27;AirSpider&#x27;</span>&#125;, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;engineer&#x27;</span>, <span class="string">&#x27;wanyueke&#x27;</span>: &#123;<span class="string">&#x27;experience&#x27;</span>: <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;lawer&#x27;</span>&#125;&#125;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><blockquote><p>直接将python数据转化成json格式写入文档</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span> = &#123;<span class="string">&quot;liuxunzhuo&quot;</span>:&#123;<span class="string">&quot;job&quot;</span>:<span class="string">&quot;engineer&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span>,<span class="string">&quot;experience&quot;</span>:&#123;<span class="string">&quot;2020&quot;</span>:<span class="string">&quot;AirSpider&quot;</span>,<span class="string">&quot;2019&quot;</span>:<span class="string">&quot;NovelDao&quot;</span>&#125;,<span class="string">&quot;wanyueke&quot;</span>:&#123;<span class="string">&quot;job&quot;</span>:<span class="string">&quot;lawer&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;female&quot;</span>,<span class="string">&quot;experience&quot;</span>:<span class="string">&quot;None&quot;</span>&#125;&#125;</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dump(<span class="built_in">dict</span> , file,sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file.close()</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/json.png"></p><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><blockquote><p>将json文档读入并转化为python数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>read = json.load(file)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(read)</span><br><span class="line">&#123;<span class="string">&#x27;liuxunzhuo&#x27;</span>: &#123;<span class="string">&#x27;experience&#x27;</span>: &#123;<span class="string">&#x27;2019&#x27;</span>: <span class="string">&#x27;NovelDao&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>: <span class="string">&#x27;AirSpider&#x27;</span>&#125;, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;engineer&#x27;</span>, <span class="string">&#x27;wanyueke&#x27;</span>: &#123;<span class="string">&#x27;experience&#x27;</span>: <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;lawer&#x27;</span>&#125;&#125;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>用好这四个函数就能轻松应对大部分问题啦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python如何调用系统命令</title>
      <link href="/shell/"/>
      <url>/shell/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>在Python里面，直接调用系统命令，可以快速的完成任务。一般使用os或者subprocess模块，来执行系统命令。</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=4012717948,1091859348&fm=173&app=49&f=JPEG?w=640&h=278&s=A030EC32CDA1481318F588DC0000C0B3"></p><h2 id="os-system"><a href="#os-system" class="headerlink" title="os.system()"></a><strong>os.system()</strong></h2><p>该函数返回命令执行结果的返回值，system()函数在执行过程中进行了以下三步操作： </p><p>1、fork一个子进程； </p><p>2、在子进程中调用exec函数去执行命令； </p><p>3、在父进程中调用wait（阻塞）去等待子进程结束。</p><p>返回0表示命令执行成功，其他表示失败。</p><p>注意：使用该函数经常会莫名其妙地出现错误，但是直接执行命令并没有问题，所以一般建议不要使用。</p><p>用法：os.system(“command”)</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3983861935,297392910&fm=173&app=49&f=JPEG?w=512&h=512&s=4B84386203E14DA95E5D30C6000080B1"></p><h2 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen()"></a><strong>os.popen()</strong></h2><p>这种调用方式是通过管道的方式来实现，函数返回是 file read 的对象，对其进行读取read、readlines等操作可以看到执行的输出。</p><p>注意：如果命令执行失败，就读取不到内容。</p><p>用法：os.popen(“command”)</p><h2 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen()"></a><strong>subprocess.Popen()</strong></h2><p>subprocess模块被推荐用来替换一些老的模块和函数，如：os.system、os.spawn<em>、os.popen</em>等</p><p>subprocess模块目的是fork一个新的进程并与之通信，最常用是定义类Popen，使用Popen可以创建进程，并与进程进行复杂的交互。其函数原型为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen(args, bufsize=<span class="number">0</span>, executable=<span class="literal">None</span>, stdin=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, preexec_fn=<span class="literal">None</span>, close_fds=<span class="literal">False</span>, shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">False</span>, startupinfo=<span class="literal">None</span>, creationflags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>args：这个参数必须是字符串或者是一个由字符串成员的列表。其中如果是一个字符串列表的话，那第一个成员为要运行的程序的路径以及程序名称；从第二个成员开始到最后一个成员为运行这个程序需要输入的参数。</li></ul><ul><li>executable：指定要运行的程序，这个一般很少用到，因为要指定运行的程序在args中已经指定了。stdin，stdout ，stderr：分别代表程序的标准输入、标准输出、标准错误处理。可以选择的值有PIPE，已经存在的打开的文件对象和NONE。若stdout是文件对象的话，要确保文件对象是处于打开状态。</li></ul><ul><li>shell：默认是False。shell参数根据要执行的命令情况来定，如果将参数shell设为True，executable将指定程序使用的shell。在windows平台下，默认的shell由COMSPEC环境变量来指定。</li></ul><ul><li>bufsize：指定缓冲。0 无缓冲,1 行缓冲,其他 缓冲区大小,负值 系统缓冲</li></ul><ul><li>cwd：用于设置子进程的当前目录</li></ul><ul><li>stdin, stdout, stderr：分别表示程序的标准输入、标准输出、标准错误输出，可以是 subprocess.PIPE 或 其他程序、文件。</li></ul><ul><li>env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。</li></ul><ul><li>universal_newlines：不同系统的换行符不同，True 即使用 \n</li></ul><ul><li>preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用。</li></ul><p>用法： child = subprocess.Popen([“cmd”,”arg1”…])</p><h3 id="subprocess-Popen类的实例可调用的方法"><a href="#subprocess-Popen类的实例可调用的方法" class="headerlink" title="subprocess.Popen类的实例可调用的方法"></a><strong>subprocess.Popen类的实例可调用的方法</strong></h3><h4 id="Popen-poll-用于检查子进程（命令）"><a href="#Popen-poll-用于检查子进程（命令）" class="headerlink" title="Popen.poll() 用于检查子进程（命令）"></a>Popen.poll() 用于检查子进程（命令）</h4><p>是否已经执行结束，没结束返回None，结束后返回状态码。</p><h4 id="Popen-wait-timeout-None"><a href="#Popen-wait-timeout-None" class="headerlink" title="Popen.wait(timeout=None)"></a>Popen.wait(timeout=None)</h4><p>等待子进程结束，并返回状态码；如果在timeout指定的秒数之后进程还没有结束，将会抛出一个TimeoutExpired异常。</p><h4 id="Popen-communicate-input-None-timeout-None"><a href="#Popen-communicate-input-None-timeout-None" class="headerlink" title="Popen.communicate(input=None, timeout=None)"></a>Popen.communicate(input=None, timeout=None)</h4><p> 该方法可用来与进程进行交互，比如发送数据到stdin，从stdout和stderr读取数据，直到到达文件末尾。</p><h4 id="Popen-send-signal-signal"><a href="#Popen-send-signal-signal" class="headerlink" title="Popen.send_signal(signal)"></a>Popen.send_signal(signal)</h4><p>发送指定的信号给这个子进程。</p><h4 id="Popen-terminate"><a href="#Popen-terminate" class="headerlink" title="Popen.terminate()"></a>Popen.terminate()</h4><p>停止该子进程。</p><h4 id="Popen-kill"><a href="#Popen-kill" class="headerlink" title="Popen.kill()"></a>Popen.kill()</h4><p> 杀死该子进程。</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1085415449,2681913565&fm=173&app=49&f=JPEG?w=530&h=309&s=9D91EA15E8836C415E1584CF010030B3"></p><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a><strong>其他函数</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="literal">None</span>, <span class="built_in">input</span>=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, shell=<span class="literal">False</span>, timeout=<span class="literal">None</span>, check=<span class="literal">False</span>, universal_newlines=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>subprocess.run() Python 3.5中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(args, *, stdin=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, shell=<span class="literal">False</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>subprocess.call() 执行指定的命令，返回命令执行状态，其功能类似于os.system(cmd)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_call(args, *, stdin=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, shell=<span class="literal">False</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>subprocess.check_call() Python 2.5中新增的函数。 执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于subprocess.run(…, check=True)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_output(args, *, stdin=<span class="literal">None</span>, stderr=<span class="literal">None</span>, shell=<span class="literal">False</span>, universal_newlines=<span class="literal">False</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>subprocess.check_output() Python 2.7中新增的的函数。执行指定的命令，如果执行状态码为0则返回命令执行结果，否则抛出异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.getstatusoutput(cmd)</span><br></pre></td></tr></table></figure><p>subprocess.getstatusoutput(cmd) 执行cmd命令，返回一个元组(命令执行状态, 命令执行结果输出)，其功能类似于commands.getstatusoutput()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.getoutput(cmd)</span><br></pre></td></tr></table></figure><p>subprocess.getoutput(cmd) 接收字符串格式的命令，执行命令并返回执行结果，其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><blockquote><p>subprocess是用来替代os.system等函数的，当subprocess.call()、subprocess.check_call()、subprocess.check_output()和subprocess.run()这些高级函数无法满足需求时，我们可以使用subprocess.Popen类来实现我们需要的复杂功能。</p></blockquote><blockquote><p>学会如何调用命令 就可以写一些自己常用的脚本了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP报文格式</title>
      <link href="/internet8/"/>
      <url>/internet8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http.jpg"></p><h2 id="HTTP报文分类"><a href="#HTTP报文分类" class="headerlink" title="HTTP报文分类"></a>HTTP报文分类</h2><ul><li>请求报文 request</li><li>响应报文 response</li></ul><h2 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h2><ul><li>报文都是默认ASCII文本（易于人读格式）</li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http3.png"></p><h2 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/httpf.png"></p><p><strong>注:</strong> URI=Uniform Resource Identifiers 不等于 URL，可以看作URL 后面部分</p><hr><h2 id="HTTP方法类型比较"><a href="#HTTP方法类型比较" class="headerlink" title="HTTP方法类型比较"></a>HTTP方法类型比较</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http4.png"></p><h3 id="上传表单-各字段-输入值"><a href="#上传表单-各字段-输入值" class="headerlink" title="上传表单(各字段)输入值"></a><strong>上传表单(各字段)输入值</strong></h3><ul><li><h4 id="Post方法"><a href="#Post方法" class="headerlink" title="Post方法"></a><strong>Post</strong>方法</h4><ul><li>网页时常包含表单输入</li><li>输入值在请求报文的实体主体中被上载到服务器</li></ul></li><li><h4 id="URL方法："><a href="#URL方法：" class="headerlink" title="URL方法："></a><strong>URL</strong>方法：</h4><ul><li>使用GET方法</li><li>表单(各字段)输入值被上载,以URL请求行的字段: <a href="http://www.somesite.com/animalsearch?monkeys&amp;banana">www.somesite.com/animalsearch?monkeys&amp;banana</a></li></ul></li></ul><hr><h2 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h2><p>以下是HTTP响应消息的格式</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http1.png"></p><h3 id="HTTP-响应的状态码"><a href="#HTTP-响应的状态码" class="headerlink" title="HTTP 响应的状态码"></a><strong>HTTP</strong> <strong>响应的状态码</strong></h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议概述</title>
      <link href="/internet7/"/>
      <url>/internet7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http.jpg"></p><blockquote><p>HTTP：超文本传输协议</p><p><code>hypertext transfer protocol</code></p><p>是我们每天使用最多的协议之一</p><p>每当我们访问网站，浏览网页就是基于HTTP协议</p><p>所以掌握HTTP是十分重要的</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>是 Web的应用层协议</p></li><li><p> 基于 client/server模式 </p></li><li><p> client: 浏览器browser请求, 接收、解释、显示 Web对象 </p></li><li><p> server: Web服务器响应请求,发送 Web对象    + HTTP 1.0: RFC 1945    + HTTP 1.1: RFC 2616</p></li><li><p>下层的服务是使用 TCP协议</p><ul><li> 客户初始化一个与HTTP服务器80端口的TCP连接 (创建套接字)</li><li>HTTP服务器接受来自客户的TCP连接请求, 建立连接</li></ul><ul><li>Browser (HTTP client)和Web服务器 (HTTP server) 交换HTTP消息(应用层协 议消息)包括HTTP请求和响应消息</li><li>最后结束(或叫关闭)TCP连接</li></ul></li><li><p>是无状态协议</p><ul><li>不维护客户先前的状态信息（很复杂）</li></ul></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http.png"></p><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><p><strong>Web</strong>  和  <strong>HTTP</strong></p><ul><li><p>网页 (Web页，或称文档)由许多对象组成。</p></li><li><p> 对象就是文件，可以是HTML文件, JPEG图像, Java applet, 音频文件… </p></li><li><p> 多数网页由单个基本HTML文件和若干个所引用的对象构成</p></li><li><p> 每个对象被一个URL(Uniform Resource Locator统一资源定位符)寻址，确定对象的位置</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/url.png"></p><h2 id="HTTP连接方式"><a href="#HTTP连接方式" class="headerlink" title="HTTP连接方式"></a>HTTP连接方式</h2><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><ul><li> 每个TCP连接上只传送一个 对象，下载多个对象需要建 立多个TCP连接</li><li>HTTP/1.0使用非持久HTTP 连接</li></ul><h3 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h3><ul><li>一个TCP连接上可以传送多个对象</li><li> HTTP/1.1默认使用持久 HTTP连接</li></ul><p>例子：假设用户输入URL <a href="http://www.someschool.edu/someDepartment/home.index">http://www.someSchool.edu/someDepartment/home.index</a></p><ol><li><p>HTTP客户初始化1个与服 务器主机 <a href="http://www.someschool.edu中/">www.someSchool.edu中</a> HTTP服务器的TCP连接</p></li><li><p><a href="http://www.someschool.edu服务器/">www.someSchool.edu服务器</a> 主机中的HTTP服务器在80端口监 听来自HTTP客户的TCP连接请求. 收到连接请求, 接受, 建立连接, 通 知客户</p></li><li><p>HTTP客户发送1个HTTP 请求消息 (requestmessage )包含URL到 TCP连接套接字. 消息指出 客户要Web对象- someDepartment/hom e.index</p></li><li><p>HTTP服务器接收请求消息, 产生1个响应消息response message 包含被请求对象, 并发送这个消息到自身TCP 连接套接字</p></li><li><p>HTTP服务器结束TCP 连接.</p></li><li><p>HTTP 客户接收包含html 文件的响应消息, 显示html. 解析html文件, 找出10个引 用 jpeg对象</p></li><li><p>对10个引用jpeg对象的 每1个重复步骤1-5</p></li></ol><h3 id="响应时间模型"><a href="#响应时间模型" class="headerlink" title="响应时间模型"></a>响应时间模型</h3><p>定义往返时间RTT(Round-Trip Time): </p><p>1个小分组从客户主机到服务器再到客户主机所花费的时间.</p><p>响应时间:</p><ul><li>1个RTT用于建立TCP连接</li><li> 1个RTT用于HTTP请求/响应消息的交互</li><li> Html文件传输时间</li></ul><p><code>total = 2RTT+transmit time</code></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/rtt.png"></p><h3 id="持久HTTP连接"><a href="#持久HTTP连接" class="headerlink" title="持久HTTP连接"></a>持久HTTP连接</h3><p>服务器发送响应消息后保 持连接 </p><p>同1客户/服务器的后续 HTTP 消息继续在该连接 上传送</p><blockquote><p>非持久HTTP连接，我们看到了一些问题：</p><ul><li>每个对象需要2个RTT</li><li> OS必须为每个TCP连接分配主机资源 </li><li>大量客户的并发TCP连接形成服务器的严重负担</li></ul><p>所以我们 来看看持久的HTTP连接</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/lhttp.png"></p>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层协议原理</title>
      <link href="/internet6/"/>
      <url>/internet6/</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p>应用层是我们日常接触到的层次，比如：</p></div><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a1.png"></p><h2 id="应用层体系结构"><a href="#应用层体系结构" class="headerlink" title="应用层体系结构"></a>应用层体系结构</h2><blockquote><p>通常有三个模式</p></blockquote><ul><li><p><code>C/S 模式</code>:</p><p><strong>服务器</strong>:</p><ul><li><p>总是打开的主机</p></li><li><p>具有固定的、众所周知的IP地址</p></li><li><p>主机群集常被用于创建强大的虚拟服务器</p></li></ul><p><strong>客户机</strong>:</p><ul><li><p>同服务器端通信</p></li><li><p>可以间断的同服务器连接</p></li><li><p>可以拥有动态IP地址</p></li><li><p>客户机相互之间不直接通信</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a4.png"></p></li><li><p><code>P2P体系结构</code>:</p><ul><li><p>没有总是打开的服务器</p></li><li><p>任意一对主机直接相互通信</p></li><li><p>对等方间歇连接并且可以改变IP地址</p></li><li><p>优点：自扩展性强</p></li><li><p>缺点：难以管理</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a3.png"></p></li><li><p><code>C/S P2P的混合模式</code>（结合两者优点）如：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a2.png"></p></li></ul><h2 id="应用层通信原理"><a href="#应用层通信原理" class="headerlink" title="应用层通信原理"></a>应用层通信原理</h2><blockquote><p>网络应用实际上是端系统之间对等实体的进程在通信</p></blockquote><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ul><li>同一主机上的两个进程通过内部进程通信机制进行通信</li><li>不同主机上的进程通过交换报文相互通信</li></ul><blockquote><ul><li><p><strong>客户进程</strong>: 发起通信的进程</p></li><li><p><strong>服务器进程</strong>: 等待联系的进程</p></li><li><p>注意:具有P2P体系结构的应用程序既有客户进程和服务器进程。</p></li></ul></blockquote><h3 id="进程与计算机网络的接口：套接字-socket"><a href="#进程与计算机网络的接口：套接字-socket" class="headerlink" title="进程与计算机网络的接口：套接字 socket"></a>进程与计算机网络的接口：套接字 socket</h3><blockquote><p>在对等实体之间的进程通过套接字通信</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a5.png"></p><p>进程通过它的套接字在网络上发送和接收报文</p><p>套接字又叫做应用程序编程接口API </p><p>用户通过API对传输层的控制仅限于: </p><p>(1) 选择传输协议</p><p>(2) 能设定几个参数</p><h3 id="浅谈进程寻址"><a href="#浅谈进程寻址" class="headerlink" title="浅谈进程寻址"></a>浅谈进程寻址</h3><blockquote><p>我们有那么多网络应用，QQ，微信。</p><p>对等实体之间的进程通信怎么找到它的目的地呢？</p></blockquote><ul><li><p>为了一个进程能接收报文， 它需要一个标识</p></li><li><p>主机有唯一的32位IP地址 **问:**主机的IP地址足够标识进程吗?</p></li><li><p>**答:**不能。因为一台主机上 能够运行许多进程。</p></li></ul><p>主机上的进程标识包括IP地址 和<strong>端口号</strong></p><p>常用应用程序的端口号: </p><ul><li><p>Web服务:80</p></li><li><p>邮件服务:25</p></li></ul><p>所以说网络应用进程寻址主要是通过IP+端口号实现的</p><h2 id="应用层需要什么服务？"><a href="#应用层需要什么服务？" class="headerlink" title="应用层需要什么服务？"></a>应用层需要什么服务？</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a6.png"></p><blockquote><p> 不同应用的服务是不一样的，在下层传输层提供的服务是可能不一样的。</p></blockquote><p>比如：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a7.png"></p><h3 id="因特网运输协议提供的服务"><a href="#因特网运输协议提供的服务" class="headerlink" title="因特网运输协议提供的服务"></a>因特网运输协议提供的服务</h3><h4 id="TCP服务"><a href="#TCP服务" class="headerlink" title="TCP服务"></a><strong>TCP</strong>服务</h4><p> 面向连接的服务:在客户机程序和服务器 程序之间必须建立连接</p><ul><li><p> 可靠的传输服务: 接收和发送进程间</p></li><li><p>流量控制: 发送方不会淹没接收方</p></li><li><p>拥塞控制: 网络出现拥塞时抑制发送进程 </p></li><li><p>没有提供:时延保证，最小带宽保证</p></li></ul><h4 id="UDP-服务"><a href="#UDP-服务" class="headerlink" title="UDP 服务"></a><strong>UDP</strong> <strong>服务</strong></h4><p> 不可靠数据传输</p><p> 没有提供:</p><ul><li>建立连接</li><li>可靠性</li><li>流量控制</li><li>拥塞控制</li><li>时延和带宽保证</li></ul><blockquote><p>应用层 根据所需确定下层服务</p></blockquote><p>关于传输层的安全性</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/a8.png"></p>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议层次以及服务模型</title>
      <link href="/internet5/"/>
      <url>/internet5/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>经过我们之前对Internet的介绍，Internet是什么，我们可以理解到，Internet是一个极其复杂的系统。</p></div><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/internetc.png"></p><h2 id="为什么我们要分层呢？"><a href="#为什么我们要分层呢？" class="headerlink" title="为什么我们要分层呢？"></a>为什么我们要分层呢？</h2><ul><li>清楚的结构允许我们对大型复杂系统定义其特定部分，探讨其各部分的关系，比如分层参考模型的讨论</li><li>模块化使得系统的维护、升级简化改变其某一层服务的具体实现,对系统其余部分透明(不影响) </li><li>分层的弊端?<ul><li>各层可能重复较低层功能 …</li></ul></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/whyosi.png"></p><h2 id="两种参考模型"><a href="#两种参考模型" class="headerlink" title="两种参考模型"></a>两种参考模型</h2><h3 id="ISO-OSI-七层参考模型"><a href="#ISO-OSI-七层参考模型" class="headerlink" title="ISO/OSI 七层参考模型"></a>ISO/OSI 七层参考模型</h3><blockquote><p>是国际通用标准，为我们后来发展做参考</p><p>实际使用不多，比较繁杂。</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>层号</td><td>层的名称</td><td>层的英文名称</td><td>层的英语缩写</td></tr><tr><td>7</td><td>应用层</td><td>Application</td><td>A</td></tr><tr><td>6</td><td>表示层</td><td>Presentation</td><td>P</td></tr><tr><td>5</td><td>会话层</td><td>Session</td><td>S</td></tr><tr><td>4</td><td>传输层</td><td>Transport</td><td>T</td></tr><tr><td>3</td><td>网络层</td><td>NetWork</td><td>N</td></tr><tr><td>2</td><td>数据链路层</td><td>Data Link</td><td>DL</td></tr><tr><td>1</td><td>物理层</td><td>Physical</td><td>PL</td></tr></tbody></table><h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h3><blockquote><p>基于OSI 去掉表示层，会话层</p></blockquote><p>主要有两种变形：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/tcpp.png"></p><h2 id="网络协议栈"><a href="#网络协议栈" class="headerlink" title="网络协议栈"></a>网络协议栈</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/tcpip.png"></p><blockquote><p> 具体实现是通过协议实现，总的协议叫做协议栈</p></blockquote><ul><li><p>应用层application:     支持网络应用，报文传送 </p><ul><li>FTP, SMTP, STTP …</li></ul></li><li><p>传输层transport:    主机进程间数据段传送</p><ul><li>TCP,UDP</li></ul></li><li><p>网络层network:   主机(源目标节点)间分组传送 </p><ul><li>主要是IP协议, 路由协议 …</li></ul></li><li><p>链路层link:    相邻网络节点间的数据帧传送</p><ul><li>PPP, Ethernet …</li></ul></li><li><p> 物理层physical:</p></li><li><p>物理介质上的比特传送</p></li></ul><h2 id="逻辑通信"><a href="#逻辑通信" class="headerlink" title="逻辑通信"></a>逻辑通信</h2><ul><li><p>分布式</p></li><li><p>在各节点的网络实体(entities) 实现了各层的功能</p><blockquote><p> 主机实现5层功能，路由器和 交换机实现2-3层功能。</p></blockquote></li><li><p>网络实体完成功能动作, 对等实体交换消息</p></li></ul><blockquote><ul><li><p>实体：定义自身功能的硬软件的集合</p></li><li><p>对等实体: 两台计算机上同一层 所属的程序、进程或实体称为该层的对等程序、对等进程或 对等实体。</p></li><li><p>逻辑通信就是在对等实体之间交互，不用管其他层次，各司其职</p></li></ul></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/logic.png" alt="如图所示传输层的逻辑通信发生在对等实体之间"></p><h2 id="物理通信"><a href="#物理通信" class="headerlink" title="物理通信"></a>物理通信</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/physics.png"></p><p>各层发方从上层到下层，收方从下层到上层传递数据，上层使用下层提供的服务</p><ul><li><p>发方添加头部信息创建新的数据单元，收方去掉头部 </p></li><li><p>传递新的数据单元到下层/上层</p></li><li><p>各层传送不同的协议数据单元(也叫作 <code>PDU</code>)</p></li></ul><blockquote><p>物理通信可以看作逻辑通信的实现，描述了数据传输的具体过程，如图所示</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/physics2.png"></p><div class="note success flat"><p>以上是对协议层次，以及服务模型的总结</p></div>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook详细教程（上）</title>
      <link href="/jupyter1/"/>
      <url>/jupyter1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jupyter Notebook 是一个非常强大的工具，常用于交互式地开发和展示数据科学项目。它将代码和它的输出集成到一个文档中，并且结合了可视的叙述性文本、数学方程和其他丰富的媒体。它直观的工作流促进了迭代和快速的开发，使得 notebook 在当代数据科学、分析和越来越多的科学研究中越来越受欢迎。最重要的是，作为<a href="https://jupyter.org/">开源项目</a>的一部分，它们是完全免费的。</p></blockquote><p>Jupyter 项目是早期 IPython Notebook 的继承者，它在 2010 年首次作为原型发布。尽管在 Jupyter Notebook 中可以使用许多不同的编程语言，但本文将重点介绍 Python，因为在 Jupyter Notebook 中 python 是最常见的。</p><p>为了充分理解本教程，你应该熟悉编程，特别是 Python 和 <a href="https://pandas.pydata.org/">pandas</a>（译者注：Pandas 是python的一个数据分析包）。也就是说，如果你有编程经验，这篇文章中的 Python 不会太陌生，而 pandas 也是容易理解的。Jupyter Notebooks 也可以作为一个灵活的平台来运行 pandas 甚至是 Python，这将在这篇文章中体现。</p><p>我将会：</p><ul><li>介绍一些安装 Jupyter 和创建你的第一个 notebook 的基本知识。</li><li>深入钻研，学习所有重要的术语。</li><li>探索笔记是如何轻松地在网上共享和发布。事实上，这篇文章就是一个 Jupyter notebook！这里的一切都是在 Jupyter notebook 环境中编写的，而你正在以只读的形式查看它。</li></ul><h3 id="Jupyter-Notebook-数据分析实例"><a href="#Jupyter-Notebook-数据分析实例" class="headerlink" title="Jupyter Notebook 数据分析实例"></a>Jupyter Notebook 数据分析实例</h3><p>我们将通过一个样本分析，来回答一个真实的问题，这样你就可以看到一个 notebook 的工作流是如何使任务直观地完成的，当我们分享给其他人时也可以让其他人更好地理解。</p><p>假设你是一名数据分析师，你的任务是弄清楚美国最大公司的利润变化历史。你会发现自从 1955 年第一次发表这个名单以来，已有超过 50 年的财富 500 强企业的数据集，这些数据都是从<a href="http://archive.fortune.com/magazines/fortune/fortune500_archive/full/2005/">《财富》</a>的公共档案中收集来的。我们已经创建了一个可用数据的 CSV 文件（你可以在<a href="https://www.dataquest.io/blog/large_files/fortune500.csv">这里</a>获取它）。</p><p>正如我们将要演示的，Jupyter Notebooks 非常适合这项调查。首先，让我们安装 Jupyter。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>初学者开始使用 Jupyter Notebooks 的最简单方法是安装 <a href="https://anaconda.org/">Anaconda</a>。Anaconda 是最广泛使用的用于数据科学的 Python 发行版，并且预装了所有常用的库和工具。除了 Jupyter 之外，Anaconda 中还封装了一些 Python 库，包括 <a href="http://www.numpy.org/">NumPy</a>，<a href="https://pandas.pydata.org/">pandas</a> 和 <a href="https://matplotlib.org/">Matplotlib</a>，并且这<a href="https://docs.anaconda.com/anaconda/packages/pkg-docs">完整的1000+列表</a>是详尽的。这使你可以在自己完备的数据科学研讨会中运行，而不需要管理无数的安装包或担心依赖项和特定操作系统的安装问题。</p><p>安装 Anaconda：</p><ol><li><a href="https://www.anaconda.com/download/">下载</a>支持 Python 3 （就不用 Python 2.7 了）的最新版本 Anaconda。</li><li>按照下载页面或可执行文件中的说明安装 Anaconda。</li></ol><p>如果你是已经安装了 Python 的更高级的用户，并且更喜欢手动管理你的软件包，那么你可以使用pip:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure><h2 id="创建你的第一个-Notebook"><a href="#创建你的第一个-Notebook" class="headerlink" title="创建你的第一个 Notebook"></a>创建你的第一个 Notebook</h2><p>在本节中，我们将看到如何运行和保存 notebooks，熟悉它们的结构，并理解接口。我们将会熟悉一些核心术语，这些术语将引导你对如何使用 Jupyter notebooks 进行实际的理解，并为下一节做铺垫，该部分将通过示例数据分析，并将我们在这里学到的所有东西带到生活中。</p><h3 id="运行-Jupyter"><a href="#运行-Jupyter" class="headerlink" title="运行 Jupyter"></a>运行 Jupyter</h3><p>在 Windows 上，你可以通过将 Anaconda 快捷方式添加到你的开始菜单来运行 Jupyter，它将在你的默认网页浏览器中打开一个新的标签，看起来就像下面的截图一样。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp1.png"></p><p>这是 Notebook Dashboard，专门用于管理 Jupyter Notebooks。把它看作是探索，编辑和创建 notebooks 的启动面板。你可以把它看作是探索、编辑和创造你的 notebook 的发射台。</p><p>请注意，仪表板将只允许您访问 Jupyter 启动目录中包含的文件和子文件夹；但是，启动目录是<a href="https://stackoverflow.com/q/35254852/604687">可以更改的</a>。还可以通过输入 <code>jupyter notebook</code> 命令在任何系统上启动指示板(或在Unix系统上的终端);在这种情况下，当前工作目录将是启动目录。</p><p>聪明的读者可能已经注意到，仪表板的 URL 类似于 <code>http://localhost:8888/tree</code>。Localhost 不是一个网站，而是表示从你的<em>本地</em>机器(你自己的计算机)中服务的内容。Jupyter notebook 和仪表板都是 web 应用程序，Jupyter 启动了一个本地的 Python 服务器，将这些应用程序提供给你的 web 浏览器，使其从根本上独立于平台，并打开了更容易在 web 上共享的大门。</p><p>仪表板的界面大部分是不言自明的 —— 尽管我们稍后会简要介绍它。我们还在等什么?浏览到你想要创建你的第一个 notebook 的文件夹，点击右上角的 <code>New</code> 下拉按钮，选择 <code>Python 3</code> (或者你喜欢的版本)。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp2.png"></p><p>我们马上能看到成果了!你的第一个 Jupyter Notebook 将在新标签页打开 - 每个 notebook 使用它自己的标签，因为你可以同时打开多个 notebook。如果您切换回仪表板，您将看到新文件 <code>Untitled</code> 。你应该看到一些绿色的文字告诉 notebook 正在运行。</p><h4 id="什么是-ipynb-文件？"><a href="#什么是-ipynb-文件？" class="headerlink" title="什么是 ipynb 文件？"></a>什么是 ipynb 文件？</h4><p>理解这个文件到底是什么是很有用的。每一个 <code>.ipynb</code> 文件是一个文本文件，它以一种名为 <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> 的格式描述你的 notebook 的内容。每个单元格及其内容，包括已被转换成文本字符串的图像附件，都与一些<a href="https://ipython.org/ipython-doc/3/notebook/nbformat.html#metadata">元数据</a>一起列出。你可以自己编辑这个 – 如果你知道你在做什么! – 通过在 notebook 的菜单栏中选择 “Edit &gt; Edit Notebook Metadata”。</p><p>你还可以通过在仪表板上的控件中选择 <code>Edit</code> 来查看你的 notebook 文件的内容，但是重要的是可以；除了好奇之外没有理由这样做，除非你真的知道你在做什么。</p><h3 id="notebook-的接口"><a href="#notebook-的接口" class="headerlink" title="notebook 的接口"></a>notebook 的接口</h3><p>既然你面前有一个打开的 notebook，它的界面就不会看起来完全陌生；毕竟，Jupyter 实际上只是一个高级的文字处理器。为什么不看一看？查看菜单以了解它，尤其是花点时间浏览命令选项板（这是带键盘图标的小按钮（或 <code>Ctrl + Shift + P</code>））下滚动命令列表。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp3.png"></p><p>您应该注意到两个非常重要的术语，这对您来说可能是全新的：<em>单元格</em>和<em>内核</em>。它们是理解 Jupyter 和区分 Jupyter 不只是一个文字处理器的关键。幸运的是，这些概念并不难理解。</p><ul><li>内核是一个“计算引擎”，它执行一个 notebook 文档中包含的代码。</li><li>单元格是一个容器，用于装载在 notebook 中显示的文本或是会被 notebook 内核执行的代码。</li></ul><h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>稍后我们再讨论内核，在这之前我们先来了解一下单元格。单元格构成一个笔记本的主体。在上面一节的新建的 notebook 屏幕截图中，带有绿色轮廓的盒子是一个空的单元格。我们将介绍两种主要的单元格类型：</p><ul><li><strong>代码单元</strong>包含要在内核中执行的代码，并在下面显示它的输出。</li><li><strong>Markdown 单元</strong>包含使用 Markdown 格式化的文本，并在运行时显示其输出。</li></ul><p>新的 notebook 中的第一个单元总是一个代码单元。让我们用一个经典的 hello world 示例来测试它。输入 <code>print(&#39;Hello World!&#39;)</code> 到单元格中，点击上面工具栏中的 run 按钮，或者按下 Ctrl + Enter 键。结果应该是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>当你运行这个单元格时，它的输出将会显示在它的下面，而它左边的标签将会从 <code>In [ ]</code> 变为 <code>In [1]</code>。代码单元的输出也是文档的一部分，这就是为什么你可以在本文中看到它的原因。你总是可以区分代码和 Markdown 单元，因为代码单元格在左边有标签，而 Markdown 单元没有。标签的“In”部分仅仅是“输入”的缩写，而标签号表示在内核上执行单元格时的顺序 —— 在这种情况下，单元格被第一个执行。再次运行单元格，标签将更改为 <code>In[2]</code>，因为此时单元格是在内核上运行的第二个单元格。这让我们在接下来对内核的深入将非常有用。</p><p>从菜单栏中，单击<em>插入</em>并选择<em>在下方插入单元格</em>，创建你新的代码单元，并尝试下面的代码，看看会发生什么。你注意到有什么不同吗?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这个单元不产生任何输出，但执行需要 3 秒。请注意，Jupyter 将标签更改为 <code>In[*]</code> 来表示单元格当前正在运行。</p><p>一般来说，单元格的输出来自于单元执行过程中指定打印的任何文本数据，以及单元格中最后一行的值，无论是单独变量，函数调用还是其他内容。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">recipient</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#123;&#125;!&#x27;</span>.<span class="built_in">format</span>(recipient)</span><br><span class="line"></span><br><span class="line">say_hello(<span class="string">&#x27;Tim&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Hello, Tim!&#x27;</span><br></pre></td></tr></table></figure><p>你会发现自己经常在自己的项目中使用它，以后我们会看到更多。</p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>在运行单元格时，你可能经常看到它们的边框变成了蓝色，而在编辑的时候它是绿色的。总是有一个“活动”单元格突出显示其当前模式，绿色表示“编辑模式”，蓝色表示“命令模式”。</p><p>到目前为止，我们已经看到了如何使用 <code>Ctrl + Enter</code> 来运行单元格，但是还有很多。键盘快捷键是 Jupyter 环境中非常流行的一个方面，因为它们促进了快速的基于单元格的工作流。许多这些都是在命令模式下可以在活动单元上执行的操作。</p><p>下面，你会发现一些 Jupyter 的键盘快捷键列表。你可能不会马上熟悉它们，但是这份清单应该让你对这些快捷键有了了解。</p><ul><li><p>在编辑和命令模式之间切换，分别使用 <code>Esc</code> 和 <code>Enter</code>。</p></li><li><p>在命令行模式下：</p><ul><li><p>用 <code>Up</code> 和 <code>Down</code> 键向上和向下滚动你的单元格。</p></li><li><p>按 <code>A</code> 或 <code>B</code> 在活动单元上方或下方插入一个新单元。</p></li><li><p><code>M</code> 将会将活动单元格转换为 Markdown 单元格。</p></li><li><p><code>Y</code> 将激活的单元格设置为一个代码单元格。</p></li><li><p><code>D + D</code>(按两次 <code>D</code>)将删除活动单元格。</p></li><li><p>Z将撤销单元格删除。   * 按住 Shift，同时按 Up 或 Down ，一次选择多个单元格。</p><ul><li>选择了 multple，<code>Shift + M</code> 将合并你的选择。</li></ul></li></ul></li><li><p><code>Ctrl + Shift + -</code>，在编辑模式下，将在光标处拆分活动单元格。</p></li><li><p>你也可以在你的单元格的左边用 <code>Shift + Click</code> 来选择它们。</p></li></ul><p>你可以在自己的 notebook 上试试这些。一旦你有了尝试，创建一个新的 Markdown 单元，我们将学习如何在我们的 notebook 中格式化文本。</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p><a href="https://www.markdownguide.org/">Markdown</a> 是一种轻量级的、易于学习的标记语言，用于格式化纯文本。它的语法与 HTML 标记有一对一的对应关系，所以这里的一些经验是有用的，但绝对不是先决条件。请记住，这篇文章是在一个 Jupyter notebook 上写的，所以你所看到的所有的叙述文本和图片都是在 Markdown 完成的。让我们用一个简单的例子来介绍基础知识。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题。</span></span><br><span class="line"><span class="section">## 这是一个二级标题。</span></span><br><span class="line">这是一些构成段落的纯文本。</span><br><span class="line">通过 <span class="strong">**粗体**</span> 和 <span class="strong">__bold__</span> ，或 <span class="emphasis">*斜体*</span> 和 <span class="emphasis">_italic_</span> 添加重点。</span><br><span class="line"></span><br><span class="line">段落必须用空行隔开。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 有时我们想要包含列表。</span><br><span class="line"><span class="bullet">  *</span> 可以缩进。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 列表也可以编号。</span><br><span class="line"><span class="bullet">2.</span> 有序列表。</span><br><span class="line"></span><br><span class="line">[<span class="string">有可能包括超链接</span>](<span class="link">https://www.example.com</span>)</span><br><span class="line"></span><br><span class="line">内联代码使用单个倒引号：<span class="code">`foo()`</span>，代码块使用三个倒引号:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或可由4个空格组成：</span><br><span class="line"></span><br><span class="line"><span class="code">    foo()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">最后，添加图片也很简单：![<span class="string">Alt</span>](<span class="link">https://www.example.com/image.jpg</span>)</span><br></pre></td></tr></table></figure><p>当附加图像时，你有三个选项：</p><ul><li>使用一个在 web 上的图像的 URL。</li><li>使用一个与你的 notebook 一起维护的本地 URL，例如在同一个 git 仓库中。</li><li>通过 “Edit &gt; Insert Image” 添加附件；这将把图像转换成字符串并存储在你的 notebook 中的 <code>.ipynb</code> 文件。</li><li>注意这将使你的 <code>.ipynb</code> 的文件更大!</li></ul><p>Markdown 有很多细节，特别是在超链接的时候，也可以简单地包括纯 HTML。一旦你发现自己突破了上述基础的限制，你可以参考 Markdown 创造者 John Gruber 的<a href="https://daringfireball.net/projects/markdown/syntax">官方指南</a>。</p><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>每个 notebook 后台都运行一个内核。当你运行一个代码单元时，该代码在内核中执行，任何输出都会返回到要显示的单元格。在单元格间切换时内核的状态保持不变 —— 它与文档有关，而不是单个的单元格。</p><p>例如，如果你在一个单元中导入库或声明变量，那么它们将在另一个单元中可用。通过这种方式，你可以将 notebook 文档看作是与脚本文件相当的，除了它是多媒体。让我们试着去感受一下。首先，我们将导入一个 Python 包并定义一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>一旦我们执行了上面的单元格，我们就可以在任何其他单元中引用 <code>np</code>和 <code>square</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">y = square(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d squared is %d&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 squared is 1</span><br></pre></td></tr></table></figure><p>不管你的 notebook 里的单元格顺序如何，这都是可行的。你可以自己试一下，让我们再把变量打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Is %d squared is %d?&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is 1 squared is 1?</span><br></pre></td></tr></table></figure><p>答案毫无疑问。让我们尝试改变 <code>y</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>如果我们再次运行包含 <code>print</code> 语句的单元格，你认为会发生什么?我们得到的结果是 <code>Is 4 squared is 10?</code>！</p><p>大多数情况下，你的 notebook 上的工作流将会从上到下，但是返回上文做一些改变是很正常的。在这种情况下，每个单元的左侧的执行顺序，例如 <code>In [6]</code>，将让你知道你的任何单元格是否有陈旧的输出。如果你想要重置一些东西，从内核菜单中有几个非常有用的选项:</p><ul><li>重启：重新启动内核，从而清除定义的所有变量。</li><li>重启和清除输出:与上面一样，但也将擦除显示在您的代码单元格下面的输出。</li><li>重启和运行所有:和上面一样，但也会运行你的所有单元，从第一个到最后。</li></ul><p>如果你的内核一直在计算中，但你希望停止它，你可以选择 <code>Interupt</code> 选项。</p><h4 id="选择一个内核"><a href="#选择一个内核" class="headerlink" title="选择一个内核"></a>选择一个内核</h4><p>你可能已经注意到，Jupyter 提供了更改内核的选项，实际上有许多不同的选项可供选择。当你通过选择 Python 版本从仪表板中创建一个新的笔记时，你实际上是在选择使用哪个内核。</p><p>不仅有不同版本的 Python 的内核，还有<a href="https://github.com/jupyter/jupyter/jupyter/wiki/jupyter-kernel">(超过 100 种语言)</a>，包括 Java 、C ，甚至 Fortran。数据科学家可能特别感兴趣的是 <a href="https://irkernel.github.io/">R</a> 和 <a href="https://github.com/JuliaLang/IJulia.jl">Julia</a>，以及 <a href="https://github.com/imatlab/imatlab">imatlab</a> 和 <a href="https://github.com/calysto/matlab_kernel">Calysto MATLAB内核</a> 。<a href="https://github.com/vatlab/SOS">SoS 内核</a>在一个 notebook 中提供多语言支持。每个内核都有自己的安装指令，但可能需要您在计算机上运行一些命令。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook详细教程（下）</title>
      <link href="/jupyter2/"/>
      <url>/jupyter2/</url>
      
        <content type="html"><![CDATA[<h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>现在我们已经看了一个 Jupyter Notebook，是时候看看它们在实践中使用了，这应该会让你更清楚地了解它们为什么那么受欢迎。现在是时候开始使用前面提到的财富 500 数据集了。请记住，我们的目标是了解美国最大公司的利润在历史上是如何变化的。</p><p>值得注意的是，每个人都会有自己的喜好和风格，但是一般原则仍然适用，如果你愿意，你可以在自己的 notebook 上跟随这一段，这也给了你自由发挥空间。</p><h3 id="命名你的-notebook"><a href="#命名你的-notebook" class="headerlink" title="命名你的 notebook"></a>命名你的 notebook</h3><p>在开始编写项目之前，你可能想要给它一个有意义的名称。也许有点让人困惑，你不能从 Notebook 的应用程序中命名或重命名你的 notebook，而必须使用仪表盘或你的文件浏览器来重命名 <code>.ipynb</code> 文件。我们将返回到仪表板，以重命名你之前创建的文件，它将有默认的 notebook 的文件名是 <code>Untitled.ipynb</code> 。</p><p>你不能在 notebook 运行时重命名它，所以你首先要关闭它。最简单的方法就是从 notebook 菜单中选择 “File &gt; Close and Halt”。但是，您也可以通过在笔记本应用程序内 “Kernel &gt; Shutdown” 或在仪表板中选择 notebook 并点击 “Shutdown” (见下图)来关闭内核。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp4.png"></p><p>然后你可以选择你的 notebook，并在仪表板控件中点击 “Rename”。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp5.png"></p><p>注意，在你的浏览器中关闭笔记的标签页将不会像在传统的应用程序中关闭文档的方式一样关闭你的 notebook。notebook 的内核将继续在后台运行，需要在真正“关闭”之前停止运行 —— 不过如果你不小心关掉了你的标签或浏览器，这就很方便了！如果内核被关闭，你可以关闭该选项卡，而不用担心它是否还在运行。</p><p>如果你给你的 notebook 起了名字，打开它，我们就可以开始实践了。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>通常一开始就使用一个专门用于导入和设置的代码单元，因此如果你选择添加或更改任何内容，你可以简单地编辑和重新运行该单元，而不会产生任何副作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line"></span><br><span class="line">sns.set(style=&quot;darkgrid&quot;)</span><br></pre></td></tr></table></figure><p>我们导入 <a href="https://pandas.pydata.org/">pandas</a> 来处理我们的数据，<a href="https://matplotlib.org/">Matplotlib</a> 绘制图表，<a href="https://seabornpydata.org/">Seaborn</a> 使我们的图表更美。导入 <a href="http://www.numpy.org/">NumPy</a> 也是很常见的，但是在这种情况下，虽然我们使用的是 pandas，但我们不需要显式地使用它。第一行不是 Python 命令，而是使用一种叫做行魔法的东西来指示 Jupyter 捕获 Matplotlib 图并在单元输出中呈现它们；这是超出本文范围的一系列高级特性之一。</p><p>让我们来加载数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(&#x27;fortune500.csv&#x27;)</span><br></pre></td></tr></table></figure><p>在单个单元格中这样做也是明智的，因为我们需要在任何时候重新加载它。</p><h3 id="保存和检查点"><a href="#保存和检查点" class="headerlink" title="保存和检查点"></a>保存和检查点</h3><p>现在我们已经开始了，最好的做法是定期存储。按 <code>Ctrl + S</code> 键可以通过调用“保存和检查点”命令来保存你的 notebook，但是这个检查点又是什么呢?</p><p>每当你创建一个新的 notebook 时，都会创建一个检查点文件以及你的 notebook 文件；它将位于你保存位置的隐藏子目录中称作 <code>.ipynb_checkpoints</code>，也是一个 <code>.ipynb</code> 文件。默认情况下，Jupyter 将每隔 120 秒自动保存你的 notebook，而不会改变你的主 notebook 文件。当你“保存和检查点”时，notebook 和检查点文件都将被更新。因此，检查点使你能够在发生意外事件时恢复未保存的工作。你可以通过 “File &gt; Revert to Checkpoint“ 从菜单恢复到检查点。</p><h3 id="调查我们的数据集"><a href="#调查我们的数据集" class="headerlink" title="调查我们的数据集"></a>调查我们的数据集</h3><p>我们正在稳步前进！我们的笔记已经被安全保存，我们将数据集 <code>df</code> 加载到最常用的 pandas 数据结构中，这被称为 <code>DataFrame</code> ，看起来就像一张表格。那我们的数据集会是怎样的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Year</th><th>Rank</th><th>Company</th><th>Revenue (in millions)</th><th>Profit (in millions)</th></tr></thead><tbody><tr><td>0</td><td>1955</td><td>1</td><td>General Motors</td><td>9823.5</td><td>806</td></tr><tr><td>1</td><td>1955</td><td>2</td><td>Exxon Mobil</td><td>5661.4</td><td>584.8</td></tr><tr><td>2</td><td>1955</td><td>3</td><td>U.S. Steel</td><td>3250.4</td><td>195.4</td></tr><tr><td>3</td><td>1955</td><td>4</td><td>General Electric</td><td>2959.1</td><td>212.6</td></tr><tr><td>4</td><td>1955</td><td>5</td><td>Esmark</td><td>2510.8</td><td>19.1</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Year</th><th>Rank</th><th>Company</th><th>Revenue (in millions)</th><th>Profit (in millions)</th></tr></thead><tbody><tr><td>25495</td><td>2005</td><td>496</td><td>Wm. Wrigley Jr.</td><td>3648.6</td><td>493</td></tr><tr><td>25496</td><td>2005</td><td>497</td><td>Peabody Energy</td><td>3631.6</td><td>175.4</td></tr><tr><td>25497</td><td>2005</td><td>498</td><td>Wendy’s International</td><td>3630.4</td><td>57.8</td></tr><tr><td>25498</td><td>2005</td><td>499</td><td>Kindred Healthcare</td><td>3616.6</td><td>70.6</td></tr><tr><td>25499</td><td>2005</td><td>500</td><td>Cincinnati Financial</td><td>3614.0</td><td>584</td></tr></tbody></table><p>看上去不错。我们有需要的列，每一行对应一个公司一年的财务数据。</p><p>让我们重命名这些列，以便稍后引用它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [&#x27;year&#x27;, &#x27;rank&#x27;, &#x27;company&#x27;, &#x27;revenue&#x27;, &#x27;profit&#x27;]</span><br></pre></td></tr></table></figure><p>接下来，我们需要探索我们的数据集，它是否完整? pandas 是按预期读的吗？缺少值吗?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(df)</span><br><span class="line"></span><br><span class="line">25500</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好吧，看起来不错 —— 从 1955 年到 2005 年，每年都有 500 行。</p><p>让我们检查我们的数据集是否如我们预期的那样被导入。一个简单的检查就是查看数据类型（或 dtypes）是否被正确地解释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br><span class="line"></span><br><span class="line">year         int64</span><br><span class="line">rank         int64</span><br><span class="line">company     object</span><br><span class="line">revenue    float64</span><br><span class="line">profit      object</span><br><span class="line">dtype: object</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来利润栏有点问题 —— 我们希望它像收入栏一样是 <code>float64</code>。这表明它可能包含一些非整数值，所以让我们看一看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">non_numberic_profits = df.profit.str.contains(&#x27;[^0-9.-]&#x27;)</span><br><span class="line">df.loc[non_numberic_profits].head()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>year</th><th>rank</th><th>company</th><th>revenue</th><th>profit</th></tr></thead><tbody><tr><td>228</td><td>1955</td><td>229</td><td>Norton</td><td>135.0</td><td>N.A.</td></tr><tr><td>290</td><td>1955</td><td>291</td><td>Schlitz Brewing</td><td>100.0</td><td>N.A.</td></tr><tr><td>294</td><td>1955</td><td>295</td><td>Pacific Vegetable Oil</td><td>97.9</td><td>N.A.</td></tr><tr><td>296</td><td>1955</td><td>297</td><td>Liebmann Breweries</td><td>96.0</td><td>N.A.</td></tr><tr><td>352</td><td>1955</td><td>353</td><td>Minneapolis-Moline</td><td>77.4</td><td>N.A.</td></tr></tbody></table><p>就像我们猜测的那样!其中一些值是字符串，用于表示丢失的数据。还有其他缺失的值么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set(df.profit[non_numberic_profits])</span><br><span class="line"></span><br><span class="line">&#123;&#x27;N.A.&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这很容易解释，但是我们应该怎么做呢？这取决于缺失了多少个值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(df.profit[non_numberic_profits])</span><br><span class="line"></span><br><span class="line">369</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它只是我们数据集的一小部分，虽然不是完全无关紧要，因为它仍然在 1.5% 左右。如果包含 N.A. 的行是简单地、均匀地按年分布的，那最简单的解决方案就是删除它们。所以让我们浏览一下分布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin_sizes, _, _ = plt.hist(df.year[non_numberic_profits], bins=range(1955, 2006))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp6.png"></p><p>粗略地看，我们可以看到，在一年中无效值最多的情况也小于 25，并且由于每年有 500 个数据点，删除这些值在最糟糕的年份中只占不到 4% 的数据。事实上，除了 90 年代的激增，大多数年份的缺失值还不到峰值的一半。为了我们的目的，假设这是可以接受的，然后移除这些行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = df.loc[~non_numberic_profits]</span><br><span class="line">df.profit = df.profit.apply(pd.to_numeric)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看看有没有生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">len(df)</span><br><span class="line"></span><br><span class="line">25131</span><br><span class="line"></span><br><span class="line">df.dtypes</span><br><span class="line"></span><br><span class="line">year         int64</span><br><span class="line">rank         int64</span><br><span class="line">company     object</span><br><span class="line">revenue    float64</span><br><span class="line">profit     float64</span><br><span class="line">dtype: object</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不错！我们已经完成了数据集的设置。</p><p>如果你要将 notebook 做成一个报告，你可以不使用我们创建的研究的单元格，包括这里的演示使用 notebook 的工作流，合并相关单元格(请参阅下面的高级功能部分)并创建一个数据集设置单元格。这意味着如果我们把我们的数据放在别处，我们可以重新运行安装单元来恢复它。</p><h3 id="使用-matplotlib-进行绘图"><a href="#使用-matplotlib-进行绘图" class="headerlink" title="使用 matplotlib 进行绘图"></a>使用 matplotlib 进行绘图</h3><p>接下来，我们可以通过计算年平均利润来解决这个问题。我们不妨把收入也画出来，所以首先我们可以定义一些变量和一种方法来减少我们的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">group_by_year = df.loc[:, [&#x27;year&#x27;, &#x27;revenue&#x27;, &#x27;profit&#x27;]].groupby(&#x27;year&#x27;)</span><br><span class="line">avgs = group_by_year.mean()</span><br><span class="line">x = avgs.index</span><br><span class="line">y1 = avgs.profit</span><br><span class="line"></span><br><span class="line">def plot(x, y, ax, title, y_label):</span><br><span class="line">    ax.set_title(title)</span><br><span class="line">    ax.set_ylabel(y_label)</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    ax.margins(x=0, y=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在让我们开始画图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plot(x, y1, ax, &#x27;Increase in mean Fortune 500 company profits from 1955 to 2005&#x27;, &#x27;Profit (millions)&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp7.png"></p><p>它看起来像一个指数，但它有一些大的凹陷。它们一定是对应于<a href="https://en.wikipedia.org/wiki/Early_1990s_recession">上世纪 90 年代初的经济衰退</a>和 <a href="https://en.wikipedia.org/wiki/Dot-com_bubble">互联网泡沫</a>。在数据中能看到这一点非常有趣。但为什么每次经济衰退后，利润都能恢复到更高的水平呢?</p><p>也许收入能告诉我们更多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y2 = avgs.revenue</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plot(x, y2, ax, &#x27;Increase in mean Fortune 500 company revenues from 1955 to 2005&#x27;, &#x27;Revenue (millions)&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jpsds.png"></p><p>这为故事增添了另一面。收入几乎没有受到严重打击，财务部门的会计工作做得很好。</p><p>借助 <a href="https://stackoverflow.com/a/47582329/604687">Stack Overflow</a> 上的帮助，我们可以用 +/- 它们的标准偏移来叠加这些图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def plot_with_std(x, y, stds, ax, title, y_label):</span><br><span class="line">    ax.fill_between(x, y - stds, y + stds, alpha=0.2)</span><br><span class="line">    plot(x, y, ax, title, y_label)</span><br><span class="line"></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(ncols=2)</span><br><span class="line">title = &#x27;Increase in mean and std Fortune 500 company %s from 1955 to 2005&#x27;</span><br><span class="line">stds1 = group_by_year.std().profit.as_matrix()</span><br><span class="line">stds2 = group_by_year.std().revenue.as_matrix()</span><br><span class="line">plot_with_std(x, y1.as_matrix(), stds1, ax1, title % &#x27;profits&#x27;, &#x27;Profit (millions)&#x27;)</span><br><span class="line">plot_with_std(x, y2.as_matrix(), stds2, ax2, title % &#x27;revenues&#x27;, &#x27;Revenue (millions)&#x27;)</span><br><span class="line">fig.set_size_inches(14, 4)</span><br><span class="line">fig.tight_layout()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/jp444.png"></p><p>这是惊人的，标准偏差是巨大的。一些财富 500 强的公司赚了数十亿，而另一些公司却损失了数十亿美元，而且随着这些年来利润的增长，风险也在增加。也许有些公司比其他公司表现更好；前 10％ 的利润是否或多或少会比最低的10％稳定一些?</p><p>接下来我们有很多问题可以看，很容易看到在 notebook 上的工作流程是如何与自己的思维过程相匹配的，所以现在是时候为这个例子画上句号了。这一流程帮助我们在无需切换应用程序的情况下轻松地研究我们的数据集，并且我们的工作可以立即共享和重现。如果我们希望为特定的目标人群创建一个更简洁的报告，我们可以通过合并单元和删除中间代码来快速重构我们的工作。</p><h2 id="分享你的-notebook"><a href="#分享你的-notebook" class="headerlink" title="分享你的 notebook"></a>分享你的 notebook</h2><p>当人们谈论分享他们的 notebook 时，他们通常会考虑两种模式。大多数情况下，个人共享其工作的最终结果，就像本文本身一样，这意味着共享非交互式的、预渲染的版本的 notebook；然而，也可以在 notebook 上借助诸如 <a href="https://git-scm.com/">Git</a> 这样的辅助版本控制系统进行协作。</p><p>也就是说，<a href="https://mybinder.org/">有一些</a>新兴的<a href="https://kyso.io/">公司</a>在 web 上提供了在云中运行交互式 Jupyter Notebook 的能力。</p><h3 id="在你分享之前"><a href="#在你分享之前" class="headerlink" title="在你分享之前"></a>在你分享之前</h3><p>当你导出或保存它时，共享的 notebook 将会以被导出或保存的那一刻的状态显示，包括所有代码单元的输出。因此，为了确保你的 notebook 是共享的，你可以在分享之前采取一些步骤：</p><ol><li>点击 “Cell &gt; All Output &gt; Clear”</li><li>点击 “Kernel &gt; Restart &amp; Run All”</li><li>等待您的代码单元完成执行，并检查它们是否按预期执行。</li></ol><p>这将确保你的 notebook 不包含中间输出，不包含陈旧的状态，并在共享时按顺序执行。</p><h3 id="导出你的-notebook"><a href="#导出你的-notebook" class="headerlink" title="导出你的 notebook"></a>导出你的 notebook</h3><p>Jupyter 内置支持导出 HTML 和 PDF 以及其他几种格式，你可以在 <code>File &gt; Download As</code> 菜单下找到。如果你希望与一个小型的私有组共享你的 notebook，这个功能很可能是你所需要的。事实上，许多学术机构的研究人员都有一些公共或内部的网络空间，因为你可以将一个 notebook 导出到一个 HTML 文件中，Jupyter notebook 可以成为他们与同行分享成果的一种特别方便的方式。</p><p>但是，如果共享导出的文件并不能让你满意，那么还有一些更直接的非常流行的共享 <code>.ipynb</code> 文件到网上的方法。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>截止到 2018 年初，GitHub 上的公共 notebook 数量超过了 180 万，它无疑是最受欢迎的与世界分享 Jupyter 项目的独立平台。GitHub 已经集成了对 <code>.ipynb</code> 的文件渲染的支持，你可以直接将其存储在其网站的仓库和 gists 中。如果你还不知道，<a href="https://github.com/">GitHub</a> 是一个代码托管平台，用于为使用 <a href="https://git-scm.com/">Git</a> 创建的存储库进行版本控制和协作。你需要创建一个帐户来使用他们的服务，同时 Github 标准帐户是免费的。</p><p>当你有了 GitHub 账户，在 GitHub 上共享一个 notebook 最简单的方法甚至都不需要 Git。自 2008 年以来， GitHub 为托管和共享代码片段提供了Gist 服务，每个代码段都有自己的存储库。使用 Gists 共享一个 notebook：</p><ol><li>登录并且浏览 <a href="https://gist.github.com/">gist.github.com</a>。</li><li>用文件编辑器打开 <code>.ipynb</code> 文件,  全选并且拷贝里面的 JSON 。</li><li>将笔记的 JSON 粘贴到中 gist 中。</li><li>给你的 Gist 命名, 记得添加 <code>.iypnb</code> 后缀，否则不能正常工作。</li><li>点击 “Create secret gist”或者 “Create public gist.”</li></ol><p>这看起来应该是这样的：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/josdsad.png"></p><p>如果你创建了一个公共的 Gist，你现在就可以和任何人分享它的 URL，其他人将能够 <a href="https://help.github.com/articles/forkingand-cloning-gists/">fork 和 clone</a> 你的工作。</p><p>创建自己的 Git 存储库并在 GitHub 上共享，这超出了本教程的范围，但是 <a href="https://guides.github.com/">GitHub 提供了大量的指南</a>可供你参考。</p><p>对于那些使用 git 的人来说，一个额外的技巧是在 <code>.gitignore</code> 中为 Jupyter 创建的 <code>.ipynb_checkpoints</code> 目录<a href="https://stackoverflow.com/q/35916658/604687">添加例外</a>，因为我们不需要将检查点文件提交给到仓库。</p><p>从 2015 年起，NBViewer 每个星期都会渲染<a href="https://blog.jupyter.org/renderingnotebooks-ongithub-f7ac8736d686">成千上万的 notebook</a>，它已然成了最受欢迎的 notebook 渲染器。如果你已经在某个地方把你的 Jupyter Notebook 放在网上，无论是 GitHub 还是其他地方，NBViewer 都可以读取你的 notebook，并提供一个可共享的 URL。作为项目 Jupyter 的一部分提供的免费服务，你可以在 <a href="https://nbview.jupyter.org/">nbview.jupyter.org</a> 找到相关服务。</p><p>最初是在 GitHub 的 Jupyter Notebook 集成之前开发的，NBViewer 允许任何人输入 URL、Gist ID 或 <code>GitHub username/repo/filename</code>，并将其作为网页呈现。一个 Gist 的 ID 是其 URL 末尾唯一的数字；例如，在 <code>https://gist.github.com/username/50896401c23e0bf417e89e1de</code> 中最后一个反斜杠后的字符串。如果你输入了 <code>GitHub username/repo/filename</code> ，你将看到一个最小的文件浏览器，它允许你访问用户的仓库及其内容。</p><p>NBViewer 显示的 notebook 的 URL 是基于正在渲染的 notebook 的 URL 的并且不会改变，所以你可以和任何人分享它，只要原始文件保持在线 —— NBViewer 不会缓存文件很长时间。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从基础知识入手，我们已经掌握了 Jupyter Notebook 的工作流程，深入研究了IPython 的更多高级功能，并最终学会如何与朋友、同事和世界分享我们的工作。我们从一个笔记上完成了这一切!</p><p>可以看到，notebook 是如何通过减少上下文切换和在项目中模拟自然的思维发展的方式来提高工作经验的。Jupyter Notebook。Jupyter Notebook 的功能也应该是显而易见的，我们已经介绍了大量的资源，让你开始在自己的项目中探索更高级的特性。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组交换网络中的延迟、 丢失和吞吐量</title>
      <link href="/internet4/"/>
      <url>/internet4/</url>
      
        <content type="html"><![CDATA[<h2 id="分组丢失和延迟是如何产生的？"><a href="#分组丢失和延迟是如何产生的？" class="headerlink" title="分组丢失和延迟是如何产生的？"></a>分组丢失和延迟是如何产生的？</h2><p>路由器分组缓冲区队列</p><ul><li><p>分组到达输出链路的速率超过输出链路的容量,产生延迟,甚至丢失</p></li><li><p>分组在缓冲区队列排队, 按序等待</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/queue.png"></p><h2 id="分组延迟的四s种类型"><a href="#分组延迟的四s种类型" class="headerlink" title="分组延迟的四s种类型"></a>分组延迟的四s种类型</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/delay.png"></p><ol><li><p><code>节点处理时延</code>：</p><p>nodal processing delay:</p><ul><li>检查错误位</li><li>选择输出链路</li><li>高速路由器处理延迟-微妙级</li></ul></li><li><p><code>排队时延</code>：</p><p>queueing delay:</p><ul><li>等待被发送到输出链路上的时间</li><li>取决于路由器的拥塞程度</li></ul></li><li><p><code>传输时延</code>：</p><p>Transmission delay：</p><ul><li><p>R=链路带宽 (bps)</p></li><li><p> L=分组长度 (bits)</p></li><li><p> 发送分组比特流的时间 = L/R</p></li></ul></li><li><p><code>传播时延</code>：</p><p>Propagation delay:</p><ul><li><p>d = 物理链路的长度</p></li><li><p>s = 介质的信号传播速度 (~2x108 m/sec)</p></li><li><p>传播延迟 = d/s</p><blockquote><p>注意: s和R是两个完全不同的速度参量!</p><p>s 是介质的信号传播速率，取决于介质等因素</p><p>R是链路的带宽</p></blockquote></li></ul></li></ol><div class="note warning flat"><p>常常有人分不清 <code>传播时延</code> 和 <code>传输时延</code></p><p>其实很简单区分</p><ul><li><p>传播 类似于扩散 就是在距离上传播所花的时间</p></li><li><p>传输 类似于输出 就是从节点输出到通信链路所花的时间</p></li></ul></div><h3 id="总的节点延迟就是四者之和"><a href="#总的节点延迟就是四者之和" class="headerlink" title="总的节点延迟就是四者之和"></a>总的节点延迟就是四者之和</h3><p><code>*d*nodal =*d*proc +*d*queue +*d*trans +*d*prop</code></p><ul><li>dproc = 节点处理时延-nodal processing delay<ul><li> 典型几个微秒或更小</li></ul></li><li>dqueue = 排队时延-queuing delay<ul><li> 取决于路由器的拥塞程度</li></ul></li><li>dtrans = 传输时延-transmission delay<ul><li>= L/R, 低带宽链路比较显著</li></ul></li><li>dprop = 传播时延-propagation delay<ul><li>几个微妙到数百毫秒(卫星通信高传播延迟)</li></ul></li></ul><h3 id="浅谈排队时延"><a href="#浅谈排队时延" class="headerlink" title="浅谈排队时延"></a>浅谈排队时延</h3><ul><li>R=链路带宽 (bps)</li><li>L=分组长度 (bits)</li><li>a=平均分组到达率</li></ul><p>average packet arrival rate</p><p><code>流量强度</code><br> traffic intensity = La/R</p><p>排队时延和流量强度的关系：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/delayq.png"></p><p>如图所示</p><ul><li>La/R ~ 0: 分组稀疏到达,无队列,平均排队延迟极小接近于0</li><li> La/R -&gt; 1: 分组猝发到达,形成队列,队列长度迅速增加,排队延迟大幅增大</li><li> La/R &gt; 1: 输出队列平均位到达速率超过送走这些位的极限速率，输出队列持续增长，排队延迟趋于无穷大<strong>。</strong></li></ul><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/throu.png"></p><ul><li><p> 网络吞吐量</p></li><li><p>单位时间内整个网络传输数据的速率或分组数 </p></li><li><p>单位:bps或datapacketspersecond</p></li></ul><h4 id="瓶颈链路"><a href="#瓶颈链路" class="headerlink" title="瓶颈链路"></a>瓶颈链路</h4><p>吞吐量是:min{Rs,Rc}</p><p>link on end-end path that constrains end-end throughput 在端到端路径中制约吞吐量的链路</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/throu1.png"></p><h3 id="吞吐量在因特网中的情景"><a href="#吞吐量在因特网中的情景" class="headerlink" title="吞吐量在因特网中的情景"></a><strong>吞吐量在因特网中的情景</strong></h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/throu2.png"></p><blockquote><p>对分组交换网络中的延迟、 丢失和吞吐量总结到这里</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路交换原理和分组交换原理</title>
      <link href="/internet3/"/>
      <url>/internet3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们有了 设备， 有了通信链路，那我们如何在网络中传输数据？</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/inter33.png"></p><p>基本原理：</p><ul><li><p>电路交换: </p><p>每次会话预留沿其路径(线路) 所需的独占资源–电话网</p></li><li><p>分组交换:</p><p> 数据以离散的数据块通过网络 来发送</p></li></ul><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p>基于电话网的交换原理</p><ul><li><p>网络资源比如宽带被分片</p></li><li><p>多路复用(Multiple Access)</p></li><li><p>分片分配到会话</p></li><li><p>分片没有被会话使用的情况下，分片空载 (不共享)</p></li><li><p>电路级性能(有保证)</p></li><li><p>要求呼叫建立–建立一个专门的端到端线路(意味着每个链路上预留一个线路)</p></li><li><p>链路带宽分片的方式</p><ul><li><p>频分-frequency division FDMA</p><p>将频率分割</p></li><li><p>时分-time division TDMA</p><p>将时间分割</p></li></ul></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/inter32.png"></p><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><blockquote><p>和电路交换相比</p><p>不会：</p><ul><li>带宽分片</li><li>独占分配资源</li><li>资源预留</li></ul></blockquote><p>每个端到端的数据流被划分成分组 </p><ul><li><p>所有分组共享网络资源</p></li><li><p> 每个分组使用全部链路带宽</p></li><li><p> 资源按需使用</p></li></ul><p><strong>资源竞争:</strong></p><ul><li><p>资源需求总量可以大于可 获得资源的总量</p></li><li><p>拥塞: 采用分组队列, 等待使用链路</p></li><li><p>存储转发: 分组每次转发1站 • 在1个链路上传输</p><ul><li>每经过1个链路转发1次</li><li> 转发分组前，要求收到完整分组</li></ul></li></ul><h2 id="比较分组交换与电路交换"><a href="#比较分组交换与电路交换" class="headerlink" title="比较分组交换与电路交换"></a><strong>比较分组交换与电路交换</strong></h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/inter31.png"></p><p>假设：</p><ul><li><p>用户共享1 Mbps 的链路</p></li><li><p>每个用户:</p><ul><li>活动期传输率100 kbps </li><li>只有10%的时间活动</li></ul></li><li><p>电路交换:    10 users</p></li><li><p>分组交换:</p><ul><li>如果35个用户</li><li>10个以上活动用户的概率小于 0 .0004</li></ul></li></ul><h2 id="分组交换是最后的赢家吗"><a href="#分组交换是最后的赢家吗" class="headerlink" title="分组交换是最后的赢家吗?"></a>分组交换是最后的赢家吗?</h2><ul><li>优点:<ul><li> 适合大量的突发数据传输 </li><li>资源共享</li><li>简单, 不需要建立连接</li></ul></li><li>缺点: <ul><li>过渡竞争导致分组延迟与丢失</li><li>需要可靠数据传输、拥塞控制协议</li></ul></li></ul><p>问题:  如何提供电路级的性能?</p><ul><li>对于音视频的网络应用需要带宽保障，仍然是1个没有解决的问题 </li></ul><h2 id="分组交换网络的分类"><a href="#分组交换网络的分类" class="headerlink" title="分组交换网络的分类"></a><strong>分组交换网络的分类</strong></h2><h3 id="数据报网络-TCP-IP"><a href="#数据报网络-TCP-IP" class="headerlink" title="数据报网络: TCP/IP"></a>数据报网络: TCP/IP</h3><ul><li><p>分组目的地址决定下一跳 </p></li><li><p>会话期间路由可以改变</p></li><li><p>比方: 驱车逐段问路</p></li></ul><h3 id="虚电路网络-X-25-FR-ATM（面向连接）"><a href="#虚电路网络-X-25-FR-ATM（面向连接）" class="headerlink" title="虚电路网络: X.25,FR,ATM（面向连接）"></a>虚电路网络: X.25,FR,ATM（面向连接）</h3><ul><li><p>每个分组有1个标签 (虚电路号,virtual circuit ID), 标签</p><p>决定下1跳</p></li><li><p>连接建立时确定固定的路径, 并且将保持于整个会话期间</p></li><li><p>路由器必须为每个连接维护状态信息</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/inter.png"></p><blockquote><p>对电路交换原理和分组交换原理总结到这里</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈网络边缘部分</title>
      <link href="/internet2/"/>
      <url>/internet2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开始之前，再一次谈谈网络结构</p></blockquote><div class="note info flat"><p>网络边缘：</p><ul><li>主机和服务器</li><li>服务器一般在数据中心</li></ul><p>接入网络，物理介质：</p><ul><li>有线通信链路</li><li>无线通信链路</li></ul><p>网络核心：</p><ul><li>路由器</li><li>网络组成的网络</li></ul></div><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/facili.png"></p><blockquote><p>几个名词的含义</p></blockquote><ul><li>端系统：    <ul><li>就是网络应用程序的设备</li><li>处在网络的边缘部分</li></ul></li><li>客户/服务器 （C/S架构）：<ul><li>客户请求，并提供的服务</li></ul></li><li>端对端模型：<ul><li>极少或者不采用专门的服务器</li><li>在端系统之间交互</li></ul></li></ul><blockquote><p>如何将边缘设备连接到网络边缘的路由器呢？</p></blockquote><h2 id="接入网络分类"><a href="#接入网络分类" class="headerlink" title="接入网络分类"></a>接入网络分类</h2><p>粗糙的分类：</p><ul><li>家庭接入网络</li><li>机构接入网络</li><li>广域无线接入网络</li></ul><blockquote><p>带宽：</p><p>衡量数据传输速率</p><p>单位 </p><p>Bps KBps MBps GBps</p><p>bps kbps mbps gbps</p><p>1 B = 8b</p></blockquote><h2 id="家用接入网络"><a href="#家用接入网络" class="headerlink" title="家用接入网络"></a>家用接入网络</h2><h3 id="非对称数字用户线路：（ADSL）"><a href="#非对称数字用户线路：（ADSL）" class="headerlink" title="非对称数字用户线路：（ADSL）"></a>非对称数字用户线路：（ADSL）</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/adsl.png"></p><p>基于电话线路的线路</p><p>可达1 Mbps 上行速率 (目前典型 &lt; 512 kbps)</p><p> 可达 8 Mbps 下行速率 (目前典型 &lt; 4 Mbps)</p><h3 id="电缆接入网络（HFC）"><a href="#电缆接入网络（HFC）" class="headerlink" title="电缆接入网络（HFC）"></a>电缆接入网络（HFC）</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/hfc.png"></p><p>基于电视线路的接入网络</p><p>通过频分复用，支持不同频段的传输</p><p>可达2Mbps 上行速率, 30Mbps下行速率</p><h3 id="光纤到户-FTTH"><a href="#光纤到户-FTTH" class="headerlink" title="光纤到户 (FTTH)"></a>光纤到户 (FTTH)</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/FTTH.png"></p><p>家庭接入网络: FTTH(Fiber To The Home)</p><blockquote><p> 相比上面的方式，传输速率高</p></blockquote><h2 id="企业接入网络（LAN）"><a href="#企业接入网络（LAN）" class="headerlink" title="企业接入网络（LAN）"></a>企业接入网络（LAN）</h2><ul><li><p>公司/大学局域网 local area network (LAN) 连接端系统到边缘路由器</p></li><li><p>以太网Ethernet为主：</p><ul><li>共享(共享式以太网)或独占(交 换式以太网)链路连接端系统和边 缘路由器</li><li>10 Mbs, 100Mbps, Gigabit Ethernet,10Gbps</li></ul></li><li><p>WiFi接入技术</p></li><li><p>部署: 企业、家庭局域网已经普及</p></li><li><p>LANs: chapter 5</p></li></ul><h2 id="WIFI无线接入网络"><a href="#WIFI无线接入网络" class="headerlink" title="WIFI无线接入网络"></a>WIFI无线接入网络</h2><blockquote><p>就是我们天天用的WIFI</p></blockquote><ul><li>共享的无线接入网络连接端系统到边缘路由器</li><li> 通过基站，即接入点 “access point”</li><li> 无线局域网wireless LANs:</li></ul><p>分类： </p><p>• 802.11a/b/g/n (WiFi): 54/11/54/600 Mbps</p><h2 id="广域无线接入网络"><a href="#广域无线接入网络" class="headerlink" title="广域无线接入网络"></a><strong>广域无线接入网络</strong></h2><blockquote><p> 就是我们常用的4G，以后的5G</p></blockquote><ul><li><p>由电信运营商提供, 均支持IP</p></li><li><p>WAP/GPRS或CDMA</p></li><li><p>3G(TD-SCDMA、WCDMA和cdma2000) 提供下行3.6Mbps，上行384 kbps的带宽</p></li><li><p>4G(LTE、TD-LTE(100Mbps)、FDD- LTE(150Mbps))</p></li></ul><h2 id="物理介质"><a href="#物理介质" class="headerlink" title="物理介质"></a>物理介质</h2><p>这些网络边缘设备，接入网络，肯定是需要物理介质的传导，以下是常见物理介质。</p><blockquote><p>物理链路:在发送方和接受方间,传播位(bit)信号</p></blockquote><p>分类：</p><ul><li><p>导引型媒体:</p><ul><li> 信号在固态介质中有向传播, 如:光纤、双绞线和同 轴电缆等</li></ul></li><li><p>非导引型媒体:</p><ul><li>信号在大气空间或外太空空间自由传播, 如:无线电</li></ul></li></ul><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/shuang.png"></p><blockquote><p>两根彼此绝缘、相互缠绕成螺旋状的铜线。缠绕的目 的是减少电磁干扰，提高传输质量。</p><ul><li>屏蔽双绞线 (STP， Shielded Twisted Pair) </li><li>非屏蔽双绞线 (UTP， Unshielded Twisted Pair )</li></ul></blockquote><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/tong.png"></p><ul><li><p> 两根彼此绝缘的同心导体</p></li><li><p> 双向传输 <strong>铜芯</strong></p></li><li><p>基带baseband: </p><ul><li> 50Ω，1cm </li><li>单信号频带</li><li> 细缆以太网10base-2</li></ul></li><li><p>宽带broadband: </p><ul><li> 75Ω，较粗</li><li>多信号频带</li><li>用于光纤同轴混合网HFC</li></ul></li></ul><h3 id="光纤线缆"><a href="#光纤线缆" class="headerlink" title="光纤线缆"></a><strong>光纤线缆</strong></h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/light.png"></p><p>光纤传导光脉冲, 每个光脉冲代表1位 </p><ul><li><p>高速传输:</p></li><li><p>高速点对点传输 (可达数十或数百 Gbps)</p></li><li><p>低误码率: 中继到更远传输距离 ; 防止电磁干扰，难以被分光窃听。</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/fiber.png"></p><h3 id="无线电磁波"><a href="#无线电磁波" class="headerlink" title="无线电磁波"></a><strong>无线电磁波</strong></h3><ul><li><p>以电磁频谱承载信号 </p></li><li><p>没有物理连线</p></li><li><p>双向</p></li><li><p>传播环境的影响:</p><ul><li>多路径衰落-干扰物表面反射 </li><li>盲区衰落-障碍物绕/</li><li>干扰-其他电磁信号</li></ul></li><li><p>››无线链路类型: </p></li><li><p>地面微波</p><p>e.g. 达 45 Mbps 信道 </p><p>局域无线通道 (e.g., WiFi)</p><p>11Mbps, 54Mbps</p><p>更高 广域无线通道 (e.g., cellular)</p><p>e.g.GPRS,CDMA</p><p>e.g. 3G: hundreds of kbps </p><p>卫星通信</p><p>高达数百Mbps 信道 (或多个更小的信道) 250 msec毫秒端到端延迟 地球同步卫星与低轨道卫星</p><p>(铱星系统-66颗低空卫星)</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/yixi.png"></p></li></ul><blockquote><p>对网络边缘部分，总结到这里</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS十大冷门软件推荐</title>
      <link href="/mac/"/>
      <url>/mac/</url>
      
        <content type="html"><![CDATA[<blockquote><p>白用Mac三年了？居然不知道有这些好用的软件？绝不能错过10个冷门软件</p></blockquote><ol><li>Cheat Sheet：<a href="https://cheatsheet-mac.en.softonic.com/mac">https://cheatsheet-mac.en.softonic.com/mac</a></li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/cheetsheet.png" alt="cheetsheet"></p><div class="note success flat"><p>这个软件主要是用于快捷键提示的。</p><p>记住繁杂的快捷键往往很难，不过这个软件就能实时显示对应应用的快捷键。只需要按住<code>Command</code>键就可以显示现在对应窗口的所有快捷键啦</p></div><ol start="2"><li>欧陆词典：App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/%E6%AC%A7%E8%B7%AF%E8%AF%8D%E5%85%B8.png" alt="欧路词典"></p><div class="note success flat"><p>作为英文词典，为什么我会选择它呢？</p><p>因为欧路词典的<code>划词取词</code>和<code>智能取词</code>是个亮点，方便用户查阅单词</p></div><ol start="3"><li>Magnet <a href="https://www.zhinin.com/magnet-mac.html">https://www.zhinin.com/magnet-mac.html</a></li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/magnet.png" alt="magnet"></p><div class="note success flat"><p>窗口管理神器，在Mac上不用每次都长按窗口缩放键了</p><p>而且有多种不同的布局</p></div><ol start="4"><li>Itsycal: <a href="https://www.mowglii.com/itsycal/">https://www.mowglii.com/itsycal/</a></li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/itsycal.png" alt="itsycal"></p><div class="note success flat"><p>Itsycal是个日历快捷方式，方便大家查看日历，而且能创建提醒且能整合到系统日历中</p></div><ol start="5"><li>Amphetamine: App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/amphetamine.png" alt="amphetamine"></p><div class="note success flat"><p>防休眠神器，安非他命（名字由来为一种兴奋剂）。</p></div><ol start="6"><li>AdGuard: App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/adguard.png" alt="adguard"></p><div class="note success flat"><p>Safari浏览器的广告守护者，是Safari的一个插件，可以屏蔽网络上的几乎所有广告～</p><p>让你的浏览体验翻倍哦～</p></div><ol start="7"><li>超级右键 App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/%E8%B6%85%E7%BA%A7%E5%8F%B3%E9%94%AE.png" alt="超级右键"></p><div class="note success flat"><p>扩展mac的鼠标右键，能够复制粘贴剪切，隐藏桌面图标，创建word ppt excel等</p></div><ol start="8"><li>CopyLess App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/copyLess.png" alt="copyLess"></p><div class="note success flat"><p>复制的历史记录板，你所有复制或者剪切的文本内容会给你记录起来</p></div><ol start="9"><li>HazeOver <a href="http://www.pc6.com/mac/147358.html">http://www.pc6.com/mac/147358.html</a> </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/HazeOver.png" alt="HazeOver"></p><div class="note success flat"><p>专注窗口的软件，多窗口下的神器</p><p>在多窗口下，高亮聚焦当前窗口，提高专注力！</p></div><ol start="10"><li>Tencent Lemon Lite App Store </li></ol><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/LemonLite.png" alt="LemonLite"></p><div class="note success flat"><p>清爽的清理软件。轻量级且友好～</p></div>]]></content>
      
      
      <categories>
          
          <category> 炼丹装备杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Internet?</title>
      <link href="/internet1/"/>
      <url>/internet1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常常我们接触到Internet这个词，也就是英特网，那英特网到底是什么呢？</p></blockquote><div class="note primary flat"><p>其实关于如何定义因特网都没有一个确切的说法，所以我们通过侧面来描绘Internet</p><p>在介绍因特网之前，我们应该了解，<code>什么是计算机网络？</code></p></div><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><blockquote><p>定义: 两台以上具有独立操作系统的计算机通过某些介质连接 成的相互共享软硬件资源的集合体。</p></blockquote><h3 id="两大功能："><a href="#两大功能：" class="headerlink" title="两大功能："></a>两大功能：</h3><p>计算机网络有两大功能：</p><ul><li>连通性</li><li>共享性</li></ul><p>关于连通性，通过定义可以看出，就是计算机通过某种方式连在了一起</p><p>关于共享性，我认为即是连通之意义所在，在于信息共享，沟通</p><blockquote><p>了解了计算机网络，我们来聊聊Internet。</p></blockquote><h2 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h2><p>总的来说，<code>Internet</code>就是：由网络构成的网络</p><p>具有松散分层的特点</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/arc.png"></p><p>同时有公共Internet和专用Intranet之分</p><blockquote><p>对于Internet，硬件和软件、提供的服务上，都很复杂，无法给出一个明确的定义</p><p> 我们只能对其具体构成和提供服务方面进行描述</p></blockquote><h3 id="构成角度"><a href="#构成角度" class="headerlink" title="构成角度"></a>构成角度</h3><blockquote><p>我个人的理解：Internet 就是使用计算机互连设备，通过通信链路，使用分组交换的原理，构成的系统</p></blockquote><p>三个方面：</p><ol><li><p>基础 ： 数以亿计的计算互联设备，包括：</p><ul><li>主机</li><li>网络应用程序</li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/facili.png"></p></li><li><p>沟通桥梁：通信链路</p><ol><li>双绞线</li><li>光纤</li><li>无线电频谱</li><li>卫星</li></ol><p>具有传输的速率 称为<code>带宽</code></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/link.png"></p></li><li><p>沟通方式: 分组交换</p><p>有了桥梁，到底怎么走，分组交换就告诉了网络</p><p>常常用到：</p><ul><li>路由器</li><li>交换机</li><li>….</li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/router.png"></p></li></ol><h2 id="服务角度"><a href="#服务角度" class="headerlink" title="服务角度"></a>服务角度</h2><blockquote><p>Internet 就是 提供网络应用基础架构、为分布式应用程序提供的通信服务接口的系统</p></blockquote><h3 id="提供网络应用基础架构"><a href="#提供网络应用基础架构" class="headerlink" title="提供网络应用基础架构"></a>提供网络应用基础架构</h3><p>允许终端系统上运行分布式应用程序，并彼此交换数据:</p><p>比如： Web, email, games, e-commerce, database, VOIP, P2P file sharing</p><h3 id="为分布式应用程序提供的通信服务接口"><a href="#为分布式应用程序提供的通信服务接口" class="headerlink" title="为分布式应用程序提供的通信服务接口"></a>为分布式应用程序提供的通信服务接口</h3><ul><li><p> 无连接服务connectionless</p></li><li><p> 面向连接服务connection-oriented</p></li></ul><blockquote><p> 但是不提供数据传递时间保证(发送端到接收端)的服务</p></blockquote><p>By the way，Internet是一个复杂的系统，想实现对系统很好的 有序的控制，我们制定了<code>协议</code></p><p>比如我们常听说的：TCP, IP, HTTP, FTP, SMTP 等等</p><p>那什么是协议呢？</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/http.jpg"></p><p>协议:定义了两个或多个通信实体 间所交换报文的格式和次序，以及 在报文发送和/或接收或者其他事件 方面所采取的行动(响应)。</p><p>基本的三要素：</p><ol><li>语法</li><li>语义</li><li>同步</li></ol><ul><li><p>语法就是指定的协议规则</p></li><li><p>语义就是想表达的意思，实现的逻辑</p></li><li><p>同步就是实现信息交互的同步</p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/xieyi.png"></p><blockquote><p>协议都是以RFC的形式在网络上发表</p><p>经历四个阶段：</p><p>• 因特网草案(Internet Draft)-不是RFC文档</p><p> • 建议标准(Proposed Standard) -开始成为RFC文档</p><p> • 草案标准(Draft Standard)</p><p> • 因特网标准(Internet Standard)</p></blockquote><div class="note success flat"><p>对Internet 应该有了一定的认识了吧，网络构成的网络。</p><p>总结来说就是：由设备，通信链路，分组交换组成的复杂系统</p></div>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Internet发展史</title>
      <link href="/internet/"/>
      <url>/internet/</url>
      
        <content type="html"><![CDATA[<h1 id="Internet的发展史"><a href="#Internet的发展史" class="headerlink" title="Internet的发展史"></a>Internet的发展史</h1><h2 id="分组交换原理的早期发展与演化"><a href="#分组交换原理的早期发展与演化" class="headerlink" title="分组交换原理的早期发展与演化"></a>分组交换原理的早期发展与演化</h2><div class="note success flat"><p>1961-1972</p></div><ul><li>1961: Kleinrock – 用排队理论成功的论证了分组交换方法在处理猝发通信量上的 有效性</li><li>1964: Baran – 在军用网络上传输语音，研究使用分组交换技术</li><li>1967: 美国国防部高级研究计划署DARPA始建ARPAnet</li><li>1969: 第1台ARPAnet接口消息处理机IMP研制并安装使用</li><li>1972:<ul><li>Robert Kahn首次公开演示ARPAnet</li><li>制订第1个主机到主机的协议NCP (Network Control Protocol) • 研制第1个电子邮件程序</li><li> ARPAnet 增长到15个节点</li></ul></li></ul><h2 id="网际互连与新兴的专属网络"><a href="#网际互连与新兴的专属网络" class="headerlink" title="网际互连与新兴的专属网络"></a>网际互连与新兴的专属网络</h2><div class="note success flat"><p>1972 - 1980</p></div><ul><li><p>1970: ALOHAnet微波网络出现在Hawaii</p></li><li><p>1973: Robert Metcalfe’s PhD论文提出了</p><p>Ethernet</p></li><li><p>1974: Vinton Cerf and Robert Kahn</p><p>–网际互连的网络体系结构</p></li><li><p>late70’s: 专属网络体系结构: DECnet, SNA, XNS</p></li><li><p>late70’s: 固定长度的分组交换 (ATM先驱)</p></li><li><p>1979: 200个节点连接到ARPAnet</p></li></ul><p>• Cerf and Kahn’s 开放网络体系结构的系 统设计原则:</p><ul><li>最简单化,自治原则 – 网络独立运作， 与其他网络互连时无须进行内部改动</li><li>尽力服务原则– 提供尽最大努力的端到 端服务</li><li>无状态路由器 – 路由器无须维护连接 状态信息</li><li>分散式控制</li><li> 定义了当今Internet体系结构的理论基础 ——40年后仍适用</li></ul><h2 id="TCP-IP新协议与网络数量激增"><a href="#TCP-IP新协议与网络数量激增" class="headerlink" title="TCP/IP新协议与网络数量激增"></a>TCP/IP新协议与网络数量激增</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/tcp.png"></p><div class="note success flat"><p>1980 - 1990</p></div><ul><li><p> 1983: 正式部署TCP/IP替代NCP</p></li><li><p> 1982: 定义了SMTPe-mail协议</p></li><li><p> 1983: 开发了DNS实现name-to-IP-address转换</p></li><li><p> 1985: 定义了FTPprotocol</p></li><li><p> 1988: 实现了TCPcongestioncontrol</p></li><li><p> late80’s:  新的国家网络:Csnet,BITnet,NSFnet,Minitel </p></li><li><p>late80’s:100,000主机连接到多个网络组成的联盟</p></li></ul><h2 id="商业化-Web-新的网络应用"><a href="#商业化-Web-新的网络应用" class="headerlink" title="商业化, Web, 新的网络应用"></a>商业化, Web, 新的网络应用</h2><div class="note success flat"><p>1990 - 2000</p></div><h4 id="Early-1990’s"><a href="#Early-1990’s" class="headerlink" title="Early 1990’s"></a>Early 1990’s</h4><p>ARPAnet完成使命终结</p><ul><li><p>1991: NSF放宽NSFnet的商业使用限制 (1995完成使命终结)</p></li><li><p> early 1990s: Web</p></li><li><p> 超文本 [源于Bush 1945, Nelson 1960’s的早期研究] • HTML, HTTP: 由Berners-Lee及其同事开发</p></li><li><p> 1994: Mosaic浏览器及公司, 后来Netscape</p></li><li><p> late 1990’s: Web的商业使用</p></li><li><p> 1996:Microsoft大规模进军Web</p></li></ul><h4 id="Late-1990’s-–-2000’s"><a href="#Late-1990’s-–-2000’s" class="headerlink" title="Late 1990’s – 2000’s"></a>Late 1990’s – 2000’s</h4><ul><li>电子商务应用激增</li><li>高速路由器和路由技术以及高速局域网技术进展显著</li><li>音视频流媒体实时通信、播放的成功应用</li><li>更多的杀手级应用: 及时通信IM, P2P文件共享 (e.g., Naptser)</li><li>网络安全走向前沿</li><li>估计5千万主机, 1亿多用户</li><li>主干链路带宽达到 Gbps</li></ul><h2 id="移动互联网"><a href="#移动互联网" class="headerlink" title="移动互联网"></a>移动互联网</h2><div class="note success flat"><p>21世纪10年代中期——至今</p></div><p>21世纪10年代中期——至今:</p><ul><li><p>无线网络基础设施的飞速进步(多种/多代技术)</p></li><li><p> 移动设备( 硬件/软件)的飞速发展</p></li><li><p> 传统PC端应用纷纷转移到移动端(应用程序-&gt;APP) • 基于移动互联网的商业模式爆发式涌现</p></li></ul><blockquote><p>以上是对 Internet的一个简单的发展历程总结</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一万小时理论</title>
      <link href="/10000/"/>
      <url>/10000/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/ttt.jpg"></p><h1 id="时间定律"><a href="#时间定律" class="headerlink" title="时间定律"></a>时间定律</h1><div class="note primary flat"><p>美国两位畅销书作家，丹尼尔·科伊尔的《一万小时天才理论》与马尔科姆·格拉德韦尔的《异类》，其核心都是“一万小时定律”,就是不管你做什么事情，只要坚持一万小时，基本上都可以成为该领域的专家。</p></div><p>自此观点引进到国内，十分流行，很多人当做教育自己和教育孩子的“金科玉律”。可痛苦的是鲜有人能完成一万小时目标，这种长周期的学习，要求苦行僧般的修行煎熬，刚开始很难看到成果。</p><p>对大多数来说，是不是做不到 “一万小时定律”，就意味着不能“成功”。</p><p>还有哪些学习的时间定律需要了解的呢?</p><h1 id="21小时理论"><a href="#21小时理论" class="headerlink" title="21小时理论"></a><strong>21小时理论</strong></h1><blockquote><p>如果对一个领域的学习程度，划分为了解、熟悉、精通和专家四个级别。</p><p>那么，只用21小时的主题学习和刻意实践，一般可从0达到熟悉的阶段。相比周围其他人，可构建明显的“竞争优势”。</p></blockquote><p>从学习曲线效应角度，越是经常地执行一项任务，每次所需的时间就越少。但在刻意学习刚开始，能走上正确实践的道路，花费的成本是比较高的。</p><p>21小时定律，本质就是在时间段内进行主题学习、并动手实践，其结果是走上正确实践的道路上。</p><p>这和学习骑自行一样，只要能歪歪扭扭的骑上车，跨过刚开始的跌倒、上车、再跌倒、再开始的痛苦阶段（21小时的阶段），就是掌握了“学习区”的技能。</p><p>心理学家把人的知识和技能分为层层嵌套的三个圆形区域：</p><ul><li>最内一层是“舒适区”，是我们已经熟练掌握的各种技能；</li><li>最外一层是“恐慌区”，是我们暂时无法学会的技能。</li><li>二者中间是“学习区”。人只有在学习区里面练习，一个人才可能进步。</li><li>有效的练习任务必须精确的在受训者的“学习区”内进行，具有高度的针对性。21小时理论，就要在学习区内接受初步的训练，达到技能熟悉的地步。</li></ul><p>从21小时定律，进一步思考：</p><ol><li> 构建自己的多维“核心优势”的门槛，只有两步。</li></ol><ul><li><p>第一步是你是否有意识、有意愿的突破舒适区，这是最关键的。</p></li><li><p>第二步就是主题学习和实践，跨过21小时阶段，顺利“骑上自行车”</p></li></ul><ol start="2"><li>你已累积“吃饭”的技能，其他人21小时后就开始入门掌握，随后进入加速度的追赶。学习经验曲线，还揭露一个问题就是随着对这个领域的越来越熟练，虽然代价（时间和精力）成本越来越小，但边际收益也是越来越小。如果不思进取，就很快被“深度学习者”革命掉。</li></ol><h1 id="1000小时理论"><a href="#1000小时理论" class="headerlink" title="1000小时理论"></a><strong>1000小时理论</strong></h1><blockquote><p>1000小时理论，有两个维度的解释。</p></blockquote><ul><li><p>第一个解释是，如果你有一万小时的积累，</p><p>那么当你精通的领域延伸出相关的新理论、新技术时，熟练的掌握这门新技术只需要1000个小时。</p><p>这是在对原有领域深度洞察下的迁移学习。</p><blockquote><p>举例来说，如果有神经科学、计算机科学的一万小时的积累（专家级段位），那么再研究新兴的人工智能行业，站在原来“巨大经验”的肩膀上，只用1000小时左右，基本就可掌握。</p></blockquote></li><li><p>第二个解释是，针对复杂技能，学习和训练1000小时，就达到较大的质变，构筑非常明显的竞争力。</p></li></ul><p>以上两个维度的解释，进一步思考：</p><ol><li> 从深刻的洞察力出发（一万小时段位），触类旁通洞察到其他分支领域。这种洞察力的迁移，值得学习。</li></ol><p>   深度思考学习到的经验、事物的本质，最重要的是这种思维上的“道”，能不能迁移到其他问题上去解决。</p><p>   迁移思维解决新问题，可以作为解决未知领域问题的第一步尝试。</p><ol start="2"><li>对新领域的学习，每天投入3小时，坚持一年，达到1000小时，就能有明显的质变。关键是，能不能沉下心一年，对着一个“城墙口”冲锋一年。</li></ol><div class="note info flat"><p>前一段时间，华为任正非在全国科技大会上讲，华为正在本行业逐步攻入无人区，处在无人领航，无既定规则，无人跟随的困境。这正是华为28年来集中火力，对准“通信领域”这个城墙口不懈怠冲锋的成绩。</p></div><h1 id="5年理论"><a href="#5年理论" class="headerlink" title="5年理论"></a>5年理论</h1><p>如果坚持21小时阶段，你在多领域徜徉，找到自己的兴趣点，坚持了一年达到了质变。那么，坚持五年下去，是很自然的事情。</p><div class="note success flat"><p>五年理论认为，五年能够掌握一门学科的系统知识，能够精通一种复杂的技能。</p></div><p>从学习的角度换算时间，1000小时的学习/训练时间=1年，那么五年就是坚持5000小时的学习和训练，恰好是一万小时的一半时间。</p><p>最聪明的人坚持的方法永远都是最质朴、最简单的道理。针对一个“城墙口”，冲锋21小时、一年、五年，冲开的口子就越来越大。</p><p>种一棵树最好的时间是十年前，其次是现在。</p><h1 id="误区讨论"><a href="#误区讨论" class="headerlink" title="误区讨论"></a><strong>误区讨论</strong></h1><div class="note warning flat"><p>一万小时定律，不仅仅是钻牛角尖的理论学习。</p><p>对于大部分“深度学习者”来说，是学与习的结合。</p></div><h2 id="求知的三个层次"><a href="#求知的三个层次" class="headerlink" title="求知的三个层次"></a>求知的三个层次</h2><ul><li>信息</li><li>知识</li><li>技能</li></ul><p>学习的最终目的，要落脚到技能的纯属掌握上。一个人掌握的知识有多少，不是取决于头脑里有了多少理论（以理论研究为生计者除外）、多少孤立的知识点，而是取决于能调用多少知识、串联起多少知识，转化为经验和智慧。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/time.jpg"></p><p>从这个角度看，“散漫式”的读书要转变为“问题式的主题阅读”。</p><p>针对遇到的实际问题，搜集信息，进行主题阅读思考并交流，寻找答案，形成自己的认知洞察和知识串联，最终是技能的掌握和新知的创造。每个大学毕业生都应该有这样的能力，毕业论文的思考过程，就是“问题式的主题阅读”</p><p>在未来的人工智能时代，很多工作会被机器取代和消灭，创造者、连接者和洞察者的地位会越来越凸显。多种知识的链接、融合和创造，对事物深刻的洞察，这样的思考，值得去对思考进行思考。</p><p>一个人如何对待他的时间，决定了他可以成为一个什么样的人。</p><div class="note success flat"><p>我也将开始一个一万小时计划，在我的计算机领域，从今天开始，启动10000小时计划。</p><p>我认为是一件很有意义的事。并且在我的网站的<a href="https://liuxunzhuo.tech/time/">这里</a>记录</p><p>期待10000小时后的我。</p></div><hr>]]></content>
      
      
      <categories>
          
          <category> 闲暇品味人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 时间管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020杂思</title>
      <link href="/2020/"/>
      <url>/2020/</url>
      
        <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/see.jpg"></p><p>这个星期自己的状态很差</p><ul><li>连续一周身体不舒服</li><li>自己研究的方向也出现瓶颈，对自己能力的怀疑</li><li>和家里人关系处理不好</li><li>失眠</li></ul><p>莫名的难受，压力，迷茫，焦虑，负面情绪在慢慢积压，是时候停下脚步，好好思考一下了。</p><hr><h1 id="Why-Again？"><a href="#Why-Again？" class="headerlink" title="Why Again？"></a>Why Again？</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/bed.jpg"></p><p>为什么，我会感受到这些负面情绪呢，它们来源哪里？这是这几天我思考的问题。</p><p>2020年，可能对全世界来说，都是不愉悦的一年。肺炎的全球蔓延，生命的离去，经济的打击，很多人的规划都泡了汤</p><ul><li><p>本来准备过年去看的唐人街探案</p></li><li><p>本来学生2月底理应的开学</p></li><li><p>本来寒假同学的聚会</p></li><li><p>本来….</p></li></ul><p>本来好好的一切，突然乱了套，对现在的焦虑，对未来的恐惧，出现了。</p><p>但是还是那个问题，为什么这会让我感到这些呢？为什么让大多人也感到了这些呢？面对这些该怎么办呢？</p><hr><h1 id="The-Legend-of-1900"><a href="#The-Legend-of-1900" class="headerlink" title="The Legend of 1900"></a>The Legend of 1900</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/sit.png"></p><p>这两天看了一部电影，《海上钢琴师》，我仿佛从电影里找到了答案。</p><p>电影里，主角是婴儿的时候就被遗弃到了一艘轮船上，从小在轮船上长大，他有一个天赋，就是演奏钢琴，他的钢琴弹的美妙绝伦，轮船来往的人赞不绝口。不过他从来都没有下过船</p><p>在可以被世界认识，获得金钱和名利的时候，他拒绝了浮华，没有下船。</p><p>在认识一个喜欢的女子，女孩下船后，他也没有下船去追求他的爱情。</p><p>在最后船报废了，准备炸船销毁的时候，他也没有下船，放弃了生命。</p><p>有人说，为什么啊？</p><p>他这么说：</p><blockquote><ul><li><p>阻止了我的脚步的，并不是我所看见的东西，而是我所无法看见的那些东西。你明白么？我看不见的那些。在那个无限蔓延的城市里，什么东西都有，可惟独没有尽头。</p></li><li><p>陆上的人喜欢寻根问底，虚度了大好光阴。冬天忧虑夏天的姗姗来迟，夏天则担心冬天的将至。所以他们不停四处游走，追求一个遥不可及、四季如夏的地方—我并不羡慕。</p></li><li><p>陆地？陆地对我来说是一艘太大的船，一个太漂亮的女人，一段太长的旅行，一瓶太刺鼻的香水，一种我不会创作的音乐。我永远无法放弃这艘船，不过幸好，我可以放弃我的生命。反正没人记得我存在过，而你是例外，max，你是唯一一个知道我在这里的人。你是唯一一个，而且你最好习惯如此。原谅我，朋友，我不会下船的。</p></li><li><p>拿一部钢琴来说，从琴键开始，又结束。你知道钢琴只有88个键，随便什么琴都没差。它们不是无限的。你才是无限的，在琴键上制作出的音乐是无限的。我喜欢这样，我活的惯</p></li><li><p>我是在这艘船上出生的，整个世界跟我并肩而行，但是，行走一次只携带两千人。这里也有欲望，但不会虚妄到超出船头和船尾。你用钢琴表达你的快乐，但音符不是无限的。我已经习惯这么生活。</p></li><li><p>键盘有始有终，你确切知道 88 个键就在那儿，一个不多一个不少。它并不是无限的，而音乐，才是无限的。你能在键盘上表现的音乐是无限的，我喜欢这样，我能轻松应对，而你现在让我走过跳板，走到城市里，等着我的是一个没有尽头的键盘，我又怎能在这样的键盘上弹奏呢 ? 那是上帝的键盘啊 ! </p></li><li><p>天啊！你……你看过那些街道吗？仅仅是街道，就有上千条！你下去该怎么办？你怎么选择其中一条来走？怎么选择“属于你自己的”一个女人，一栋房子，一块地，或者选择一道风景欣赏，选择一种方法死去。</p></li><li><p>那个世界好重，压在我身上。你甚至不知道它在哪里结束，你难道从来不为自己生活在无穷选择里而害怕得快崩溃掉吗？</p></li></ul></blockquote><hr><h1 id="I-Think"><a href="#I-Think" class="headerlink" title="I Think"></a>I Think</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/think.png"></p><blockquote><p> 每天起床，面对这个世界都需要勇气。</p></blockquote><p>为什么这个世界让1900这么害怕，甚至懦弱？</p><p>就像他说的啊，这世界真的太多选择，太多不确定。</p><p>就像今年的疫情，就像这周我的生病，就像突然身边人的离去，一切都是无法预料的。太多不确定的事情，让你乱了套，又得马上调整计划，重新适应，这样 会不会很累？</p><p>这个世界同时充满了太多诱惑，太多喧嚣。</p><p>网络时代，拿起手机，各种信息的拥塞，五花八门的信息涌入你的脑袋，你可能会因为看到搞笑的笑出声，也可能会因为悲伤的事情难受。世界上真的这么多东西需要你去关注吗？ 你可能会因为失去或者未曾拥有某个事物而难受，可能会为生活而精疲力尽。这样 会不会很累？</p><p>为什么1900能成为一个天才？我觉得很大部分原因是因为他的世界就很纯粹，面对的世界是可控的，就是每次一趟的2000人，面对的职业是他热爱的，弹钢琴。世界里只有弹钢琴，只有音乐，这样注定了他的不平凡。</p><p>他很快乐，他很偏执，他知道什么是他想要的，什么不是。</p><p>第一次邀请他下船，面对金钱名誉，这不是他要的 拒绝了。</p><p>第二次对爱的追求，面对爱情，他尝试走下了船梯，注视的远方的城市，回头返回了船和大海，选择了音乐。</p><p>第三次，对生死，他选择了留在船上，在船上出生，在船上死亡。可能有人说可惜了天才，不过可能他如果下了船，他的才能会被泯灭，变为凡人，因为他会面对很多未曾面对的烦恼，事物。这对于他或许是个最好的谢幕。</p><hr><h1 id="So？"><a href="#So？" class="headerlink" title="So？"></a>So？</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/TD2.jpg"></p><blockquote><p>每个人的心里都应该有自己的一艘船</p><p>一个近乎偏执的小归宿</p><p>只是因为它让我们感到实实在在的安全</p><p>不致无枝可依。</p></blockquote><p>为什么我们会焦虑，面对这个太多可能的世界，为当下烦恼，为未来焦虑？</p><p>我觉得我们得找到自己的那艘船，那个属于你的钢琴。</p><p>我想，这艘船就是自己的精神家园，自己的信念，知道什么是你要的，什么不是。这架琴就是自己热爱的事业。</p><p>如果你没有自己的船，你会没有安全感，遇到复杂的变化，很容易被打败，焦虑、恐惧，自然会发生，你想啊，一个没有家的人，在无限可能性的世界里，在暗流涌动的生活里，能不害怕吗？</p><p>如果你没有自己的琴，那你的人生可能碌碌无为，随波逐流。找不到方向，东奔西走，到处流浪。</p><p>两者缺一不可。</p><p>我们的生活，不是在一艘船上，不可能又和1900一样的经历，我们就生活在这个纷繁的世界里，像上文那句话：</p><p>“每天起床面对这个世界，我们都需要有勇气”</p><p>1900虽然值得人称赞，因为他的精神和高超的技艺。不过总的来说是悲剧的，因为他缺乏了一个东西</p><p><strong>勇气</strong></p><p>他没有勇气是因为身边也没有人给他勇气，没有父母，收留他的船工小的时候出事故离开了世界。</p><p>我们不一样，有人给着自己勇气，爱自己的父母，爱的人或物。</p><p>他们给了我们面对这个世界的勇气，所以，So？</p><ul><li><p>每个人的心里都应该有自己的一艘船</p><p>一个近乎偏执的小归宿</p><p>只是因为它让我们感到实实在在的安全</p><p>不致无枝可依。</p></li><li><p>每个人的心里也应该有自己的一座琴</p><p>一个值得奉献一生为之奋斗的事业</p><p>它能给我们快乐和希望</p></li><li><p>每个人心里还应该有勇气</p><p>来自爱的人的勇气</p><p>他们的存在，让你拥有和这个世界搏斗的勇气</p></li></ul><p>所以，拥有自己的船，拥有自己的琴，再加上一点勇气。</p><hr><h1 id="New-Year-Resolution"><a href="#New-Year-Resolution" class="headerlink" title="New Year Resolution"></a>New Year Resolution</h1><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/smoke.jpg"></p><blockquote><ul><li><p>希望自己能够找到自己的船，知道自己想要什么，不想要什么。</p></li><li><p>希望自己能够找到自己的琴，在代码世界中找到自己最爱的部分</p></li><li><p>带着爱的人给我的勇气，无畏的奋斗</p></li></ul></blockquote><p>我把自己所有社交平台的称谓改作1900，也是激励自己。</p><p>钢琴 就是我的电脑。</p><p>键盘按键的数量是有限的，但是敲出来的代码是无限的，希望能够用手敲出美妙的代码，敲出属于我的世界。</p><p>不断让自己的钢琴和自己成长，做程序员中的海上钢琴师。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/eyes.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 闲暇品味人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是深度学习中的卷积?</title>
      <link href="/convolution/"/>
      <url>/convolution/</url>
      
        <content type="html"><![CDATA[<blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/ai2.jpg"></p><p>看了国外大佬的文章有所感悟，有太多的公开课、教程在反复传颂卷积神经网络的好，却都没有讲什么是“卷积”，似乎默认所有读者都有相关基础，所以我想谈谈关于卷积的那些事。</p></blockquote><p>卷积现在可能是深度学习中最重要的概念。正是靠着卷积和卷积神经网络，深度学习才超越了几乎其他所有的机器学习手段。但卷积为什么如此强大？它的原理是什么？在这篇文章中我将讲解卷积及相关概念，帮助你彻底地理解它。</p><p>网络上已经有不少博客讲解卷积和深度学习中的卷积，但我发现它们都一上来就加入了太多不必要的数学细节，艰深晦涩，不利于理解主旨。</p><p>这篇文章虽然也有很多数学细节，但我会以可视化的方式一步步展示它们，确保每个人都可以理解。</p><ul><li>文章第一部分旨在帮助读者理解卷积的概念和深度学习中的卷积网络。</li><li>第二部分引入了一些高级的概念，旨在帮助深度学习方向的研究者和高级玩家进一步加深对卷积的理解。</li></ul><h2 id="第一部分：基本理解"><a href="#第一部分：基本理解" class="headerlink" title="第一部分：基本理解"></a>第一部分：基本理解</h2><p>整篇文章都会探讨这个问题，但先把握行文脉络会很有帮助。那么粗略来讲，什么是卷积呢？</p><p>你可以把卷积想象成一种混合信息的手段。想象一下装满信息的两个桶，我们把它们倒入一个桶中并且通过某种规则搅拌搅拌。也就是说卷积是一种混合两种信息的流程。</p><p>卷积也可以形式化地描述，事实上，它就是一种数学运算，跟减加乘除没有本质的区别。虽然这种运算本身很复杂，但它非常有助于简化更复杂的表达式。在物理和工程上，卷积被广泛地用于化简等式——等会儿简单地形式化描述卷积之后——我们将把这些领域的思想和深度学习联系起来，以加深对卷积的理解。但现在我们先从实用的角度理解卷积。</p><h3 id="我们如何对图像应用卷积"><a href="#我们如何对图像应用卷积" class="headerlink" title="我们如何对图像应用卷积"></a>我们如何对图像应用卷积</h3><p>当我们在图像上应用卷积时，我们在两个维度上执行卷积——水平和竖直方向。我们混合两桶信息：第一桶是输入的图像，由三个矩阵构成——RGB三通道，其中每个元素都是0到255之间的一个整数。第二个桶是卷积核（kernel），单个浮点数矩阵。可以将卷积核的大小和模式想象成一个搅拌图像的方法。卷积核的输出是一幅修改后的图像，在深度学习中经常被称作feature map。对每个颜色通道都有一个feature map。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con2.jpg"></p><p>边缘检测卷积核的效果</p><p>这是怎么做到的呢，我们现在演示一下如何通过卷积来混合这两种信息。一种方法是从输入图片中取出一个与卷积核大小相同的区块——这里假设图片为100×100100×100，卷积核大小为3×33×3，那么我们取出的区块大小就是3×33×3——然后对每对相同位置的元素执行乘法后求和（不同于矩阵乘法，却类似向量内积，这里是两个相同大小的矩阵的“点乘”）。乘积的和就生成了feature map中的一个像素。当一个像素计算完毕后，移动一个像素取下一个区块执行相同的运算。当无法再移动取得新区块的时候对feature map的计算就结束了。这个流程可以用如下的动画演示：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con0.gif"></p><p>RAM是输入图片，Buffer是feature map</p><p>你可能注意到这里有个正规化因子m，这里m的值为kernel的大小9；这是为了保证输入图像和feature map的亮度相同。</p><h3 id="为什么机器学习中图像卷积有用"><a href="#为什么机器学习中图像卷积有用" class="headerlink" title="为什么机器学习中图像卷积有用"></a>为什么机器学习中图像卷积有用</h3><p>图像中可能含有很多我们不关心的噪音。一个好例子是针对时尚图像用深度编码器做的搜索引擎：你上传一幅时尚服饰的图片，编码器自动找出款式类似的服饰。</p><p>如果你想要区分衣服的式样，那么衣服的颜色就不那么重要了；另外像商标之类的细节也不那么重要。最重要的可能是衣服的外形。一般来讲，女装衬衫的形状与衬衣、夹克和裤子的外观非常不同。如果我们过滤掉这些多余的噪音，那我们的算法就不会因颜色、商标之类的细节分心了。我们可以通过卷积轻松地实现这项处理。</p><p>通过索贝尔边缘检测滤波器（与上上一幅图类似）去掉了图像中除了边缘之外的所有信息——这也是为什么卷积应用经常被称作滤波而卷积核经常被称作滤波器（更准确的定义在下面）的原因。由边缘检测滤波器生成的feature map对区分衣服类型非常有用，因为只有外形信息被保留下来。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con3.jpg"></p><p>彩图的左上角是搜索query，其他是搜索结果，你会发现自动编码器真的只关注衣服的外形，而不是颜色。</p><p>再进一步：有许多不同的核可以产生多种feature map，比如锐化图像（强调细节），或者模糊图像（减少细节），并且每个feature map都可能帮助算法做出决策（一些细节，比如衣服上有3个纽扣而不是两个，可能可以区分一些服饰）。</p><p>使用这种手段——读入输入、变换输入、然后把feature map喂给某个算法——被称为特征工程。特征工程非常难，很少有资料帮你上手。造成的结果是，很少有人能熟练地在多个领域应用特征工程。特征工程是——纯手工——也是Kaggle比赛中最重要的技能。特征工程这么难的原因是，对每种数据每种问题，有用的特征都是不同的：图像类任务的特征可能对时序类任务不起作用；即使两个任务都是图像类的，也很难找出相同的有效特征，因为视待识别的物体的不同，有用的特征也不同。这非常依赖经验。</p><p>所以特征工程对新手来讲特别困难。不过对图像而言，是否可以利用卷积核自动找出某个任务中最适合的特征？</p><h3 id="进入卷积神经网络"><a href="#进入卷积神经网络" class="headerlink" title="进入卷积神经网络"></a>进入卷积神经网络<img src="https://picreso.oss-cn-beijing.aliyuncs.com/con11.jpg"></h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con2.jpg"></p><p>卷积神经网络就是干这个的。不同于刚才使用固定数字的卷积核，我们赋予参数给这些核，参数将在数据上得到训练。随着卷积神经网络的训练，这些卷积核为了得到有用信息，在图像或feature map上的过滤工作会变得越来越好。这个过程是自动的，称作特征学习。特征学习自动适配新的任务：我们只需在新数据上训练一下自动找出新的过滤器就行了。这是卷积神经网络如此强大的原因——不需要繁重的特征工程了！</p><p>通常卷积神经网络并不学习单一的核，而是同时学习多层级的多个核。比如一个32x16x16的核用到256×256的图像上去会产生32个241×241（<img src="https://picreso.oss-cn-beijing.aliyuncs.com/latex0.jpg">）的feature map。所以自动地得到了32个有用的新特征。这些特征可以作为下个核的输入。一旦学习到了多级特征，我们简单地将它们传给一个全连接的简单的神经网络，由它完成分类。这就是在概念上理解卷积神经网络所需的全部知识了（池化也是个重要的主题，但还是在另一篇博客中讲吧）。</p><h2 id="第二部分：高级概念"><a href="#第二部分：高级概念" class="headerlink" title="第二部分：高级概念"></a>第二部分：高级概念</h2><p>我们现在对卷积有了一个良好的初步认识，也知道了卷积神经网络在干什么、为什么它如此强大。现在让我们深入了解一下卷积运算中到底发生了什么。我们将认识到刚才对卷积的讲解是粗浅的，并且这里有更优雅的解释。通过深入理解，我们可以理解卷积的本质并将其应用到许多不同的数据上去。万事开头难，第一步是理解卷积原理。</p><h3 id="卷积定理"><a href="#卷积定理" class="headerlink" title="卷积定理"></a>卷积定理</h3><p>要理解卷积，不得不提convolution theorem，它将时域和空域上的复杂卷积对应到了频域中的元素间简单的乘积。这个定理非常强大，在许多科学领域中得到了广泛应用。卷积定理也是快速傅里叶变换算法被称为20世纪最重要的算法之一的一个原因。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con4.jpg"></p><p>第一个等式是一维连续域上两个连续函数的卷积；第二个等式是二维离散域（图像）上的卷积。这里<img src="https://picreso.oss-cn-beijing.aliyuncs.com/latex1.jpg">指的是卷积，<img src="https://picreso.oss-cn-beijing.aliyuncs.com/latex2.jpg">指的是傅里叶变换，<img src="https://picreso.oss-cn-beijing.aliyuncs.com/latex3.jpg">表示傅里叶逆变换，<img src="https://picreso.oss-cn-beijing.aliyuncs.com/latex4.jpg">是一个正规化常量。这里的“离散”指的是数据由有限个变量构成（像素）；一维指的是数据是一维的（时间），图像则是二维的，视频则是三维的。</p><p>为了更好地理解卷积定理，我们还需要理解数字图像处理中的傅里叶变换。</p><h3 id="快速傅里叶变换"><a href="#快速傅里叶变换" class="headerlink" title="快速傅里叶变换"></a>快速傅里叶变换</h3><p>快速傅里叶变换是一种将时域和空域中的数据转换到频域上去的算法。傅里叶变换用一些正弦和余弦波的和来表示原函数。必须注意的是，傅里叶变换一般涉及到复数，也就是说一个实数被变换为一个具有实部和虚部的复数。通常虚部只在一部分领域有用，比如将频域变换回到时域和空域上；而在这篇博客里会被忽略掉。你可以在下面看到一个信号（一个以时间为参数的有周期的函数通常称为信号）是如何被傅里叶变换的：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con1.gif"></p><p>红色是时域，蓝色为频域</p><h3 id="傅里叶域上的图像"><a href="#傅里叶域上的图像" class="headerlink" title="傅里叶域上的图像"></a>傅里叶域上的图像</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con5.jpg"></p><p>我们如何想象图片的频率呢？想象一张只有两种模式的纸片，现在把纸片竖起来顺着线条的方向看过去，就会看到一个一个的亮点。这些以一定间隔分割黑白部分的波就代表着频率。在频域中，低频率更接近中央而高频率更接近边缘。频域中高强度（亮度、白色）的位置代表着原始图像亮度改变的方向。这一点在接下来这张图与其对数傅里叶变换（对傅里叶变换的实部取对数，这样可以减小像素亮度的差别，便于观察更广的亮度区域）中特别明显：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con6.jpg"></p><p>我们马上就可以发现傅里叶变换包含了关于物体朝向的信息。如果物体被旋转了一个角度，从图像像素上可能很难判断，但从频域上可以很明显地看出来。</p><p>这是个很重要的启发，基于傅里叶定理，我们知道卷积神经网络在频域上检测图像并且捕捉到了物体的方向信息。于是卷积神经网络就比传统算法更擅长处理旋转后的图像（虽然还是比不上人类）。</p><h3 id="频率过滤与卷积"><a href="#频率过滤与卷积" class="headerlink" title="频率过滤与卷积"></a>频率过滤与卷积</h3><p>为什么卷积经常被描述为过滤，为什么卷积核经常被称为过滤器呢？通过下一个例子可以解释：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con7.jpg"></p><p>如果我们对图像执行傅里叶变换，并且乘以一个圆形（背景填充黑色，也就是0），我们可以过滤掉所有的高频值（它们会成为0，因为填充是0）。注意过滤后的图像依然有条纹模式，但图像质量下降了很多——这就是jpeg压缩算法的工作原理（虽然有些不同但用了类似的变换），我们变换图形，然后只保留部分频率，最后将其逆变换为二维图片；压缩率就是黑色背景与圆圈的比率。</p><p>我们现在将圆圈想象为一个卷积核，然后就有了完整的卷积过程——就像在卷积神经网络中看到的那样。要稳定快速地执行傅里叶变换还需要许多技巧，但这就是基本理念了。</p><p>现在我们已经理解了卷积定理和傅里叶变换，我们可以将这些理念应用到其他科学领域，以加强我们对深度学习中的卷积的理解。</p><h3 id="流体力学的启发"><a href="#流体力学的启发" class="headerlink" title="流体力学的启发"></a>流体力学的启发</h3><p>流体力学为空气和水创建了大量的微分方程模型，傅里叶变换不但简化了卷积，也简化了微分，或者说任何利用了微分方程的领域。有时候得到解析解的唯一方法就是对微分方程左右同时执行傅里叶变换。在这个过程中，我们常常将解写成两个函数卷积的形式，以得到更简单的表达。这是在一个维度上的应用，还有在两个维度上的应用，比如天文学。</p><h3 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h3><p>你可以混合两种液体（牛奶和咖啡），只要施加一个外力（汤勺搅拌）——这被称为对流，而且是个很快的过程。你也可以耐心等待两种液体自然混合——这被称为扩散，通常是很慢的过程。</p><p>想象一下，一个鱼缸被一块板子隔开，两边各有不同浓度的盐水。抽掉板子后，两边的盐水会逐步混合为同一个浓度。浓度差越大，这个过程越剧烈。</p><p>现在想象一下，一个鱼缸被 256×256 个板子分割为 256×256 个部分（这个数字似乎不对），每个部分都有不同浓度的盐水。如果你去掉所有的挡板，浓度类似的小块间将不会有多少扩散，但浓度差异大的区块间有巨大的扩散。这些小块就是像素点，而浓度就是像素的亮度。浓度的扩散就是像素亮度的扩散。</p><p>这说明，扩散现象与卷积有相似点——初始状态下不同浓度的液体，或不同强度的像素。为了完成下一步的解释，我们还需要理解传播子。</p><h3 id="理解传播子"><a href="#理解传播子" class="headerlink" title="理解传播子"></a>理解传播子</h3><p>传播子就是密度函数，表示流体微粒应该往哪个方向传播。问题是神经网络中没有这样的概率函数，只有一个卷积核——我们要如何统一这两种概念呢？</p><p>我们可以通过正规化来讲卷积核转化为概率密度函数。这有点像计算输出值的softmax。下面就是对第一个例子中的卷积核执行的softmax结果：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con8.jpg"></p><p>现在我们就可以从扩散的角度来理解图像上的卷积了。我们可以把卷积理解为两个扩散流程。首先，当像素亮度改变时（黑色到白色等）会发生扩散；然后某个区域的扩散满足卷积核对应的概率分布。这意味着卷积核正在处理的区域中的像素点必须按照这些概率来扩散。</p><p>在上面那个边缘检测器中，几乎所有临近边缘的信息都会聚集到边缘上（这在流体扩散中是不可能的，但这里的解释在数学上是成立的）。比如说所有低于0.0001的像素都非常可能流动到中间并累加起来。与周围像素区别最大的区域会成为强度的集中地，因为扩散最剧烈。反过来说，强度最集中的地方说明与周围对比最强烈，这也就是物体的边缘所在，这解释了为什么这个核是一个边缘检测器。</p><p>所以我们就得到了物理解释：卷积是信息的扩散。我们可以直接把这种解释运用到其他核上去，有时候我们需要先执行一个softmax正规化才能解释，但一般来讲核中的数字已经足够说明它想要干什么。比如说，你是否能推断下面这个核的的意图？</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con9.jpg"></p><p>对一个概率化的卷积核，怎么会有确定的功能？我们必须根据核对应的概率分布也就是传播子来计算单个粒子的扩散不是吗？</p><p>是的，确实如此。但是，如果你取一小部分液体，比如一滴水，你仍然有几百万水分子。虽然单个分子的随机移动满足传播子，但大量的分子宏观上的表现是基本确定的。这是统计学上的解释，也是流体力学的解释。我们可以把传播子的概率分布解释为信息或说像素亮度的平均分布；也就是说我们的解释从流体力学的角度来讲是没问题的。</p><h3 id="概率论的启发"><a href="#概率论的启发" class="headerlink" title="概率论的启发"></a>概率论的启发</h3><p>卷积与互相关紧密相连。互相关是一种衡量小段信息（几秒钟的音乐片段）与大段信息（整首音乐）之间相似度的一种手段（youtube使用了类似的技术检测侵权视频）。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con14.jpg"></p><p>虽然互相关的公式看起来很难，但通过如下手段我们可以马上看到它与深度学习的联系。在图片搜索中，我们简单地将query图片上下颠倒作为核然后通过卷积进行互相关检验，结果会得到一张有一个或多个亮点的图片，亮点所在的位置就是人脸所在的位置。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con11.jpg"></p><p>这个例子也展示了通过补零来使傅里叶变换稳定的一种技巧，许多版本的傅里叶变换都使用了这种技巧。另外还有使用了其他padding技巧：比如平铺核，分治等等。我不会展开讲，关于傅里叶变换的文献太多了，里面的技巧特别多——特别是对图像来讲。</p><p>在更底层，卷积网络第一层不会执行互相关校验，因为第一层执行的是边缘检测。后面的层得到的都是更抽象的特征，就有可能执行互相关了。可以想象这些亮点像素会传递给检测人脸的单元（Google Brain项目的网络结构中有一些单元专门识别人脸、猫等等；也许用的是互相关？）</p><h3 id="统计学的启发"><a href="#统计学的启发" class="headerlink" title="统计学的启发"></a>统计学的启发</h3><p>统计模型和机器学习模型的区别是什么？统计模型只关心很少的、可以解释的变量。它们的目的经常是回答问题：药品A比药品B好吗？</p><p>机器学习模型是专注于预测效果的：对于年龄X的人群，药品A比B的治愈率高17%，对年龄Y则是23%。</p><p>机器学习模型通常比统计模型更擅长预测，但它们不是那么可信。统计模型更擅长得到准确可信的结果：就算药品A比B好17%，我们也不知道这是不是偶然，我们需要统计模型来判断。</p><p>对时序数据，有两种重要的模型：weighted moving average 和autoregressive模型，后者可归入ARIMA model (autoregressive integrated moving average model)。比起LSTM，ARIMA很弱。但在低维度数据（1-5维）上，ARIMA非常健壮。虽然它们有点难以解释，但ARIMA绝不是像深度学习算法那样的黑盒子。如果你需要一个可信的模型，这是个巨大的优势。</p><p>我们可以将这些统计模型写成卷积的形式，然后深度学习中的卷积就可以解释为产生局部ARIMA特征的函数了。这两种形式并不完全重合，使用需谨慎。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con13.jpg"></p><p>C是一个以核为参数的函数，white noise是正规化的均值为0方差为1的互不相关的数据。</p><p>当我们预处理数据的时候，经常将数据处理为类似white noise的形式：将数据移动到均值为0，将方差调整为1。我们很少去除数据的相关性，因为计算复杂度高。但是在概念上是很简单的，我们旋转坐标轴以重合数据的特征向量：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con12.jpg"></p><p>现在如果我们将C作为bias，我们就会觉得这与卷积神经网络很像。所以卷积层的输出可被解释为白噪音数据经过autoregressive model的输出。</p><p>weighted moving average的解释更简单：就是输入数据与某个固定的核的卷积。看看文末的高斯平滑核就会明白这个解释。高斯平滑核可以被看做每个像素与其邻居的平均，或者说每个像素被其邻居平均（边缘模糊）。</p><p>虽然单个核无法同时创建autoregressive 和 weighted moving average 特征，但我们可以使用多个核来产生不同的特征。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们知道了卷积是什么、为什么在深度学习中这么有用？</p><p>图片区块的解释很容易理解和计算，但有其理论局限性。我们通过学习傅里叶变换知道傅里叶变换后的时域上有很多关于物体朝向的信息。</p><p>通过强大的卷积定理我们理解了卷积是一种在像素间的信息流动。</p><p>之后我们展示了互相关与卷积的相似性，并且卷积网络的性能可能是基于feature map间的互相关程度的，互相关程度是通过卷积校验的。</p><p>最后我们将卷积与两种统计模型关联了起来。</p><p>曾经很长一段时间我都觉得本科的数学和统计课是浪费时间，因为它们感觉和生活遥远。但之后——就像突然中大奖一样——这些知识都相互串起来了并且带了新的理解。我觉得这是个绝妙的例子，启示我们应该耐心地学习所有的大学课程——哪怕它们一开始看起来没有用。现在相当后悔，也在不断的重新深入学习数学知识，哎～</p><p>如果想做人工智能相关的学习，重要的事说三遍：</p><ul><li>好好学数学！</li><li>好好学数学！</li><li>好好学数学！</li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/con2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习探索之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队协作的三大工作流</title>
      <link href="/Gitflow/"/>
      <url>/Gitflow/</url>
      
        <content type="html"><![CDATA[<h1 id="团队协作的三大工作流"><a href="#团队协作的三大工作流" class="headerlink" title="团队协作的三大工作流"></a>团队协作的三大工作流</h1><blockquote><p>Git 作为一个代码版本管理系统，利用它强大的版本控制和branch，我们能做出一些优雅的团队协作的工作流。</p><p>这也是之前我在Git文章谈到的，Git对团队协作具有很大帮助，这篇文章我将来谈谈基于Git的三大工作流。</p></blockquote><p>工作流 在英语中叫做：<code>workflow</code>，从名字上看出团队协作应该像流水一样，顺畅。</p><ul><li>好的工作流能给你团队合作带来很大的好处，有条不紊的应对各种问题。</li><li>坏的工作流可能会使本来一个很好的项目失败在团队协作上。</li></ul><p>所以我们来学学程序员常用到的工作流。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow0.png" alt="flow"></p><p>现在三种广泛使用的工作流程：</p><blockquote><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul></blockquote><p>如果你对Git还不是很熟悉，可以先阅读下面的文章。</p><blockquote><ul><li><a href="https://liuxunzhuo.tech/Git3.html">用《只狼》教你学会Git（上）</a></li><li><a href="https://liuxunzhuo.tech/Git2.html">用《只狼》教你学会Git（中）</a></li><li><a href="https://liuxunzhuo.tech/Git1.html">用《只狼》教你学会Git（下）</a></li></ul></blockquote><hr><h2 id="一、功能驱动"><a href="#一、功能驱动" class="headerlink" title="一、功能驱动"></a>一、功能驱动</h2><p>本文的三种工作流程，有一个共同点：都采用 **”功能驱动式开发”**（Feature-driven development，简称FDD）。</p><p>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p><h2 id="二、Git-flow"><a href="#二、Git-flow" class="headerlink" title="二、Git flow"></a>二、Git flow</h2><p>最早诞生、并得到广泛采用的一种工作流程，就是<strong>Git flow</strong>，相对来说是复杂度较高的，可以看到下面这张图片：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/work.png" alt="Git Flow"></p><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><p>从上面这张图片可以看到，它最主要的特点有两个。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow1.png" alt="工作流特点"></p><p>首先，项目存在两个长期分支。</p><blockquote><ul><li>主分支<code>master</code></li><li>开发分支<code>develop</code></li></ul></blockquote><ol><li>master用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；</li><li>develop用于日常开发，存放最新的开发版。</li></ol><p>其次，项目存在三种短期分支。</p><blockquote><ul><li>功能分支（feature branch）</li><li>补丁分支（hotfix branch）</li><li>预发分支（release branch）</li></ul></blockquote><p>所谓短期分支就是，基于功能，补丁，预发布，一旦完成开发，它们就会被合并进<code>develop</code>或<code>master</code>，然后被删除。</p><h3 id="2-2-优缺点"><a href="#2-2-优缺点" class="headerlink" title="2.2 优缺点"></a>2.2 优缺点</h3><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。</p><p>大多数工具都将<code>master</code>当作默认分支，可是开发是在<code>develop</code>分支进行的，虽然让逻辑更清晰，但这导致经常要切换分支，有一定的复杂度。</p><p>但更大问题在于，这个模式是基于”版本发布”的，目标是一段时间以后产出一个新版本。但是，很多网站项目是”持续发布”，也就是说如果我发布版本的频率很高，代码一有变动，就部署在<code>master</code>一次。这时，<code>master</code>分支和<code>develop</code>分支的差别不大，没必要维护两个长期分支。</p><blockquote><p>所以根据具体项目情况，选择合作方式。</p></blockquote><h2 id="三、Github-flow"><a href="#三、Github-flow" class="headerlink" title="三、Github flow"></a>三、Github flow</h2><p><a href="http://scottchacon.com/2011/08/31/github-flow.html">Github flow</a> 是Git flow的简化版，专门配合”持续发布”。它是 Github.com 使用的工作流程，也同时是参加开源项目的主要合作方式之一。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/githubf.png" alt="Github工作流"></p><h3 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h3><p>它只有一个长期分支，就是<code>master</code>，因此用起来非常简单。</p><blockquote><p>定义：</p><ul><li><p>合作的仓库：我称之主仓库；</p></li><li><p>个人fork之后的仓库：我称之为子仓库。</p></li></ul></blockquote><p>官方推荐的<a href="https://guides.github.com/introduction/flow/index.html">流程</a>如下。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow2.png" alt="Github工作流"></p><blockquote><p>预处理：先从主仓库fork出一个子仓库。</p><p>第一步：根据需求，从子仓库的<code>master</code>拉出新分支，不区分功能分支或补丁分支。</p><p>第二步：新分支开发完成后，或者需要讨论的时候，就向中央仓库的<code>master</code>发起一个<a href="https://help.github.com/articles/using-pull-requests/">pull request</a>（简称PR）。</p><p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p><p>第四步：你的Pull Request被接受，合并进<code>master</code>，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p></blockquote><h3 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><p>Github flow 的最大优点就是简单，对于”持续发布”的产品，可以说是最合适的流程。</p><p>问题在于它的假设：<code>master</code>分支的更新与产品的发布是一致的。也就是说，<code>master</code>分支的最新代码，默认就是当前的线上代码。</p><p>可是，有些时候并非如此，代码合并进入<code>master</code>分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。</p><p>这时，如果还有新的代码提交，<code>master</code>分支就会与刚发布的版本不一致。</p><p>另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于<code>master</code>分支。</p><p>上面这种情况，只有<code>master</code>一个主分支就不够用了。通常，你不得不在<code>master</code>分支以外，另外新建一个<code>production</code>分支跟踪线上版本，即在等待中进行继续开发。</p><p><strong>不过上面所说的情况不是所有项目都能遇到的，根据实际情况随机应变很重要</strong></p><h2 id="四、Gitlab-flow"><a href="#四、Gitlab-flow" class="headerlink" title="四、Gitlab flow"></a>四、Gitlab flow</h2><p><a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html">Gitlab flow</a> 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/gitlab_flow.png" alt="Gitlab"></p><h3 id="4-1-上游优先"><a href="#4-1-上游优先" class="headerlink" title="4.1 上游优先"></a>4.1 上游优先</h3><p>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），即只存在一个主分支<code>master</code>，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p><h3 id="4-2-持续发布"><a href="#4-2-持续发布" class="headerlink" title="4.2 持续发布"></a>4.2 持续发布</h3><p>Gitlab flow 分成两种情况，适应不同的开发流程。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow3.png" alt="持续发布"></p><p>对于”持续发布”的项目，它建议在<code>master</code>分支以外，再建立不同的环境分支。比如，”开发环境”的分支是<code>master</code>，”预发环境”的分支是<code>pre-production</code>，”生产环境”的分支是<code>production</code>。</p><p>开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到<code>master</code>，确认没有问题，再<code>cherry-pick</code>到<code>pre-production</code>，这一步也没有问题，才进入<code>production</code>。</p><p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p><h3 id="4-3-版本发布"><a href="#4-3-版本发布" class="headerlink" title="4.3 版本发布"></a>4.3 版本发布</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/flow4.png" alt="版本发布"></p><p>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从<code>master</code>分支拉出一个分支，比如<code>2-3-stable</code>、<code>2-4-stable</code>等等。</p><p>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p> 对于三大工作流，我个人认为没有绝对的最好和最坏的合作方式.</p><p>在不同场景下，不同工作流各自有着各自的优势，根据团队情况，项目情况选择合适的工作流是最重要的。</p><p>同时可以根据实际对工作流进行修改，不必生搬硬套。</p><p>希望你有所收获～</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 团队协作 </tag>
            
            <tag> Git工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40个有趣的Linux命令</title>
      <link href="/funnyshell/"/>
      <url>/funnyshell/</url>
      
        <content type="html"><![CDATA[<h2 id="1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入"><a href="#1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入" class="headerlink" title="1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入"></a>1、黑客帝国字节数据流——假装自己是黑客高手，无孔不入</h2><p>在命令行中输入以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmatrix</span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-775943b4bcd25d2f161521146793fb5e_b-20200503115841290.jpg" alt="img"></p><p>还可输入参数控制颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmatric -C red</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-45918babd64fa21a5f4758fc9fc03080_b-20200503120112645.jpg" alt="img"></p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>在《黑客帝国》电影里的字节流其实是该片美术指导Simon Whitley的日本妻子菜谱上的片假名。</p></blockquote><h2 id="2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖"><a href="#2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖" class="headerlink" title="2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖"></a>2、高大上仪表盘blessed-contrib——假装自己指点江山，纵横捭阖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">git clone https://github.com/yaronn/blessed-contrib.git</span><br><span class="line">cd blessed-contrib</span><br><span class="line">npm install</span><br><span class="line">node ./examples/dashboard.js</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-bd7d743f210165ea9e954a1ac351bc02_b-20200503120119871.jpg" alt="img"></p><blockquote><p><a href="https://link.zhihu.com/?target=https://github.com/yaronn/blessed-contrib">blessed-contrib项目主页</a><br>建议在云服务器或虚拟机上运行这个命令，在树莓派上运行可能会出问题。</p></blockquote><h2 id="3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食"><a href="#3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食" class="headerlink" title="3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食"></a>3、高大上仪表盘hollywood——假装自己日理万机，宵衣旰食</h2><p>Dustin Kirkland 利用一个长途飞行的时间，编写了这个炫酷、有趣但也没什么实际作用的软件。</p><p>Ubuntu操作系统可以直接通过以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hollywood</span><br><span class="line">hollywood</span><br></pre></td></tr></table></figure><p>在其它Linux发行版中，可以通过以下命令安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:hollywood/ppa</span><br><span class="line">sudo apt-get install hollywood</span><br><span class="line">sudo apt-get install byobu</span><br><span class="line">hollywood</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-b0bbec742c00ffab3cd0f506610c4293_b-20200503120143117.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-a743d132ed462e55eeb356abbdb51f28_b-20200503120150698.jpg" alt="img"></p><blockquote><p><a href="https://link.zhihu.com/?target=https://github.com/dustinkirkland/hollywood">hollywood项目主页</a></p></blockquote><h2 id="4、追逐鼠标的小猫oneko"><a href="#4、追逐鼠标的小猫oneko" class="headerlink" title="4、追逐鼠标的小猫oneko"></a>4、追逐鼠标的小猫oneko</h2><p>在桌面的命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oneko</span><br><span class="line">oneko</span><br></pre></td></tr></table></figure><p>然后输入<code>oneko</code>，即可看到效果。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>注意，本命令只能在桌面所在的命令行界面输入，在远程ssh界面会显示“oneko:Can’t open display”</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-7939d9bdfe02e2c521883796abe1f9a4_b-20200503120156694.jpg" alt="img"></p><h2 id="5、ASCII艺术框：box命令"><a href="#5、ASCII艺术框：box命令" class="headerlink" title="5、ASCII艺术框：box命令"></a>5、ASCII艺术框：box命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install boxes</span><br><span class="line">echo &quot;Tongji Univerisity&quot; | boxes</span><br><span class="line">echo &quot;Tongji Univerisity&quot; | boxes -d dog</span><br><span class="line">fortune | boxes -d cat | lolcat</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-6eaf4f0938f6455647d574c7f0390c67_720w-20200503120200166.jpg" alt="img"></p><h2 id="6、燃起字符串大火aafire"><a href="#6、燃起字符串大火aafire" class="headerlink" title="6、燃起字符串大火aafire"></a>6、燃起字符串大火aafire</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaa-bin  </span><br><span class="line">aafire</span><br></pre></td></tr></table></figure><p>然后输入 <code>aafire</code>，即可看到效果</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-3092a0356f16e9841494c1b28e095470_b-20200503120203210.jpg" alt="img"></p><h2 id="7、火车：Strem-Locomotive"><a href="#7、火车：Strem-Locomotive" class="headerlink" title="7、火车：Strem Locomotive"></a>7、火车：Strem Locomotive</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sl</span><br></pre></td></tr></table></figure><p>然后输入 <code>sl</code>，即可看到效果。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-c2e424a29e7a093a7107ff656ef23998_b-20200503120206469.jpg" alt="img"></p><p>输入<code>sl-h</code>可以看到彩蛋（没有空格）</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-749ac76e83a697312d06163cadbd894d_b-20200503120209352.jpg" alt="img"></p><blockquote><p>这个命令其实是在用户把ls命令输错成sl命令的时候准备的彩蛋。</p></blockquote><h2 id="8、盯着鼠标看的大眼睛"><a href="#8、盯着鼠标看的大眼睛" class="headerlink" title="8、盯着鼠标看的大眼睛"></a>8、盯着鼠标看的大眼睛</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install x11-apps</span><br></pre></td></tr></table></figure><p>然后输入 <code>xeyes</code>，回车，即可看到效果：一双紧盯着鼠标所在位置的大眼睛。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-1f6049ad93063415cf809e3bd8062b59_b-20200503120212136.jpg" alt="img"></p><h2 id="9、艺术字生成器toilet"><a href="#9、艺术字生成器toilet" class="headerlink" title="9、艺术字生成器toilet"></a>9、艺术字生成器toilet</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install toilet</span><br></pre></td></tr></table></figure><p>然后输入下面任意一行命令，通过在命令中加-f更换字体或滤镜，你可以把命令里的<code>Tongji University</code>换成你想要转换的字符。</p><p>案例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-eb60e42d4bb0e77a335420351bb7b1d7_720w-20200503120214990.jpg" alt="img"></p><p>案例2 双色字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet -f mono12 -F metal Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-d523379da079534a038787cbc8724a77_720w-20200503120217523.jpg" alt="img"></p><p>案例3 彩色字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toilet -f mono12 -F gay Tongji University</span><br></pre></td></tr></table></figure><p>输入<code>man toilet</code>查看更多帮助，按<code>q</code>退出。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-4914744e497c4b0326776fbcc78ba5ed_720w-20200503120219781.jpg" alt="img"></p><h2 id="10、艺术字生成器figlet"><a href="#10、艺术字生成器figlet" class="headerlink" title="10、艺术字生成器figlet"></a>10、艺术字生成器figlet</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install figlet</span><br></pre></td></tr></table></figure><p>然后输入下面任意一行命令，通过在命令中加-f更换字体或滤镜，你可以把命令里的<code>Tongji University</code>换成你想要转换的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">figlet Tongji University</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-36ce06062bb64bde15dcc7ac8be568dd_720w-20200503120222019.jpg" alt="img"></p><h2 id="11、字符串视频——回归计算机的上古时代"><a href="#11、字符串视频——回归计算机的上古时代" class="headerlink" title="11、字符串视频——回归计算机的上古时代"></a>11、字符串视频——回归计算机的上古时代</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bb</span><br></pre></td></tr></table></figure><p>然后输入 <code>bb</code>，选择<code>y</code>加音乐，选择<code>8</code>继续，即可看到一段用字符串制作的视频，讲述了视频作者的生涯和使用Linux操作系统的历程，这段视频制作于1997年，基于AAlib平台制作。</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><blockquote><p>这段视频的音乐很带感哦~</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-cd79ec479a23bdf204a990dbc6f1e764_b-20200503120224098.jpg" alt="img"></p><h2 id="12、输出名人名言、古诗词"><a href="#12、输出名人名言、古诗词" class="headerlink" title="12、输出名人名言、古诗词"></a>12、输出名人名言、古诗词</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fortune fortune-zh</span><br></pre></td></tr></table></figure><p>然后输入 <code>fortune</code>，即可看到效果。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-9742107015950d4d7499eec969f2ec31_720w-20200503120225955.jpg" alt="img"></p><blockquote><p>可以把这个程序设置成每次开机自动启动，每次你登陆的时候就能看到一条新的名人名言或唐诗宋词了。</p></blockquote><h2 id="13、字符串水族馆：ASCIIquarium"><a href="#13、字符串水族馆：ASCIIquarium" class="headerlink" title="13、字符串水族馆：ASCIIquarium"></a>13、字符串水族馆：ASCIIquarium</h2><p>第一步：安装各种依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurses-perl</span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf Term-Animation-2.4.tar.gz</span><br><span class="line">cd Term-Animation-2.4/</span><br><span class="line"></span><br><span class="line">sudo perl Makefile.PL &amp;&amp;  make &amp;&amp;   make test</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>第二步：安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">sudo wget https://robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</span><br></pre></td></tr></table></figure><p>如果显示文件下载失败，可以点击<code>https://robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</code>下载压缩包，然后通过FileZilla等文件远程传输软件传输到/tmp文件夹中。</p><p>然后继续执行下列命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf asciiquarium.tar.gz</span><br><span class="line">cd asciiquarium_1.1/</span><br><span class="line">sudo cp asciiquarium /usr/local/bin</span><br><span class="line">sudo chmod 0755 /usr/local/bin/asciiquarium</span><br><span class="line">asciiquarium</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-eb466b724a3503797d123698e46a029d_b-20200503120232151.jpg" alt="img"></p><blockquote><p><a href="https://link.zhihu.com/?target=https://robobunny.com/projects/asciiquarium/html/?page=0">ASCIIquarium项目主页</a></p></blockquote><h2 id="14、会说话的牛"><a href="#14、会说话的牛" class="headerlink" title="14、会说话的牛"></a>14、会说话的牛</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cowsay</span><br></pre></td></tr></table></figure><p>然后输入 <code>cowsay “Hello Tongji Univerisity”</code>。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-aa41236b0150207377f3e9610695d0dc_720w-20200503120233832.jpg" alt="img"></p><p>只需用 <code>-l</code>参数就能看到它能提供的所有动物。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay -l</span><br></pre></td></tr></table></figure><p>会输出如下人物，你可以通过<code>-f</code>参数加人物名字来更换说话人物：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Cow files in /usr/share/cowsay/cows:</span><br><span class="line">apt beavis.zen bong bud-frogs bunny calvin cheese cock cower daemon default</span><br><span class="line">dragon dragon-and-cow duck elephant elephant-in-snake eyes flaming-sheep</span><br><span class="line">ghostbusters gnu head-in hellokitty kiss kitty koala kosh luke-koala</span><br><span class="line">mech-and-cow meow milk moofasa moose mutilated pony pony-smaller ren sheep</span><br><span class="line">skeleton snowman sodomized-sheep stegosaurus stimpy suse three-eyes turkey</span><br><span class="line">turtle tux unipony unipony-smaller vader vader-koala www</span><br></pre></td></tr></table></figure><p>比如更换成hellokitty：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay -f dragon &#x27;Hello Tongji Univerisity&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-01b0fe0fc940c401c8e66fcb058dc838_720w-20200503120235825.jpg" alt="img"></p><p>也可以利用管道命令，将fortune生成的名人名言在cowsay中输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fortune | cowsay</span><br></pre></td></tr></table></figure><p>加个颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lolcat</span><br></pre></td></tr></table></figure><p>利用管道命令，让彩色的恐龙大哥说彩色的唐诗：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fortune | cowsay -f stegosaurus | lolcat</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-c4b303d6d05f6ac33e5c8a7fa5644493_720w-20200503120252940.jpg" alt="img"></p><h2 id="15、会说话的牛2"><a href="#15、会说话的牛2" class="headerlink" title="15、会说话的牛2"></a>15、会说话的牛2</h2><blockquote><p>注意，本命令只能在桌面所在的命令行界面输入，在远程ssh命令行界面输入会显示“Can’t open display”</p></blockquote><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xcowsay</span><br></pre></td></tr></table></figure><p>然后输入 <code>xcowsay “Hello Tongji Univerisity欢迎来同济大学”</code></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-2796e057fcd41b4dd319b7b63ac2414a_720w-20200503120257140.jpg" alt="img"></p><h2 id="16、日历"><a href="#16、日历" class="headerlink" title="16、日历"></a>16、日历</h2><p>直接在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 12 2018</span><br></pre></td></tr></table></figure><p>即可看到2018年12月的日历。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-67644b1b6a03f6f1080723c7139bf975_720w-20200503120258858.jpg" alt="img"></p><p>有趣的是，如果你输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 9 1752</span><br></pre></td></tr></table></figure><p>你会发现这个月少了11天，这是因为当时大英帝国美洲殖民地的历法从凯撒历法换成了格里高利历法，凯撒历法要迟11天，所以这11天成了日历上的空白期。</p><p><a href="https://link.zhihu.com/?target=http://blog.sina.com.cn/s/blog_8713f2c501013md6.html">1752年9月为什么少了11天？</a></p><h2 id="17、yes命令"><a href="#17、yes命令" class="headerlink" title="17、yes命令"></a>17、yes命令</h2><p>直接在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yes Tongji University</span><br><span class="line">yes Tongji University | lolcat</span><br></pre></td></tr></table></figure><p>就会看到无穷无尽输出的Tongji University</p><p>按<code>ctrl</code>+<code>c</code>退出。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-5d011cc9b100d9e510d457844a7fb37e_b-20200503120301157.jpg" alt="img"></p><h2 id="18、分解因数"><a href="#18、分解因数" class="headerlink" title="18、分解因数"></a>18、分解因数</h2><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factor 60</span><br></pre></td></tr></table></figure><p>即可看到60的分解质因数的结果</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-f6d54cfef34330f882a6e4ebb4d8af48_720w-20200503120303094.jpg" alt="img"></p><h2 id="19、screenfetch-显示系统、主题信息"><a href="#19、screenfetch-显示系统、主题信息" class="headerlink" title="19、screenfetch:显示系统、主题信息"></a>19、screenfetch:显示系统、主题信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install screenfetch</span><br><span class="line">screenfetch</span><br></pre></td></tr></table></figure><p>在开源社区或程序员社区提问时，可以通过这条命令，直接截图，就能很清晰地描述自己的系统环境。</p><p>在Ubuntu云服务器上运行：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-b24106e14e5b7dc2bebc2c9eea7b710c_720w-20200503120305020.jpg" alt="img"></p><p>在树莓派上运行：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-234bc1c59665b7057bc979a8dd6ec163_720w-20200503120306696.jpg" alt="img"></p><h2 id="20、linux各发行版logo图片及系统信息"><a href="#20、linux各发行版logo图片及系统信息" class="headerlink" title="20、linux各发行版logo图片及系统信息"></a>20、linux各发行版logo图片及系统信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linuxlogo</span><br><span class="line">linux_logo</span><br><span class="line">linux_logo -f -L list</span><br><span class="line">sudo apt-get install neofetch</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>在ubuntu云服务器上运行linux_logo</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-4e03d610e30f323ccdfc695686593b96_720w-20200503120309106.jpg" alt="img"></p><p>在树莓派上运行linux_logo</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-d2a47e42d7c876500eaf89d647aa0f3f_720w-20200503120310901.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-b6bfe5478e780e0da845ddde0a12e8ee_720w-20200503120312535.jpg" alt="img"></p><p>循环打印所有支持打印的图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..30&#125;;do linux_logo -f -L $i;sleep 0.5;done</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-b6bfe5478e780e0da845ddde0a12e8ee_720w-20200503120314867.jpg" alt="img"></p><h2 id="21、图片转ASCII画风"><a href="#21、图片转ASCII画风" class="headerlink" title="21、图片转ASCII画风"></a>21、图片转ASCII画风</h2><blockquote><p>这条命令在树莓派上运行会出问题，建议在云主机或虚拟机上运行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview imagemagick</span><br><span class="line"></span><br><span class="line">wget http://labfile.oss.aliyuncs.com/courses/1/Linus.png</span><br><span class="line"></span><br><span class="line">asciiview Linus.png</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-75190b52f7495a3cfe47442f052d0d2a_720w-20200503120325199.jpg" alt="img"></p><p>你可以把wget后面的链接换成任意图片的URL。</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.shumeipai.wang/bingbingbing.jpg</span><br><span class="line">asciiview bingbingbing.jpg</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-9ce9a91ed26861c6715b089fd6a776eb_720w-20200503120328101.jpg" alt="img"></p><h2 id="22、反转字符命令"><a href="#22、反转字符命令" class="headerlink" title="22、反转字符命令"></a>22、反转字符命令</h2><p>在命令行中输入<code>rev</code>，打开rev界面，然后输入任意字符，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am a student in Tongji Univerisity</span><br></pre></td></tr></table></figure><p>按回车，即可看到字符反转之后的结果</p><p>按<code>ctrl</code>+<code>c</code>退出rev界面回到命令行界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;I am a student in Tongji Univerisity&quot; | rev</span><br></pre></td></tr></table></figure><p>将一句话中所有单词的顺序反转,但在单词内部字母顺序不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;I am a student in Tongji University&quot; | rev | tr &#x27; &#x27; &#x27;\n&#x27; | tac | tr &#x27;\n&#x27; &#x27; &#x27;| rev</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-5c90fe129516e8461615059c4dd858de_720w-20200503120333039.jpg" alt="img"></p><h2 id="23、打字机pv命令：字幕一个个匀速显示出来"><a href="#23、打字机pv命令：字幕一个个匀速显示出来" class="headerlink" title="23、打字机pv命令：字幕一个个匀速显示出来"></a>23、打字机pv命令：字幕一个个匀速显示出来</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pv</span><br><span class="line">echo &quot;Tongji Opensource&quot; | pv -qL 10</span><br><span class="line">cal | pv -qL 10</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-989776aeada572bc91514e193bd46fe2_b-20200503120335329.jpg" alt="img"></p><h2 id="24、从删库到跑路-sudo-rm-rf"><a href="#24、从删库到跑路-sudo-rm-rf" class="headerlink" title="24、从删库到跑路 sudo rm -rf /*"></a>24、从删库到跑路 sudo rm -rf /*</h2><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-0228069227129493387461738bb59529_720w-20200503120337236.jpg" alt="img"></p><blockquote><p>友情提示：千万不要轻易尝试这个命令，特别是在运行有网站服务器、数据库的Linux主机上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /*</span><br></pre></td></tr></table></figure><ul><li>sudo：获取root管理员权限</li><li>rm：remove，即删除</li><li>-rf：r表示递归删除，即删除所有的子目录，f表示不需要再进行确认</li><li>/：home目录</li><li>*：所有文件</li></ul><p><strong>也就是说，这条命令是删除这台Linux主机上的所有文件，甚至包括开机文件</strong></p><p>关于这条命令的一些有趣的图片：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-3614565ebc86aa30872f9908f63a5bd5_b-20200503120341425.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-5ce9a42ec770536691222370fecaa904_b-20200503120344262.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-0e0b877c3cd96a7cf38c3a75c16069fc_b-20200503120348662.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-c43f1a2451e41a9087ae2f383f21f908_b-20200503120350647.jpg" alt="img"></p><h2 id="25、播放星球大战"><a href="#25、播放星球大战" class="headerlink" title="25、播放星球大战"></a>25、播放星球大战</h2><p>这条命令在windows上都可以运行</p><p>1、打开控制面板，找到”启动或关闭Windows功能“，然后打开Telnet客户端。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-0391f01c256e1243d29b2c0749a0e5b2_720w-20200503120352638.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-410624794145cf6d6dd58eb80766a2b6_720w-20200503120354638.jpg" alt="img"></p><p>2、用管理员模式打开DOS命令行界面，输入以下命令，回车。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-b4d245f59bc25135835861638cc6154e_720w-20200503120401351.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet towel.blinkenlights.nl</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-ea240c2ec2492b1c211d510e3119cbdc_b-20200503120404357.jpg" alt="img"></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-07e8329b4201d99a32cdf42cdebae541_b-20200503120407773.jpg" alt="img"></p><h2 id="26、让命令行说话"><a href="#26、让命令行说话" class="headerlink" title="26、让命令行说话"></a>26、让命令行说话</h2><blockquote><p>运行这个命令不能通过远程连接，必须通过音响</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install espeak</span><br><span class="line">espeak &#x27;Hello my dariling&#x27;</span><br></pre></td></tr></table></figure><h2 id="27、随机产生人名与地址"><a href="#27、随机产生人名与地址" class="headerlink" title="27、随机产生人名与地址"></a>27、随机产生人名与地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rig</span><br><span class="line">rig</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-bf1c1d1fa47bbbb4bdda8a6e2d7e43d3_720w-20200503120410161.jpg" alt="img"></p><h2 id="28、超级牛力——包管理器的彩蛋"><a href="#28、超级牛力——包管理器的彩蛋" class="headerlink" title="28、超级牛力——包管理器的彩蛋"></a>28、超级牛力——包管理器的彩蛋</h2><p>在Ubuntu和Debian上，apt-get包管理器内嵌着一个彩蛋。 如果你在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get help</span><br></pre></td></tr></table></figure><p>在最后一行能找到</p><p>This APT has Super Cow Powers。</p><p>本APT具有超级牛力。</p><p>则说明你的系统可以运行这个菜单。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-946ff7e64e0f97d21043dd47b86fb6d5_720w-20200503120412969.jpg" alt="img"></p><p>在命令行界面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get moo</span><br></pre></td></tr></table></figure><p>即可看到这个彩蛋。</p><p>aptitiude包管理器也有类似的彩蛋</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aptitude moo</span><br><span class="line">aptitude moo -vv</span><br><span class="line">aptitude moo -vvv</span><br><span class="line">aptitude moo -vvvv</span><br><span class="line">aptitude moo -vvvvv</span><br><span class="line">aptitude moo -vvvvvv</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-674f455eeb283523225480e7a9ff7689_720w-20200503120419924.jpg" alt="img"></p><blockquote><p>这个彩蛋的灵感来自于法国作家安托万·德·圣·埃克苏佩里童话小说《小王子》的第一章</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-8882c86333eea320266c9d2377bd9718_720w-20200503120422458.jpg" alt="img"></p><h2 id="29、命令行游戏bastet：俄罗斯方块"><a href="#29、命令行游戏bastet：俄罗斯方块" class="headerlink" title="29、命令行游戏bastet：俄罗斯方块"></a>29、命令行游戏bastet：俄罗斯方块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bastet</span><br><span class="line">bastet</span><br></pre></td></tr></table></figure><p>左右键控制方块移动，上键控制方块旋转。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-ecbcd9d59e1ba0cfd0e4c725341928fb_b-20200503120426119.jpg" alt="img"></p><h2 id="30、命令行游戏ninvaders：太空入侵者"><a href="#30、命令行游戏ninvaders：太空入侵者" class="headerlink" title="30、命令行游戏ninvaders：太空入侵者"></a>30、命令行游戏ninvaders：太空入侵者</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ninvaders</span><br><span class="line">ninvaders</span><br></pre></td></tr></table></figure><p>按空格键发射子弹。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-ec7b1f5649deda39c21be633efe9267b_b-20200503120428025.jpg" alt="img"></p><h2 id="31、命令行游戏pacman4console：吃豆人"><a href="#31、命令行游戏pacman4console：吃豆人" class="headerlink" title="31、命令行游戏pacman4console：吃豆人"></a>31、命令行游戏pacman4console：吃豆人</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pacman4console</span><br><span class="line">pacman4console</span><br></pre></td></tr></table></figure><p>使用方向键控制移动。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-a29d43b582352818de011eb1c9ab49a6_b-20200503120429981.jpg" alt="img"></p><h2 id="32、命令行游戏nSnake：贪吃蛇"><a href="#32、命令行游戏nSnake：贪吃蛇" class="headerlink" title="32、命令行游戏nSnake：贪吃蛇"></a>32、命令行游戏nSnake：贪吃蛇</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nsnake</span><br><span class="line">nsnake</span><br></pre></td></tr></table></figure><p>使用方向键控制。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-184cad0b108704e9d6a24eec84ee924a_b-20200503120432954.jpg" alt="img"></p><h2 id="33、命令行游戏Greed：赢者通吃"><a href="#33、命令行游戏Greed：赢者通吃" class="headerlink" title="33、命令行游戏Greed：赢者通吃"></a>33、命令行游戏Greed：赢者通吃</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install greed</span><br><span class="line">greed</span><br></pre></td></tr></table></figure><p>数字表示下一步可前进的步数，游戏的目标是在咬到自己尾巴之前尽可能多走几步。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-e433936037fd535cf24304e4367bc76f_b-20200503120434910.jpg" alt="img"></p><h2 id="34、命令行游戏Air-Traffic-Controller：空中塔台控制"><a href="#34、命令行游戏Air-Traffic-Controller：空中塔台控制" class="headerlink" title="34、命令行游戏Air Traffic Controller：空中塔台控制"></a>34、命令行游戏Air Traffic Controller：空中塔台控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bsdgames</span><br><span class="line">atc</span><br></pre></td></tr></table></figure><p>在玩之前，你可以先输入<code>man atc</code>查看这个游戏的说明文档。游戏的目标是通过一系列命令输入，引导飞机起飞和降落，进行空中塔台调度。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-7842ac92f3d66c9808aa568719fb6635_b-20200503120437087.jpg" alt="img"></p><h2 id="35、命令行游戏backgammon：双陆棋"><a href="#35、命令行游戏backgammon：双陆棋" class="headerlink" title="35、命令行游戏backgammon：双陆棋"></a>35、命令行游戏backgammon：双陆棋</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bsdgames</span><br><span class="line">backgammon</span><br></pre></td></tr></table></figure><p>这是一款1997年制作的老游戏，游戏开始的时候可以阅读相关规则介绍。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-74f26ae2ef01cde46313d7cdd4ffec1a_720w-20200503120439256.jpg" alt="img"></p><h2 id="36、命令行游戏moonbuggy：月球战车"><a href="#36、命令行游戏moonbuggy：月球战车" class="headerlink" title="36、命令行游戏moonbuggy：月球战车"></a>36、命令行游戏moonbuggy：月球战车</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install moon-buggy</span><br><span class="line">moon-buggy</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-690e5bfc682f602f99f12271f7314312_b-20200503120441658.jpg" alt="img"></p><h2 id="37、命令行游戏2048"><a href="#37、命令行游戏2048" class="headerlink" title="37、命令行游戏2048"></a>37、命令行游戏2048</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/mevdschee/2048.c/master/2048.c</span><br><span class="line">gcc -o 2048 2048.c</span><br><span class="line">./2048</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-227d258ddd1402f1334fc608155c0ea9_b-20200503120446427.jpg"></p><h2 id="38、命令行也能联机玩网游：Tron"><a href="#38、命令行也能联机玩网游：Tron" class="headerlink" title="38、命令行也能联机玩网游：Tron"></a>38、命令行也能联机玩网游：Tron</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh sshtron.zachlatta.com</span><br></pre></td></tr></table></figure><p>使用wasd四个键控制蛇的移动，游戏的目标是既不要咬到别人也不要咬到自己，活着的时间越长分数越高。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-c85e30b610225e8bb7185e927fc89a07_b-20200503120448640.jpg" alt="img"></p><h2 id="39、命令行游戏：巨洞冒险"><a href="#39、命令行游戏：巨洞冒险" class="headerlink" title="39、命令行游戏：巨洞冒险"></a>39、命令行游戏：巨洞冒险</h2><p>巨洞冒险Colossal Cave Adventure，又名 ADVENT、Clossal Cave 或 Adventure，是八十年代初到九十年代末最受欢迎的基于文字的冒险游戏。在 1976 年，一个叫 Will Crowther 的程序员开发了这款游戏的一个早期版本，之后另一位叫 Don Woods 的程序员改进了这款游戏，为它添加了许多新元素，包括计分系统以及更多的幻想角色和场景。这款游戏最初是为 PDP-10 开发的，这是一种历史悠久的大型计算机。后来，它被移植到普通家用台式电脑上，比如 IBM PC 和 Commodore 64。游戏的最初版使用 Fortran 开发，之后在八十年代初它被微软加入到 MS-DOS 1.0 当中。</p><p>游戏的主要目标是找到一个传言中藏有大量宝藏和金子的洞穴并活着离开它。这款游戏的灵感主要来源于原作者 Will Crowther 丰富的洞穴探索的经历。他曾经经常在洞穴中冒险，特别是肯塔基州的猛犸洞Mammoth Cave。因为游戏中的洞穴结构大体基于猛犸洞，你也许会注意到游戏中的场景和现实中的猛犸洞的相似之处。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-yaml libedit-dev</span><br><span class="line">sudo pip3 install PyYAML</span><br><span class="line">git clone https://gitlab.com/esr/open-adventure.git</span><br><span class="line">cd open-adventure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">advent</span><br></pre></td></tr></table></figure><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-ea8983b35f483aad9ea6b7bfdf170630_720w-20200503120451677.jpg" alt="img"></p><h2 id="40、打印圆周率后小数点若干位"><a href="#40、打印圆周率后小数点若干位" class="headerlink" title="40、打印圆周率后小数点若干位"></a>40、打印圆周率后小数点若干位</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pi</span><br><span class="line">pi 50</span><br></pre></td></tr></table></figure><p>打印小数点后若干位的圆周率。</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/v2-5ffc3bfd58b4cb3ac668d5e76b65be1d_720w-20200503120454926.jpg" alt="img"></p><blockquote><p> 感谢原作者：<code>人工智能小技巧</code>的总结，本站作为转载收藏这有趣的40个命令</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Linux </tag>
            
            <tag> Fun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见SQL总结</title>
      <link href="/SQLsummary/"/>
      <url>/SQLsummary/</url>
      
        <content type="html"><![CDATA[<h2 id="数据定义语句"><a href="#数据定义语句" class="headerlink" title="数据定义语句"></a>数据定义语句</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  DATABASE  <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>  DATABASE  <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span> <span class="operator">&lt;</span>修改内容<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  DATABASE  <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> （ <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [列完整性约束]，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>   [列完整性约束]，</span><br><span class="line">    <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [ 列完整性约束]，</span><br><span class="line">    …</span><br><span class="line">   )；</span><br></pre></td></tr></table></figure><blockquote><p>列完整性约束关键词<br>PRIMARY KEY——主键<br>NOT NULL——非空值<br>NULL——空值<br>UNIQUE——值唯一<br>CHECK——有效性检查<br>DEFAULT——缺省值</p></blockquote><h3 id="表约束定义主键"><a href="#表约束定义主键" class="headerlink" title="表约束定义主键"></a>表约束定义主键</h3><blockquote><p>使用列约束关键词PRIMARY KEY定义表的主键列只能定义单列主键，若要定义由多个列构成的复合主键，则需要使用表约束方式来定义。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span>  <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>  <span class="keyword">PRIMARY</span> Key(主键列)</span><br></pre></td></tr></table></figure><h3 id="表约束定义代理键"><a href="#表约束定义代理键" class="headerlink" title="表约束定义代理键"></a>表约束定义代理键</h3><blockquote><p>在一些关系表中，为了方便数据处理，可以使用代理键去替代复合主键。在SQL语句中，关系表的代理键采用表约束方式来定义。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> （ <span class="operator">&lt;</span>代理键列名<span class="operator">&gt;</span>  <span class="operator">&lt;</span>Serial数据类型<span class="operator">&gt;</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [列完整性约束]，</span><br><span class="line">    <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [列完整性约束]，</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">CONSTRAINT</span>  <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>  <span class="keyword">PRIMARY</span> Key(代理键列名)</span><br><span class="line">   )；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="表约束定义外键"><a href="#表约束定义外键" class="headerlink" title="表约束定义外键"></a>表约束定义外键</h3><blockquote><p>在数据库中，一些关系表之间存在关联。在一个表中作为主键的列，在另外的关联表中则作为外键。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> （ <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [列完整性约束]，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>   [列完整性约束]，</span><br><span class="line">    <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>  <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>  [列完整性约束]，</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">CONSTRAINT</span>  <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>  <span class="keyword">FOREIGN</span> Key(外键列)</span><br><span class="line">   )；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="operator">&lt;</span>修改方式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="ADD修改方式，用于增加新列或列完整性约束"><a href="#ADD修改方式，用于增加新列或列完整性约束" class="headerlink" title="ADD修改方式，用于增加新列或列完整性约束"></a>ADD修改方式，用于增加新列或列完整性约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>新列名称<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span><span class="operator">|</span>[完整性约束]</span><br></pre></td></tr></table></figure><h4 id="DROP修改方式，用于删除指定列或列的完整性约束条件"><a href="#DROP修改方式，用于删除指定列或列的完整性约束条件" class="headerlink" title="DROP修改方式，用于删除指定列或列的完整性约束条件"></a>DROP修改方式，用于删除指定列或列的完整性约束条件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span>  <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span>  <span class="keyword">CONSTRAINT</span><span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h4 id="RENAME修改方式，用于修改表名称、列名称"><a href="#RENAME修改方式，用于修改表名称、列名称" class="headerlink" title="RENAME修改方式，用于修改表名称、列名称"></a>RENAME修改方式，用于修改表名称、列名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> RENAME <span class="keyword">TO</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> RENAME <span class="operator">&lt;</span>原列名<span class="operator">&gt;</span> <span class="keyword">TO</span> <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h4 id="ALTER修改方式，用于修改列的数据类型"><a href="#ALTER修改方式，用于修改列的数据类型" class="headerlink" title="ALTER修改方式，用于修改列的数据类型"></a>ALTER修改方式，用于修改列的数据类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ALTER</span>  <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> TYPE<span class="operator">&lt;</span>新的数据类型<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h3 id="删除表结构SQL语句"><a href="#删除表结构SQL语句" class="headerlink" title="删除表结构SQL语句"></a>删除表结构SQL语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h3><blockquote><p>索引作用：支持对数据库表中数据快速查找，其机理类似图书目录可以快速定位章节内容。</p><p>索引优点：</p><ul><li>提高数据检索速度</li><li>可快速连接关联表</li><li>减少分组和排序时间</li></ul><p>索引开销：</p><ul><li>创建和维护索引都需要较大开销</li><li> 索引会占用额外存储空间</li><li> 数据操纵因维护索引带来系统性能开销</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span>  <span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span><span class="operator">&lt;</span>（列名）<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h3 id="索引修改"><a href="#索引修改" class="headerlink" title="索引修改"></a>索引修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="operator">&lt;</span>修改项<span class="operator">&gt;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> RENAME <span class="keyword">TO</span> <span class="operator">&lt;</span>新索引名<span class="operator">&gt;</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="索引删除"><a href="#索引删除" class="headerlink" title="索引删除"></a>索引删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> ；</span><br></pre></td></tr></table></figure><h2 id="数据操作语句"><a href="#数据操作语句" class="headerlink" title="数据操作语句"></a>数据操作语句</h2><h3 id="插入语句："><a href="#插入语句：" class="headerlink" title="插入语句："></a>插入语句：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span>  <span class="operator">&lt;</span>表名<span class="operator">|</span>视图名<span class="operator">&gt;</span>[<span class="operator">&lt;</span>列名表<span class="operator">&gt;</span>]  <span class="keyword">VALUES</span> （列值表）;</span><br></pre></td></tr></table></figure><h3 id="修改语句："><a href="#修改语句：" class="headerlink" title="修改语句："></a>修改语句：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE  <span class="operator">&lt;</span>表名<span class="operator">|</span>视图名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span>  <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="number">1</span><span class="operator">&gt;</span> [，<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="number">2</span><span class="operator">&gt;</span>...]</span><br><span class="line">[<span class="keyword">WHERE</span>   <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]；</span><br></pre></td></tr></table></figure><h3 id="删除语句："><a href="#删除语句：" class="headerlink" title="删除语句："></a>删除语句：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="operator">|</span>视图名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span>   <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]；</span><br></pre></td></tr></table></figure><h2 id="数据查询语句"><a href="#数据查询语句" class="headerlink" title="数据查询语句"></a>数据查询语句</h2><h3 id="数据查询SQL语句格式"><a href="#数据查询SQL语句格式" class="headerlink" title="数据查询SQL语句格式"></a>数据查询SQL语句格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>]  <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line">[ <span class="keyword">INTO</span> <span class="operator">&lt;</span>新表<span class="operator">&gt;</span> ]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="operator">|</span>视图名<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>表名<span class="operator">|</span>视图名<span class="operator">&gt;</span>…]</span><br><span class="line">[ <span class="keyword">WHERE</span>  <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span> ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span>  <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span> ]]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span>  <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ] ];</span><br></pre></td></tr></table></figure><h3 id="从单个表读取指定列-投影运算"><a href="#从单个表读取指定列-投影运算" class="headerlink" title="从单个表读取指定列(投影运算)"></a>从单个表读取指定列(投影运算)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>关系表<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h3 id="从单个表读取指定行-选择运算"><a href="#从单个表读取指定行-选择运算" class="headerlink" title="从单个表读取指定行(选择运算)"></a>从单个表读取指定行(选择运算)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>关系表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="从单个表读取指定行和列："><a href="#从单个表读取指定行和列：" class="headerlink" title="从单个表读取指定行和列："></a>从单个表读取指定行和列：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>关系表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="Where条件子句"><a href="#Where条件子句" class="headerlink" title="Where条件子句"></a>Where条件子句</h3><blockquote><p>使用BETWEEN..AND关键词来限定列值范围，还可以使用关键词LIKE与通配符来限定查询条件。</p><p>使用通配符来限定字符串数据范围。下划线（_）通配符用于代表一个未指定的字符。百分号（%）通配符用于代表一个或多个未指定的字符。</p><p>在SQL查询Where子句中，还可以使用多个条件表达式，并通过逻辑运算符（AND、OR、NOT）连接操作，以及使用IN或NOT IN关键词，进一步限定结果集的数据范围。</p><p>使用IN关键字限定范围</p></blockquote><h3 id="对结果集进行排序："><a href="#对结果集进行排序：" class="headerlink" title="对结果集进行排序："></a>对结果集进行排序：</h3><blockquote><p>在SELECT查询语句返回的结果集中,行的顺序是任意的。如果需要结果集排序，可以在SELECT语句中加入ORDER BY关键字。</p><p>在默认情况下，SQL查询的结果集是按指定列值的升序排列。可以使用关键词ASC和DESC选定排序是升序或降序。</p><p>如果结果集需要按多个列排序，可以分别加入关键字ASC或DESC改变。</p></blockquote><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><blockquote><p>SQL语言提供了大量内置函数，支持对SELECT查询结果数据进行处理。</p><p>典型SQL内置函数类型如下：</p><ul><li>聚合函数</li><li>算术函数</li><li>字符串函数</li><li>日期时间函数</li><li>数据类型转换函数</li></ul></blockquote><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><blockquote><p>聚合函数是一些对关系表中数值属性列进行计算并返回一个结果数值的函数。</p></blockquote><table><thead><tr><th>聚合函数</th><th>功能</th></tr></thead><tbody><tr><td>AVG（）</td><td>计算结果集指定列数据的平均值</td></tr><tr><td>COUNT（）</td><td>计算结果集行数</td></tr><tr><td>MIN（）</td><td>找出结果集指定列数据的最小值</td></tr><tr><td>MAX（）</td><td>找出结果集指定列数据的最大值</td></tr><tr><td>SUM（）</td><td>计算结果集指定列数据的总和</td></tr></tbody></table><h3 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    统计函数（目标列）</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span>  条件]</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span>  <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">Having</span>  条件];</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>GROUP BY 是分组查询, 一般 GROUP BY 是和聚合函数配合使用</p></li><li><p>group by 有一个原则,就是 select 后面的所有列中,没有使用聚合函数的列,必须出现在 group by 后面或者包含在having 后的聚合函数里。</p></li><li><p>where 子句的作用是在对查询结果进行分组前将不符合where条件的行去掉，即在分组之前过滤数据条件中不能包含聚合函数。 </p></li><li><p>having 子句的作用是筛选满足条件的组，即在分组之后过滤数据条件中经常包含聚合函数。</p></li><li><p>注意：</p><ul><li>除了使用GROUP BY语句外，列的名称是不允许和内置函数一起混合使用</li><li>一般来说，内置函数是不能用于WHERE子句中的。</li></ul></li><li><p>当同时含有where子句、group by 子句 、having子句及聚集函数时，执行顺序如下：<br>执行where子句查找符合条件的数据；<br>使用group by 子句对数据进行分组；<br>对group by 子句形成的组运行聚集函数计算每一组的值；<br>最后用having 子句去掉不符合条件的组。</p></li></ul></blockquote><h3 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h3><h4 id="子查询与多表关联查询"><a href="#子查询与多表关联查询" class="headerlink" title="子查询与多表关联查询"></a>子查询与多表关联查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子查询<span class="keyword">SQL</span>语句基本格式：</span><br><span class="line"><span class="keyword">SELECT</span>    <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="operator">&lt;</span>条件中嵌套另一关系表的<span class="keyword">SELECT</span> 查询结果集<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内连接关联多表查询"><a href="#内连接关联多表查询" class="headerlink" title="内连接关联多表查询"></a>内连接关联多表查询</h4><blockquote><p>在使用多个表查询时，子查询只有在结果数据均来自一个表的情况下才有用。但如果需要从两个或多个表中获取结果数据，就不能使用子查询，而需要采用连接关联多表查询。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">连接关联多表查询<span class="keyword">SQL</span>语句基本格式：</span><br><span class="line"><span class="keyword">SELECT</span>    <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="number">1</span><span class="operator">&gt;</span>，<span class="operator">&lt;</span>表名<span class="number">2</span><span class="operator">&gt;</span>，…, <span class="operator">&lt;</span>表名n<span class="operator">&gt;</span>，</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="operator">&lt;</span>关系表之间的连接关联条件<span class="operator">&gt;</span></span><br><span class="line">使用临时变量指定表 table1 <span class="keyword">as</span> A，table2 <span class="keyword">as</span> B</span><br><span class="line"></span><br><span class="line">两表连接关联查询的<span class="keyword">JOIN</span>…<span class="keyword">ON</span>语句格式如下：</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>目标列<span class="operator">&gt;</span>…]</span><br><span class="line"><span class="keyword">FROM</span>  <span class="operator">&lt;</span>表名<span class="number">1</span><span class="operator">&gt;</span>  <span class="keyword">JOIN</span>  <span class="operator">&lt;</span>表名<span class="number">2</span><span class="operator">&gt;</span>  <span class="keyword">ON</span> <span class="operator">&lt;</span>连接条件<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="外连接关联多表查询"><a href="#外连接关联多表查询" class="headerlink" title="外连接关联多表查询"></a>外连接关联多表查询</h4><blockquote><p>在SQL 应用中，有时候也希望输出那些不满足连接条件的元组数据。这时，可使用JOIN…ON外连接方式实现。其实现方式有三种形式，具体如下：</p><ul><li>LEFT JOIN: 左外连接，即使没有与右表关联列值匹配，也从左表返回所有的行。</li><li>RIGHT JOIN: 右外连接，即使没有与左表关联列值匹配，也从右表返回所有的行。</li><li>FULL JOIN: 全外连接，同时进行左连接和右连接，就返回所有行。</li></ul></blockquote><h2 id="数据控制语句"><a href="#数据控制语句" class="headerlink" title="数据控制语句"></a>数据控制语句</h2><blockquote><p>在SQL语言中，数据控制SQL语句是一种可对用户数据访问权进行控制的操作语句，它可以控制特定用户或角色对数据表、视图、存储过程、触发器等数据库对象的访问权限。</p><p>主要有如下语句：</p><ul><li><p>GRANT授权语句</p></li><li><p>REVOKE 收权语句</p></li><li><p> DENY拒绝权限语句</p></li></ul></blockquote><h3 id="GRANT权限授予语句"><a href="#GRANT权限授予语句" class="headerlink" title="GRANT权限授予语句"></a>GRANT权限授予语句</h3><blockquote><p>GRANT语句是一种由数据库对象创建者或管理员执行的权限授予语句，它可以把访问数据库对象权限授予给其他用户或角色。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="operator">&lt;</span>权限列表<span class="operator">&gt;</span>  <span class="keyword">ON</span>  <span class="operator">&lt;</span>数据库对象<span class="operator">&gt;</span>  <span class="keyword">TO</span>  <span class="operator">&lt;</span>用户或角色<span class="operator">&gt;</span> [ <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION ]；</span><br></pre></td></tr></table></figure><h3 id="REVOKE权限收回语句"><a href="#REVOKE权限收回语句" class="headerlink" title="REVOKE权限收回语句"></a>REVOKE权限收回语句</h3><blockquote><p>REVOKE语句是一种由数据库对象创建者或管理员将赋予其它用户或角色的权限进行收回语句，它可以收回原授予给其他用户或角色的权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span>  <span class="operator">&lt;</span>权限列表<span class="operator">&gt;</span>  <span class="keyword">ON</span>  <span class="operator">&lt;</span>数据库对象<span class="operator">&gt;</span>  <span class="keyword">FROM</span>  <span class="operator">&lt;</span>用户或角色<span class="operator">&gt;</span> ;</span><br></pre></td></tr></table></figure><h3 id="DENY权限拒绝语句"><a href="#DENY权限拒绝语句" class="headerlink" title="DENY权限拒绝语句"></a>DENY权限拒绝语句</h3><blockquote><p>DENY语句用于拒绝给当前数据库内的用户或者角色授予权限，并防止用户或角色通过其组或角色成员继承权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DENY  <span class="operator">&lt;</span>权限列表<span class="operator">&gt;</span>  <span class="keyword">ON</span>  <span class="operator">&lt;</span>数据库对象<span class="operator">&gt;</span>  <span class="keyword">TO</span>  <span class="operator">&lt;</span>用户或角色<span class="operator">&gt;</span> ;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>视图——是一种通过基础表或其它视图构建的虚拟表。它本身没有自己的数据，而是使用了存储在基础表中的数据。 </p></blockquote><h3 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span>  <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>[(列名<span class="number">1</span>)，(列名<span class="number">2</span>)，…]  <span class="keyword">AS</span>  <span class="operator">&lt;</span><span class="keyword">SELECT</span>查询<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><h3 id="视图删除"><a href="#视图删除" class="headerlink" title="视图删除"></a>视图删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  <span class="keyword">VIEW</span>  <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>；</span><br></pre></td></tr></table></figure><blockquote><p>视图的好处：</p><ol><li>使用视图简化复杂SQL查询操作</li><li>使用视图提高数据访问安全性</li><li>提供一定程度的数据逻辑独立性</li><li>集中展示用户所感兴趣的特定数据</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Engineer童子功 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必会的Markdown（上）</title>
      <link href="/markdown1/"/>
      <url>/markdown1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/md.png"></p><blockquote><p> 学会Markdown看这一篇就够了</p><p>只用一个小时就能完全掌握这一效率利器</p></blockquote><h2 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h2><blockquote><ul><li><p><strong>Markdown</strong>是一种<strong>轻量级标记语言</strong>，创始人为 約翰·格魯伯（英語：John Gruber）2004年诞生。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。</p></li><li><p>在语法上有很大一部分是跟 <strong>亚伦·斯沃茨</strong>（Aaron Swartz）共同合作的，不知道大家有没有听说过这个计算机天才，豆瓣高分电影<strong>互联网之子</strong>就是讲的他的故事，可惜在26岁就自杀去世了，是一个很大的遗憾，具体不在这里展开，推荐大家去看看这部电影<strong>《互联网之子》</strong></p></li></ul><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/araon.jpg"></p></blockquote><p>简单来说:</p><p>它就是在你写的文本里面加入一些标记符号如 + &gt; # [] () * 让你的文本格式化，变得有逻辑。增加易读性，学习起来非常简单</p><hr><h2 id="为什么学习Markdown"><a href="#为什么学习Markdown" class="headerlink" title="为什么学习Markdown?"></a>为什么学习Markdown?</h2><blockquote><p>可能听了上面的基础的解释，大体上对Markdown有了一个概念，但是为什么我们要学习Markdown呢？可能还是有点迷糊，接下来我来用例子来具体解释一下</p></blockquote><p>在定义里面其实包含了很多信息，我们再来读一遍</p><blockquote><p><strong>Markdown</strong>是一种<strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。</p></blockquote><p><strong>Markdown</strong>主要是用来转化成HTML页面的，要知道你现在看到的这个页面，就是HTML写的，HTML又叫做<strong>超文本标记语言</strong>，你现在看到的页面实际上代码是这样的（部分），浏览器渲染后变成了现在你看到的这个页面：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/body.jpeg"></p><blockquote><p>看起来是不是很复杂呢？而网页其实都是这样由标签和数据构成的（HTML），再加上格式的修饰（CSS）和一些逻辑（JavaScript）。</p><p>程序员中有个职位叫做前端开发，他们就是很熟悉HTML，主要做网页的开发设计。</p><p>但是如果仅仅是要写文章，或者写文档，展示在网页上，让所有程序员都用HTML来写是繁琐的而且很困难。</p><p>所以才有了Markdown。</p><p>文本后缀 是 xxx.md的就是markdown文件</p><p>打个比方来说：HTML和Markdown的关系可能就是一个爸爸一个儿子，Markdown类似于HTML的一种封装，所以有时候你在Markdown里面加入HTML的标签实际上也是可行的</p><p>对于浏览器来说Markdown就好像多了一层解封装的过程，最后还是归于了HTML</p></blockquote><p>那Markdown又能做什么呢？它能根据规则转化成这种页面，我这篇文章就是用的Markdown写的，就像这样：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/mk.png"></p><blockquote><p> 是不是对比下来Markdown方便的多啊？再加上一些Markdown编辑器（最后我会推荐，一定要装！！），能让你边写就边看到浏览器上转化后的样子。像这样：</p></blockquote><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/real.png"></p><p>是不是很牛逼呢？ 作为程序员在这些地方：</p><ul><li>比如在GitHub上做项目的时候，发布的文档的时候</li><li>自己做网站，写博客，写公众号的时候</li><li>记笔记的时候（熟练掌握之后效率很高）</li><li>…..</li></ul><p>Markdown的优势就在于：</p><ul><li>语法简单： Markdown 的语法是一些简单而且常用的标记符号，任何人只要花几分钟就能学会；</li><li>兼容性强： Markdown 是兼容性非常强的纯文本内容，可以使用任何编辑器打开，格式都不会乱；</li><li>导出方便： Markdown 可以导出 PDF、Word、HTML、Epub、LaTeX 等文件格式；</li><li>专注内容： 使用 Markdown 写作再也不用纠结排版，其简洁优雅的格式会让你沉浸到写作的乐趣之中；</li><li>团队协作： Github、Gitlab、Gitbook 都支持 Markdown，团队协作再也不是问题了；</li></ul><h2 id="Markdown编辑器推荐"><a href="#Markdown编辑器推荐" class="headerlink" title="Markdown编辑器推荐"></a>Markdown编辑器推荐</h2><img src="https://picreso.oss-cn-beijing.aliyuncs.com/typora3.png" style="width: 100%"><h3 id="Typora：-我的首选，使用Markdown必装！"><a href="#Typora：-我的首选，使用Markdown必装！" class="headerlink" title="Typora： 我的首选，使用Markdown必装！"></a>Typora： 我的首选，使用Markdown必装！</h3><ul><li>边写Markdown 边显示浏览器效果 </li><li><img src="https://picreso.oss-cn-beijing.aliyuncs.com/typora.png" style="width: 100%"></li><li>有一定自动完成的功能，比如你写代码块等等，自动会补全很符合直觉</li><li>支持多平台</li><li>能够对Markdown进行类型转换 如 Word PDF等</li><li>有很多模式</li><li><img src="https://picreso.oss-cn-beijing.aliyuncs.com/typora1.png" style="width: 100%"></li><li>有很多主题</li><li><img src="https://picreso.oss-cn-beijing.aliyuncs.com/typora2.png" style="width: 100%"></li><li>缺点本地编辑，不能云同步</li></ul><h3 id="同步Markdown软件："><a href="#同步Markdown软件：" class="headerlink" title="同步Markdown软件："></a>同步Markdown软件：</h3><ol><li>有道云笔记</li><li>印象笔记都支持Markdown</li></ol><blockquote><p>通过这一篇文章的学习，</p><p>你对Markdown：</p><ul><li>是什么</li><li>为什么学</li><li>相关软件</li></ul><p>都有了一个认识，下一篇我们学习Markdown的语法，安装好Typora之后就可以开始下一篇的学习啦~加油</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 必会的工具 </tag>
            
            <tag> Markdown教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必会的Markdown（下）</title>
      <link href="/markdown2/"/>
      <url>/markdown2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/mkd.png"></p><blockquote><p>学习了Markdown相关的基础，装好了Typora了吗，如果都准备好了，我们就开始正式的学习Markdown的语法吧~边学，边在Typora中实现</p></blockquote><hr><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><blockquote><p>主要用到 # 这个符号</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#一级标题</span></span><br><span class="line"><span class="section">##二级标题</span></span><br><span class="line"><span class="section">###三级标题</span></span><br><span class="line"><span class="section">####四级标题</span></span><br><span class="line"><span class="section">#####五级标题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">格式是 # + 一个空格 + 内容</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/h.png"></p><blockquote><p>很简单吧？OK，继续</p></blockquote><hr><h2 id="段落格式："><a href="#段落格式：" class="headerlink" title="段落格式："></a>段落格式：</h2><h3 id="字体样式："><a href="#字体样式：" class="headerlink" title="字体样式："></a>字体样式：</h3><blockquote><p>主要用到 * 和 _ 这两者是等效的</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="strong">__<span class="emphasis">_粗斜体<span class="strong">__<span class="emphasis">_</span></span></span></span></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure><p>显示效果：</p><p><em>斜体文本</em><br><em>斜体文本</em></p><p><strong>粗体文本</strong><br><strong>粗体文本</strong></p><p><em><strong>粗斜体</strong></em><br><em><strong>粗斜体</strong></em></p><h3 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h3><blockquote><p>主要用到 *和 - 两者等效</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br></pre></td></tr></table></figure><p>分割线的方式很多，随便选其一就好了</p><p>显示效果：</p><hr><h3 id="删除线："><a href="#删除线：" class="headerlink" title="删除线："></a>删除线：</h3><blockquote><p>主要用到 ~</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">liuxunzhuo</span><br><span class="line">~~liuxunzhuo~~</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>liuxunzhuo<br><del>liuxunzhuo</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线:"></a>下划线:</h3><blockquote><p>用标签代替</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span> 带下划线 <span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示如下：</p><p><u> 带下划线 </u></p><h2 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h2><blockquote><p>列表分为 <strong>有序表</strong> 和 <strong>无序表</strong></p><p>有序列表主要用到：</p><ul><li>数字</li><li>.</li></ul><p>无序列表主要用到：</p><ul><li>+</li><li>*</li><li>-</li></ul></blockquote><p>无序表格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> - + 等效</span><br></pre></td></tr></table></figure><p>显示如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序表 用数字加上**.**来表示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> first</span><br><span class="line"><span class="bullet">2.</span> second</span><br><span class="line"><span class="bullet">3.</span> third</span><br></pre></td></tr></table></figure><p>显示如下：</p><ol><li>first</li><li>second</li><li>third</li></ol><blockquote><p>Tips：</p><p>有序列表和无序列表可以嵌套使用 如：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> first:</span><br><span class="line"><span class="bullet">+</span> one</span><br><span class="line"><span class="bullet">+</span> one</span><br><span class="line"><span class="bullet">+</span> one</span><br><span class="line"><span class="bullet">2.</span> second：</span><br><span class="line"><span class="bullet">+</span> two</span><br><span class="line"><span class="bullet">+</span> two</span><br><span class="line"><span class="bullet">+</span> two</span><br><span class="line"><span class="bullet">3.</span> third：</span><br><span class="line"><span class="bullet">+</span> three</span><br><span class="line"><span class="bullet">+</span> three</span><br><span class="line"><span class="bullet">+</span> three</span><br></pre></td></tr></table></figure><p>显示如下：（自己灵活使用）</p><ol><li>first:<ul><li>one<ul><li>one</li><li>one</li></ul></li></ul></li><li>second：<ul><li>two<ul><li>two</li><li>two</li></ul></li></ul></li><li>third：<ul><li>three<ul><li>three</li><li>three</li></ul></li></ul></li></ol><h2 id="区块："><a href="#区块：" class="headerlink" title="区块："></a>区块：</h2><blockquote><p> 区块使用了**&gt;**这个符号，同时也支持嵌套，多层：</p></blockquote><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 你好啊</span></span><br><span class="line"><span class="quote">&gt; 你好啊</span></span><br><span class="line"><span class="quote">&gt; 你好啊</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 第一层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第二层</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第三层</span></span><br></pre></td></tr></table></figure><p>显示如下：</p><blockquote><p>你好啊<br>你好啊<br>你好啊</p></blockquote><blockquote><p>你好啊</p><blockquote><p>你好啊</p><blockquote><p>你好啊</p></blockquote></blockquote></blockquote><h2 id="代码引用："><a href="#代码引用：" class="headerlink" title="代码引用："></a>代码引用：</h2><blockquote><p>代码引用使用了**`**这个符号：</p><p>这个经常会使用，你懂的~</p></blockquote><ul><li><p>局部代码 用一对`引起来：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="code">`printf()`</span>函数</span><br></pre></td></tr></table></figure><p>显示：</p><p><code>printf()</code>函数</p></li><li><p>区块代码 用 ``` 起头并加上代码类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">​<span class="code">```java</span></span><br><span class="line"><span class="code">public static void main(String[] args)&#123;</span></span><br><span class="line"><span class="code">System.out.println(&quot;Welcome to Xunzhuo`s World&quot;);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>显示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Welcome to Xunzhuo`s World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="链接和图片引用："><a href="#链接和图片引用：" class="headerlink" title="链接和图片引用："></a>链接和图片引用：</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote><p>主要用到 [] () &lt;&gt;</p></blockquote><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">name</span>](<span class="link">url</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">显然第一种更常用</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">刘训灼的网站</span>](<span class="link">https://www.liuxunzhuo.top</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml">&lt;https://www.liuxunzhuo.top&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示如下：</p><p><a href="https://www.liuxunzhuo.top/">刘训灼的网站</a></p><p><a href="https://www.liuxunzhuo.top/">https://www.liuxunzhuo.top</a></p><p>高级链接：（类似用了一个变量临时表示url）：</p><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我的主页用  main 作为网址变量 [<span class="string">MainPage</span>][<span class="symbol">main</span>]</span><br><span class="line">我的标签页用 tags 作为网址变量 [<span class="string">Tag</span>][<span class="symbol">tag</span>]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">main</span>]: <span class="link">https://www.liuxunzhuo.top/</span></span><br><span class="line">[<span class="symbol">tag</span>]: <span class="link">https://www.liuxunzhuo.top/tags/</span></span><br></pre></td></tr></table></figure><p>我的主页用  main 作为网址变量 <a href="https://www.liuxunzhuo.top/">MainPage</a><br>我的标签页用 tags 作为网址变量 <a href="https://www.liuxunzhuo.top/tags/">Tag</a><br>然后在文档的结尾为变量赋值（网址）</p><blockquote><p>对于这个用法我个人觉得其实很有技巧性</p><p>比如你在编辑的时候可以用有意义的名称去指代URL，在最后统一指定</p><p>如果引用多的情况下，可以一定程度保证专注性</p></blockquote><h3 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h3><blockquote><p>主要用到 ! [] () &lt;&gt;</p></blockquote><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">![<span class="string">属性</span>](<span class="link">URL</span>)</span><br><span class="line">当然也能像链接的高级应用，可以临时用变量指代URL，最后声明</span><br><span class="line"></span><br><span class="line">方式二：用HTML的标签</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span>&gt;</span></span></span><br><span class="line">优势在于可以指定大小</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">默认</span><br><span class="line">![<span class="string">我的主页图片</span>](<span class="link">https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg</span>)</span><br><span class="line">默认</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg&quot;</span>&gt;</span></span></span><br><span class="line">80%</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span>&gt;</span></span></span><br><span class="line">50%</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示如下：</p><p>默认</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg" alt="我的主页图片"></p><p>默认</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg"><p>80%</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg" style="width: 80%"><p>50%</p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/main.jpeg" style="width: 50%"><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h2><blockquote><p>Markdown可以制作简单的表格：</p><p>使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>主要用到 - 和 |</p></blockquote><p>格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line"></span><br><span class="line">指定对齐方式：</span><br><span class="line">-: 右对齐</span><br><span class="line">:- 左对齐</span><br><span class="line">:-: 居中</span><br><span class="line"></span><br><span class="line">|  左对齐  | 居中   | 右对齐  |</span><br><span class="line">| :----  | :----: | ----: |</span><br><span class="line">| 单元格   |  居中  | 单元格  |</span><br><span class="line">| 单元格   |  居中  |单元格   |</span><br></pre></td></tr></table></figure><p>显示：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>指定对齐方式：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="center">居中</td><td align="right">单元格</td></tr><tr><td align="left">单元格</td><td align="center">居中</td><td align="right">单元格</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 必会的工具 </tag>
            
            <tag> Markdown教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用《只狼》教你学会Git（上）</title>
      <link href="/Git3/"/>
      <url>/Git3/</url>
      
        <content type="html"><![CDATA[<h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><blockquote><p>Git 又叫做分布式版本控制系统</p><p>我用《只狼》这个游戏的例子来通俗的解释它</p><p>在代码的管理上，团队的协作上都发挥着重要的作用</p><p>一个小时时间你就能使用它</p></blockquote><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><blockquote><p>定义：<strong>Git 是一个分布式版本控制系统</strong></p></blockquote><p>当你问起会使用Git的人，那他们可能回答的就是如上定义，还是一头雾水？</p><p><strong>那到底什么是「分布式」 什么又是「版本」，什么又是「控制」呢？</strong></p><h3 id="版本控制是什么？"><a href="#版本控制是什么？" class="headerlink" title="版本控制是什么？"></a>版本控制是什么？</h3><p><strong>我通俗的来解释一下，什么是「版本控制」：</strong></p><p>大家打过一些存档的游戏吧，《只狼》这个角色扮演游戏以它超高的难度著称（我最后是开着挂把苇名一心干掉的，太羞耻了）：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/lang.jpg"></p><p>一开始一无所有，然后接任务，闯关，升级，刷装备从一无所有到所向披靡，但是常常会有这样一个操作，就是完成某个章节之后，到一个地方给你回血存档，为什么要这么做呢？</p><p>原因大家都明白，如果我技术高超一下打到了最后一关，结果一个BOSS把我干掉了，我难道又回到第一关的时候吗？只狼如果这么做，那这个游戏可能没法玩了。</p><p>存档就相当于给某个时间点加了一个标签，我在游戏中死了，我可以回到最近的标签</p><p>「版本控制」也是这个道理，在你管理你的代码，升级你的代码的时候，难免会有一些错误，如果说你没有意识到错误的存在，一直往后写，最后程序出错，发现错误的代码在一个核心的地方，只有从头开始改，那是很痛苦的，所以一般在正确的时候做一个节点标记，如果出错我可以回到那个节点，至少前面的代码都是正确的</p><p>这就是「<strong>版本控制</strong>」</p><h3 id="什么又是分布式呢？"><a href="#什么又是分布式呢？" class="headerlink" title="什么又是分布式呢？"></a>什么又是分布式呢？</h3><p>如果用游戏的角度来讲，大概就是单机游戏和联网的游戏的区别。</p><p>在Git之前有很多版本管理的系统，但是他们都是集中式的，比如SVN，他们需要一个专门的服务器，来做代码管理，如果没有网络的情况下，就无法进行代码管理</p><p>Git就不需要这个要求，无论有没有网络，只要安装了Git，都能够进行代码管理</p><hr><h2 id="为什么要学习它"><a href="#为什么要学习它" class="headerlink" title="为什么要学习它"></a>为什么要学习它</h2><p>其实通过上面的讲解，应该多多少少知道为什么要做「版本控制」？以及「分布式」</p><p>实际上Git他的优势有很多，在「版本控制」这一点来说，它能够记录每个版本之间的差异，什么时候修改了，什么时候删除了，你可以在任何版本之间切换，总结一下</p><h3 id="Git的优点有如下："><a href="#Git的优点有如下：" class="headerlink" title="Git的优点有如下："></a>Git的优点有如下：</h3><ol><li><p>免费·开源：</p><p>说到这点，需要提到一个人，Linus，Linux内核的作者：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/linus.jpg"></p><blockquote><p>Git也是由他一手用C语言写的，仅用了10天时间，2005年问世，当时是为了对版本控制Linux内核的代码，在Git之前使用的是一个叫做BitKeeper这个商用版本控制系统，因为当时主张的开源，BitKeeper受到质疑，2005年，Linux内核团队和BitKeeper团队发生矛盾（社区有极客逆向破解了BitKeeper），BitKeeper收回使用权。Linux决定自己开发一个版本控制系统，10天之后，Git问世，成为业界主流，当然BitKeeper也凉凉了，Git不仅免费，而且代码也是开源的。</p></blockquote></li><li><p>速度快，档案体积小：</p><ul><li><p>由于Git是C语言开发，C语言本身速度就相当快</p></li><li><p>档案体积小：</p><blockquote><p>假如每个版本都保存一个文件，那可能很占用硬盘空间，而且文件杂乱无章，难以管理</p><p>但Git采用的是一个叫快照的方法，Git能够快速切换版本，且快照体积小</p></blockquote></li></ul></li><li><p>分布式版本管理系统：</p><p>随时随地，对代码进行版本管理，同时也可以在服务器上管理</p><ul><li><p>在没有网络的时候，在本地管理</p></li><li><p>在有网络的时候，在服务器上管理</p><blockquote><p>GitHub，2008年上线，这个全球最大的程序员社区，就是基于Git这个工具的版本控制网站，你可以在有网络的时候，把代码上传到GitHub上面进行储存</p></blockquote></li></ul></li></ol><blockquote><p>根据这一篇文章，你应该理解什么是Git了，那么下一篇就是硬核的命令，我们来看看，具体用这些命令，怎么实现，「版本控制」，『分布式』。</p><p>希望你有所收获~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> Git教程 </tag>
            
            <tag> 团队协作 </tag>
            
            <tag> 代码管理 </tag>
            
            <tag> 必会的工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用《只狼》教你学会Git（中）</title>
      <link href="/Git2/"/>
      <url>/Git2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/git.png"></p><h2 id="整体介绍："><a href="#整体介绍：" class="headerlink" title="整体介绍："></a>整体介绍：</h2><blockquote><p>在学习了Git相关的概念之后，我们正式开始学习如何使用Git</p><p>这篇文章主要分为两个部分：</p><ul><li>基础使用</li><li>进阶使用</li></ul><p>中篇负责讲述基础的使用liux</p></blockquote><hr><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="Git诞生：安装"><a href="#Git诞生：安装" class="headerlink" title="Git诞生：安装"></a>Git诞生：安装</h3><blockquote><p>Git 支持在 Windows、MacOS、Linux、Unix</p></blockquote><h4 id="MacOS安装："><a href="#MacOS安装：" class="headerlink" title="MacOS安装："></a>MacOS安装：</h4><p>MacOS有一个强大的包管理器：<strong>HomeBrew</strong></p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/home.jpg"></p><blockquote><ul><li><p>包管理器简单的认为是一个应用商店，你可以下载，安装，删除，看应用相关信息，升级应用（后面我会专门写一篇包管理器的文章）</p></li><li><p>它能够简化很多操作，尤其是对于程序员需要的一些工具的安装：</p><ul><li>Python解释器</li><li>GCC</li><li>Git</li><li>JDK</li><li>…..</li></ul><p>如果是在搜索引擎搜索的话，可能需要安装，并且配置环境变量，相对来说麻烦很多，所以会使用包管理器相当重要</p></li></ul></blockquote><p>所以，Git 也能够 通过HomeBrew安装</p><ol><li>首先安装HomeBrew，打开终端，输入：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>安装结束就可以使用了（详细不在这里展开，后面会写一篇专门介绍HomeBrew的文章）</p><ol start="2"><li>然后在终端中，输入命令行：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><ol start="3"><li>安装结束，输入命令验证一下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><ol start="4"><li>打印出版本信息既是安装成功</li></ol><h4 id="Windows安装："><a href="#Windows安装：" class="headerlink" title="Windows安装："></a>Windows安装：</h4><blockquote><p> Windows我使用不多，上面也有包管理器（Scoop、Chocolatey），但是我感觉不好用，我们就用传统的方法来进行Git的下载吧</p></blockquote><p>直接<a href="https://git-scm.com/downloads">点击这里</a>,在官方网站下载，安装完成后在，菜单里面找到Git 打开Git Bash，就能跳出一个类似于这样的窗口（我身边没win的机器，只有在网上找的图）：</p><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/win.png"></p><p>最后也是对git进行验证</p><h4 id="GNU-Linux安装："><a href="#GNU-Linux安装：" class="headerlink" title="GNU/Linux安装："></a>GNU/Linux安装：</h4><p>使用包管理器安装：</p><p>Linux因为有太多的发行版本，不同的比如Debian、CentOS里面的默认的包管理器就不同，常见的有：</p><ul><li>yum</li><li>apt-get</li></ul><p>所以对应安装的方法就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><p>玩Linux的应该都懂~</p><blockquote><p>安装好Git之后开始下一步</p></blockquote><hr><h3 id="Git启动：初始化"><a href="#Git启动：初始化" class="headerlink" title="Git启动：初始化"></a>Git启动：初始化</h3><blockquote><p> git的启动首先需要创建仓库，或者说版本库，什么意思呢，就是在指定文件夹下面，输入命令，让它拥有git的能力，能在里面进行版本控制</p><p>如果你不会一些基础命令，建议你先学习一些基本的命令，不过这里面用的最多的是 cd 这个命令，就是到指定路径下面，就是你想创建仓库的地方</p></blockquote><p>到了指定路径下面，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>你就让你的文件夹变成了一个版本库了</p><blockquote><p>So easy~ 这样Git初始化这个步骤就完成了，我们继续下一步</p></blockquote><hr><h3 id="Git穿越时空：版本控制"><a href="#Git穿越时空：版本控制" class="headerlink" title="Git穿越时空：版本控制"></a>Git穿越时空：版本控制</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/gits.jpg"></p><h4 id="工作区、暂存区、版本库、分支："><a href="#工作区、暂存区、版本库、分支：" class="headerlink" title="工作区、暂存区、版本库、分支："></a>工作区、暂存区、版本库、分支：</h4><blockquote><p>Git 工作中，有两个区域：</p><ul><li><p>工作区</p></li><li><p>版本库：</p><p>又分为：</p><ul><li>暂存区</li><li>分支</li><li>…..</li></ul></li></ul><p>我们来看看四者之间的区别。</p></blockquote><p><strong>工作区</strong> 就是你初始化之后，把文件夹变成版本库，这个文件夹，就是工作区</p><p><strong>版本库</strong> 就是工作区里面的一个隐藏文件夹.git，版本控制就是通过它实现</p><p><strong>暂存区</strong> 是版本库的一部分</p><p><strong>分支</strong> 是版本库的一部分，创建版本库默认的分支就是master</p><p>补充一个概念： <strong>目录树</strong> ，目录树是指由容器和对象构成的层次结构。树的叶子、节点往往是对象，树的非叶子节点是容器</p><p>图片这些元素的解释：</p><blockquote><p>在版本库中标记为 “index” 的区域是暂存区（也叫stage），在 “.git/index”文件中 ，是一个目录树</p><p>标记为 “master” 的是 master 分支所代表的目录树。在  “.git/refs/master” 文件中</p><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个指针，在.git/HEAD 文件中，它记录着目前指向的是什么分支</p><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p></blockquote><h4 id="基本工作流"><a href="#基本工作流" class="headerlink" title="基本工作流"></a>基本工作流</h4><blockquote><ul><li><p>当对工作区修改（或新增）的文件执行 “<strong>git add</strong>“ 命令时，工作区的文件被存入暂存区：</p><ul><li><strong>暂存区</strong>的<strong>目录树</strong>被更新，同时工作区修改（或新增）的<strong>文件内容</strong>被写入到<strong>对象库中的一个新的对象</strong>中，而该对象的ID被记录在暂存区的文件索引中。</li></ul></li><li><p>当执行提交操作（<strong>git commit</strong>）时，缓存区的文件被提交的当前的分支（master） </p><ul><li>master 指向的目录树被提交时暂存区的目录树所替换。</li></ul></li></ul></blockquote><p>可能上面这部分有点枯燥，主要是想一定的说明git的原理，不过适可而止，毕竟原理解释不是这篇文章主要目的，主要是为了使用git。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目快照的命令作介绍。</p><hr><h3 id="获取与创建项目命令"><a href="#获取与创建项目命令" class="headerlink" title="获取与创建项目命令"></a>获取与创建项目命令</h3><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p><p>在目录中执行 git init，就可以创建一个 Git 仓库了。比如我们创建 test 项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository in /Users/liuxunzhuo/top/liuxunzhuo/.git/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 /top/liuxunzhuo/.git/ 目录初始化空 Git 仓库完毕。</span></span><br></pre></td></tr></table></figure><p>现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br><span class="line">.    ..    .git</span><br></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>使用 git clone 拷贝一个云端的Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><p>[url] 为你想要复制的项目，就可以了。</p><p>例如我们克隆 Github 上的项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:Xunzhuo/SpringBoot-in-Action.git</span></span><br><span class="line">Cloning into &#x27;SpringBoot-in-Action&#x27;...</span><br><span class="line">remote: Counting objects: 13, done.</span><br><span class="line">remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13</span><br><span class="line">Receiving objects: 100% (13/13), done.</span><br><span class="line">Resolving deltas: 100% (2/2), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>克隆完成后，在当前目录下会生成一个SpringBoot-in-Action 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> SpringBoot-in-Action/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README   src </span><br></pre></td></tr></table></figure><p>上述操作将复制该项目的全部记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -a</span></span><br><span class="line">.        ..       .git     README   Rakefile lib</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">HEAD        description info        packed-refs</span><br><span class="line">branches    hooks       logs        refs</span><br><span class="line">config      index       objects</span><br></pre></td></tr></table></figure><p>默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。</p><hr><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目的快照的命令作介绍。</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add 命令可将该文件添加到缓存区，如我们添加以下两个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch hello.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        hello.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">?? README</span><br><span class="line">?? hello.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br></pre></td></tr></table></figure><p>git status 命令用于查看项目的当前状态。</p><p>接下来我们执行 git add 命令来添加文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README hello.py</span><br></pre></td></tr></table></figure><p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br></pre></td></tr></table></figure><p>新项目中，添加所有文件很普遍，我们可以使用 <strong>git add .</strong> 命令来添加当前项目的所有文件。</p><p>现在我们修改 README 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim README</span></span><br></pre></td></tr></table></figure><p>在 README 添加以下内容：然后保存退出。</p><p>再执行一下 git status：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">AM README</span><br><span class="line">A  hello.py</span><br></pre></td></tr></table></figure><p>“AM” 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 <strong>git add</strong> 命令将其添加到缓存中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br></pre></td></tr></table></figure><p>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>git status 以查看在你上次提交之后是否有修改。</p><p>我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line">    new file:   hello.py</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>执行 git diff 来查看执行 git status 的结果的详细信息。</p><p>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p><ul><li>尚未缓存的改动：<strong>git diff</strong></li><li>查看已缓存的改动： <strong>git diff –cached</strong></li><li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li><li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li></ul><p>在 hello.py 文件中输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><p>接下来我们来查看下 git diff –cached 的执行效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add hello.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached</span></span><br><span class="line"></span><br><span class="line">diff --git a/README b/README</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..e69de29</span><br><span class="line">diff --git a/hello.py b/hello.py</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..8cde782</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/hello.py</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+print(&quot;hello world&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。</p><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&#x27;xunzhuo&#x27;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email 981242367@qq.com</span></span><br></pre></td></tr></table></figure><p>接下来我们写入缓存，并提交对 hello.py 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;init&quot;</span></span></span><br><span class="line"></span><br><span class="line">[master（根提交） 39aeab6] init</span><br><span class="line"> 2 files changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.py</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>现在我们已经记录了快照。如果我们再执行 git status:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure><p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个”working directory clean：干净的工作目录”。</p><p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with <span class="string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># modified:   hello.py</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">~</span></span><br><span class="line">~</span><br><span class="line">&quot;.git/COMMIT_EDITMSG&quot; 9L, 257C</span><br></pre></td></tr></table></figure><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下(注意，只适合修改，如果新创建了文件，还是得先add，来修改缓存区的文件树)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a</span><br><span class="line">git commit -am</span><br></pre></td></tr></table></figure><p>我们先修改 hello.py 文件为以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(100):</span><br><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><p>再执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -am &#x27;修改 hello.py 文件&#x27;</span><br><span class="line"></span><br><span class="line">[master 5f2df9d] 修改 hello.py 文件</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>如果只是简单地从工作目录中手工删除文件，运行 <strong>git status</strong> 时就会在 <strong>Changes not staged for commit</strong> 的提示。</p><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <strong>-f</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 <strong>–cached</strong> 选项即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如我们删除 hello.py文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm hello.py</span> </span><br><span class="line">rm &#x27;hello.py&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>不从工作区中删除文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached README</span> </span><br><span class="line">rm &#x27;README&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm –r * </span><br></pre></td></tr></table></figure><p>进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。</p><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p>git mv 命令用于移动或重命名一个文件、目录、软连接。</p><p>我们先把刚移除的 README 添加回来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add README</span> </span><br></pre></td></tr></table></figure><p>然后对其重名:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git mv README  README.md</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。</p><p>针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&gt; master)</span><br><span class="line">Merge: c68142b 7774248</span><br><span class="line">Author: xunzhuo &lt;test@xunzhuo.com&gt;</span><br><span class="line">Date:   Fri May 3 15:55:58 2019 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch &#x27;change_site&#x27;</span><br><span class="line"></span><br><span class="line">commit c68142b562c260c3071754623b08e2657b4c6d5b</span><br><span class="line">Author: xunzhuo &lt;test@xunzhuo.com&gt;</span><br><span class="line">Date:   Fri May 3 15:52:12 2019 +0800</span><br><span class="line"></span><br><span class="line">    修改代码</span><br><span class="line"></span><br><span class="line">commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)</span><br><span class="line">Author: xunzhuo &lt;test@xunzhuo.com&gt;</span><br><span class="line">Date:   Fri May 3 15:49:26 2019 +0800</span><br><span class="line"></span><br><span class="line">    changed the xunzhuo.py</span><br><span class="line"></span><br><span class="line">commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00</span><br><span class="line">Author: xunzhuo &lt;test@xunzhuo.com&gt;</span><br><span class="line">Date:   Fri May 3 15:35:32 2019 +0800</span><br></pre></td></tr></table></figure><p>我们可以用 –oneline 选项来查看历史记录的简洁的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline</span></span><br><span class="line">d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">c68142b 修改代码</span><br><span class="line">7774248 (change_site) changed the xunzhuo.py</span><br><span class="line">c1501a2 removed test.txt、add xunzhuo.py</span><br><span class="line">3e92c19 add test.txt</span><br><span class="line">3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>这告诉我们的是，此项目的开发历史。</p><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the xunzhuo.py</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add xunzhuo.py</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</p><p>你也可以用 <strong>–reverse</strong> 参数来逆向显示所有日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --reverse --oneline</span></span><br><span class="line">3b58100 第一次版本提交</span><br><span class="line">3e92c19 add test.txt</span><br><span class="line">c1501a2 removed test.txt、add xunzhuo.py</span><br><span class="line">7774248 (change_site) changed the xunzhuo.py</span><br><span class="line">c68142b 修改代码</span><br><span class="line">d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --author=Linus --oneline -5</span></span><br><span class="line">81b50f3 Move &#x27;builtin-*&#x27; into a &#x27;builtin/&#x27; subdirectory</span><br><span class="line">3bb7256 make &quot;index-pack&quot; a built-in</span><br><span class="line">377d027 make &quot;git pack-redundant&quot; a built-in</span><br><span class="line">b532581 make &quot;git unpack-file&quot; a built-in</span><br><span class="line">112dd51 make &quot;mktag&quot; a built-in</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项：–since 和 –before，但是你也可以用 –until 和 –after。</p><p>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span></span><br><span class="line">5469e2d Git 1.7.1-rc2</span><br><span class="line">d43427d Documentation/remote-helpers: Fix typos and improve language</span><br><span class="line">272a36b Fixup: Second argument may be any arbitrary string</span><br><span class="line">b6c8d2d Documentation/remote-helpers: Add invocation section</span><br><span class="line">5ce4f4e Documentation/urls: Rewrite to accomodate transport::address</span><br><span class="line">00b84e9 Documentation/remote-helpers: Rewrite description</span><br><span class="line">03aa87e Documentation: Describe other situations where -z affects git diff</span><br><span class="line">77bc694 rebase-interactive: silence warning when no commits rewritten</span><br><span class="line">636db2c t3301: add tests to use --format=&quot;%N&quot;</span><br></pre></td></tr></table></figure><h3 id="git放弃修改-amp-放弃增加文件"><a href="#git放弃修改-amp-放弃增加文件" class="headerlink" title="git放弃修改&amp;放弃增加文件"></a>git放弃修改&amp;放弃增加文件</h3><h4 id="本地修改了一堆文件-并没有使用git-add到暂存区-，想放弃修改。"><a href="#本地修改了一堆文件-并没有使用git-add到暂存区-，想放弃修改。" class="headerlink" title="本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。"></a>本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</h4><ul><li>单个文件/文件夹：</li></ul><p><code>$ git checkout -- filename</code></p><ul><li>所有文件/文件夹：</li></ul><p><code>$ git checkout .</code></p><h4 id="本地新增了一堆文件-并没有git-add到暂存区-，想放弃修改。"><a href="#本地新增了一堆文件-并没有git-add到暂存区-，想放弃修改。" class="headerlink" title="本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。"></a>本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</h4><ul><li>单个文件/文件夹：</li></ul><p><code>$ rm filename / rm dir -rf</code></p><ul><li>所有文件/文件夹：</li></ul><p><code>$ git clean -xdf</code></p><p>// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</p><h4 id="本地修改-新增了一堆文件，已经git-add到暂存区，想放弃修改。"><a href="#本地修改-新增了一堆文件，已经git-add到暂存区，想放弃修改。" class="headerlink" title="本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。"></a>本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。</h4><ul><li>单个文件/文件夹：</li></ul><p><code>$ git reset HEAD filename</code></p><ul><li>所有文件/文件夹：</li></ul><p><code>$ git reset HEAD </code>.</p><h4 id="本地通过git-add-amp-git-commit-之后，想要撤销此次commit"><a href="#本地通过git-add-amp-git-commit-之后，想要撤销此次commit" class="headerlink" title="本地通过git add &amp; git commit 之后，想要撤销此次commit"></a>本地通过git add &amp; git commit 之后，想要撤销此次commit</h4><p><code>$ git reset commit_id</code></p><p>这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位<br>// 撤销之后，你所做的已经commit的修改还在工作区！</p><p><code>$ git reset --hard commit_id</code></p><p>这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位<br>// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码也将会清除！</p><blockquote><p>好的，基础部分到这里结束了，接下来进行最后的进阶学习！</p><p><em><strong>坚持就是胜利~</strong></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> Git教程 </tag>
            
            <tag> 团队协作 </tag>
            
            <tag> 代码管理 </tag>
            
            <tag> 必会的工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用《只狼》教你学会Git（下）</title>
      <link href="/Git1/"/>
      <url>/Git1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/git.png"></p><h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><blockquote><p>在学习了Git基础使用之后，我们正式开始学习Git进阶的使用：</p><p>这篇文章主要分为两个部分：</p><ul><li>分支管理</li><li>远程仓库</li><li>标签管理</li></ul></blockquote><hr><h2 id="Git长出枝干：分支管理"><a href="#Git长出枝干：分支管理" class="headerlink" title="Git长出枝干：分支管理"></a>Git长出枝干：分支管理</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p><p>正式因为有分支这个特性，之前谈到的Git能使团队协作井然有序，至于怎么利用Git团队协作，不是这篇的重点，这篇主要是让你掌握怎么使用工具，后面我会写一篇《基于Git 的三大工作流》，来分析现在基于Git的三种流行的团队协作工作方式： </p><ul><li>Git工作流</li><li>GitHub工作流</li><li>GitLab工作流</li></ul><h4 id="创建分支命令："><a href="#创建分支命令：" class="headerlink" title="创建分支命令："></a>创建分支命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><h4 id="切换分支命令"><a href="#切换分支命令" class="headerlink" title="切换分支命令:"></a>切换分支命令:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><h4 id="合并分支命令"><a href="#合并分支命令" class="headerlink" title="合并分支命令:"></a>合并分支命令:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge </span><br></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><p>开始前runoob我们先创建一个测试目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir gitdemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gitdemo/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository...</span><br><span class="line"><span class="meta">$</span><span class="bash"> touch README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&#x27;第一次版本提交&#x27;</span></span></span><br><span class="line">[master (root-commit) 3b58100] 第一次版本提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h4><p>列出分支基本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p><p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p><p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  test</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 <strong>test</strong>。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>test</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;xunzhuo.com&#x27;</span> &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&#x27;add test.txt&#x27;</span></span></span><br><span class="line">[master 3e92c19] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout testing</span></span><br><span class="line">Switched to branch &#x27;testing&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>当我们切换到 <strong>test</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们有重新出现了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b newtest</span></span><br><span class="line">Switched to a new branch &#x27;newtest&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span> </span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README</span><br><span class="line"><span class="meta">$</span><span class="bash"> touch xunzhuo.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;removed test.txt、add xunzhuo.py&#x27;</span></span></span><br><span class="line">[newtest c1501a2] removed test.txt、add xunzhuo.py</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 xunzhuo.py</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        xunzhuo.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 xunzhuo.py 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 xunzhuo.py 不存在主分支中。</p><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除分支命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除 testing 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d testing</span></span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge newtest</span></span><br><span class="line">Updating 3e92c19..c1501a2</span><br><span class="line">Fast-forward</span><br><span class="line"> xunzhuo.py | 0</span><br><span class="line"> test.txt   | 1 -</span><br><span class="line"> 2 files changed, 1 deletion(-)</span><br><span class="line"> create mode 100644 xunzhuo.py</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">README        xunzhuo.py</span><br></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p><p>合并完后就可以删除分支:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d newtest</span></span><br><span class="line">Deleted branch newtest (was c1501a2).</span><br></pre></td></tr></table></figure><p>删除后， 就只剩下 master 分支了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat xunzhuo.py</span></span><br></pre></td></tr></table></figure><p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 xunzhuo.py 内容改为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?py</span><br><span class="line">echo &#x27;xunzhuo&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>创建 change_site 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b change_site</span></span><br><span class="line">Switched to a new branch &#x27;change_site&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim xunzhuo.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> head -3 xunzhuo.py</span></span><br><span class="line">&lt;?py</span><br><span class="line">echo &#x27;xunzhuo&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;changed the xunzhuo.py&#x27;</span></span></span><br><span class="line">[change_site 7774248] changed the xunzhuo.py</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 xunzhuo.py 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat xunzhuo.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim xunzhuo.py    <span class="comment"># 修改内容如下</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat xunzhuo.py</span></span><br><span class="line">&lt;?py</span><br><span class="line">echo 1;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --git a/xunzhuo.py b/xunzhuo.py</span><br><span class="line">index e69de29..ac60739 100644</span><br><span class="line">--- a/xunzhuo.py</span><br><span class="line">+++ b/xunzhuo.py</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?py</span><br><span class="line">+echo 1;</span><br><span class="line">+?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;修改代码&#x27;</span></span></span><br><span class="line">[master c68142b] 修改代码</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge change_site</span></span><br><span class="line">Auto-merging xunzhuo.py</span><br><span class="line">CONFLICT (content): Merge conflict in xunzhuo.py</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat xunzhuo.py     <span class="comment"># 代开文件，看到冲突内容</span></span></span><br><span class="line">&lt;?py</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">echo 1;</span><br><span class="line">=======</span><br><span class="line">echo &#x27;xunzhuo&#x27;;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; change_site</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim xunzhuo.py</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> cat xunzhuo.py</span></span><br><span class="line">&lt;?py</span><br><span class="line">echo 1;</span><br><span class="line">echo &#x27;xunzhuo&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --cc xunzhuo.py</span><br><span class="line">index ac60739,b63d7d7..0000000</span><br><span class="line">--- a/xunzhuo.py</span><br><span class="line">+++ b/xunzhuo.py</span><br><span class="line">@@@ -1,3 -1,3 +1,4 @@@</span><br><span class="line">  &lt;?py</span><br><span class="line"> +echo 1;</span><br><span class="line">+ echo &#x27;xunzhuo&#x27;;</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">UU xunzhuo.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add xunzhuo.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status -s</span></span><br><span class="line">M  xunzhuo.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">[master 88afe0e] Merge branch &#x27;change_site&#x27;</span><br></pre></td></tr></table></figure><h2 id="Git飞上云端：远程仓库"><a href="#Git飞上云端：远程仓库" class="headerlink" title="Git飞上云端：远程仓库"></a>Git飞上云端：远程仓库</h2><p>Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><hr><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>本例以 Github 为例作为远程仓库，如果你没有 Github 可以在官网 <a href="https://github.com/%E6%B3%A8%E5%86%8C%E3%80%82">https://github.com/注册。</a></p><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>使用以下命令生成 SSH Key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>后面的 <strong><a href="mailto:&#x79;&#111;&#117;&#x72;&#95;&#x65;&#109;&#97;&#105;&#108;&#x40;&#121;&#111;&#117;&#x72;&#x65;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#x79;&#111;&#117;&#x72;&#95;&#x65;&#109;&#97;&#105;&#108;&#x40;&#121;&#111;&#117;&#x72;&#x65;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></strong> 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 ~/ 下生成 .ssh 文件夹，进去，打开 <strong>id_rsa.pub</strong>，复制里面的 <strong>key</strong>。</p><p>回到 github 上，进入 Account =&gt; Settings（账户配置）。</p><p>左边选择 <strong>SSH and GPG keys</strong>，然后点击 <strong>New SSH key</strong> 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。</p><p>为了验证是否成功，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line">Hi xunzhuo! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>以下命令说明我们已成功连上 Github。</p><p>之后登录后点击” New repository “ </p><p>之后在在Repository name 填入 xunzhuo-git-test(远程仓库名) ，其他保持默认设置，点击”Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir xunzhuo-git-test                     <span class="comment"># 创建测试目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> xunzhuo-git-test/                       <span class="comment"># 进入测试目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;# 菜鸟教程 Git 测试&quot;</span> &gt;&gt; README.md     <span class="comment"># 创建 README.md 文件并写入内容</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls                                        <span class="comment"># 查看目录下的文件</span></span></span><br><span class="line">README</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init                                  <span class="comment"># 初始化</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add README.md                         <span class="comment"># 添加文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;添加 README.md 文件&quot;</span>        <span class="comment"># 提交并备注信息</span></span></span><br><span class="line">[master (root-commit) 0205aab] 添加 README.md 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交到 Github</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:xunzhuo/xunzhuo-git-test.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><p>以下命令请根据你在Github成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的Github用户名不一样，仓库名也不一样。</p><p>接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：</p><hr><h3 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h3><p>要查看当前配置有哪些远程仓库，可以用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line">origin</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (push)</span><br></pre></td></tr></table></figure><p>执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</p><hr><h3 id="提取远程仓库"><a href="#提取远程仓库" class="headerlink" title="提取远程仓库"></a>提取远程仓库</h3><p>Git 有两个命令用来提取远程仓库的更新。</p><p>1、从远程仓库下载新分支与数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>该命令执行完后需要执行git merge 远程分支到你所在的分支。</p><p>2、从远端仓库提取数据并尝试合并到当前分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</p><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 <strong>git fetch [alias]</strong> 告诉 Git 去获取它有你没有的数据，然后你可以执行 <strong>git merge [alias]/[branch]</strong> 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</p><p>接下来我们在 Github 上点击” README.md” 并在线修改它:</p><p>然后我们在本地更新修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:xunzhuo/xunzhuo-git-test</span><br><span class="line">   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure><p>以上信息”0205aab..febd8ed master -&gt; origin/master” 说明 master 分支已被更新，我们可以使用以下命令将更新同步到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/master</span></span><br><span class="line">Updating 0205aab..febd8ed</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>查看 README.md 文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat README.md</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Git 测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 第一次修改内容</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>推送你的新分支与数据到某个远端仓库命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [alias] [branch]</span><br></pre></td></tr></table></figure><p>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch xunzhuo-test.txt      <span class="comment"># 添加文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add xunzhuo-test.txt</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;添加到远程&quot;</span></span></span><br><span class="line">master 69e702d] 添加到远程</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 xunzhuo-test.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master    <span class="comment"># 推送到 Github</span></span></span><br></pre></td></tr></table></figure><p>重新回到我们的 Github 仓库，可以看到文件已经提交上来了</p><hr><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><p>删除远程仓库你可以使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (push)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加仓库 origin2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin2 git@github.com:xunzhuo/xunzhuo-git-test.git</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (push)</span><br><span class="line">origin2    git@github.com:xunzhuo/xunzhuo-git-test.git (fetch)</span><br><span class="line">origin2    git@github.com:xunzhuo/xunzhuo-git-test.git (push)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除仓库 origin2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:xunzhuo/xunzhuo-git-test.git (push)</span><br></pre></td></tr></table></figure><hr><h2 id="Git的标记：标签管理"><a href="#Git的标记：标签管理" class="headerlink" title="Git的标记：标签管理"></a>Git的标记：标签管理</h2><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 xunzhuo 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v1.0</span> </span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the xunzhuo.py</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add xunzhuo.py</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v0.9 85fc7e7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline --decorate --graph</span></span><br><span class="line">*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 7774248 (change_site) changed the xunzhuo.py</span><br><span class="line">* | c68142b 修改代码</span><br><span class="line">|/  </span><br><span class="line">* c1501a2 removed test.txt、add xunzhuo.py</span><br><span class="line">* 3e92c19 add test.txt</span><br><span class="line">* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m &quot;xunzhuo.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m &quot;xunzhuo.com标签&quot;</span><br></pre></td></tr></table></figure><hr><blockquote><p>Git基本和进阶的使用基本到这里就结束了，其实学起来感觉问题不大，但是实际要多使用，养成代码版本控制管理的习惯，才能熟练使用这一利器，仅仅通过这三篇文章学习理论是不够的。</p><p>之后我会写基于Git的工作流，这是掌握Git后应该知道的团队协作方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coder必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> Git教程 </tag>
            
            <tag> 团队协作 </tag>
            
            <tag> 代码管理 </tag>
            
            <tag> 必会的工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/intro/"/>
      <url>/intro/</url>
      
        <content type="html"><![CDATA[<hr><img src="https://picreso.oss-cn-beijing.aliyuncs.com/circle-cropped.png" style="zoom:100%;" /><div align="center" style="font-size:120%"><p>An AI Lover🤖 A Crazy Coder💻  A Life Explorer🌈</p><h3 id="About-Me👨‍🎓"><a href="#About-Me👨‍🎓" class="headerlink" title="About Me👨‍🎓"></a>About Me👨‍🎓</h3><p>I call myself <code>1900</code> from 《The legend of 1900🚢》</p><p><strong>一个寻找着属于自己的那艘船🚢和钢琴🎹的人</strong></p><p><strong>一个四肢💪不发达，头脑🧠也不简单的600度近视眼👓</strong></p><p><strong>热爱编程</strong>💻，<strong>热爱分享</strong>📚，<strong>热爱人工智能</strong>🤖️，<strong>热爱生活</strong>🌈</p><hr><h3 id="Location：Chengdu🍵-of-China🇨🇳"><a href="#Location：Chengdu🍵-of-China🇨🇳" class="headerlink" title="Location：Chengdu🍵 of China🇨🇳"></a>Location：<code>Chengdu🍵 of China🇨🇳</code></h3><img src="https://picreso.oss-cn-beijing.aliyuncs.com/images-1.jpg" style="zoom:150%;" /><h3 id="School：University-of-Electronic-Science-and-Technology-of-China"><a href="#School：University-of-Electronic-Science-and-Technology-of-China" class="headerlink" title="School：University of Electronic Science and Technology of China!"></a>School：<code>University of Electronic Science and Technology of China</code>!</h3><p><img src="https://picreso.oss-cn-beijing.aliyuncs.com/uestc.jpeg"></p><p>一个在读大学本科生，软件工程专业👨‍🎓。</p><p>热爱一切技术🔥</p><p>喜欢折腾电子产品🖥📱💻</p><p>主要方向是<code>自然语言处理</code>💬，<code>机器学习</code>🤖，<code>深度学习</code>🌊</p><p><strong>🌈梦想着用人工智能🤖️去让世界更美好，为社会做贡献🤔</strong></p><h3 id="About-Me-More👨‍🎓"><a href="#About-Me-More👨‍🎓" class="headerlink" title="About Me More👨‍🎓"></a>About Me More👨‍🎓</h3><p>对于我的<strong>学习</strong>经历⚡️：可以<a href="https://liuxunzhuo.tech/life/">点击这里</a></p><p>对于我的<strong>技术栈</strong>🏅：可以<a href="https://liuxunzhuo.tech/about/">点击这里</a></p><h3 id="About-Website"><a href="#About-Website" class="headerlink" title="About Website"></a>About Website</h3><p>对自己的约束👀：养成做笔记，总结归纳的习惯🚀</p><p>结交同道中人👬：欢迎交流讨论，一起进步✈️</p><p>记录自己生活🌈：偶尔发发牢骚，写写随笔✍️</p><p>对知识的共享📚：总结分享计算机、软件、人工智能相关的文章📁</p><h1 id="Social"><a href="#Social" class="headerlink" title="Social"></a>Social</h1><h3 id="If-you-want-to-find-me👀"><a href="#If-you-want-to-find-me👀" class="headerlink" title="If you want to find me👀"></a>If you want to find me👀</h3><p>WeChat💬：<code>k08101203</code></p><p>QQ🐧：<code>981242367</code></p><div class="note primary flat"><p>如果有问题也可以<a href="https://liuxunzhuo.tech/message/">点击这里留言</a>，我看到会及时回复的💬</p><p>立一个Flag🚩，养成每周写博客的习惯</p><p>每周天更新博文📚，请持续关注哦</p></div><p><em><strong>Stay hungry, Stay foolish</strong></em></p></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
